25769803776,BLOCK,2,,{ extends: ['@commitlint/config-conventional'] },17,,1,,,2,,ANY
25769803777,BLOCK,2,,['@commitlint/config-conventional'],28,,1,,,2,,ANY
25769803778,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803779,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803780,BLOCK,2,,new Logger(AppController.name),28,,6,,,2,,ANY
25769803781,BLOCK,-1,,{},55,,7,,,3,,ANY
25769803782,BLOCK,-1,,"{
    this.logger.log('Calling service get Hello!');
    return this.appService.getHello();
  }",13,,10,,,2,,ANY
25769803783,BLOCK,1,,"import { Controller, Get, Logger } from '@nestjs/common';",0,,1,,,1,,ANY
25769803784,BLOCK,3,,"@Controller()
export class AppController {
  private readonly logger = new Logger(AppController.name);
  constructor(private readonly appService: AppService) {}

  @Get()
  getHello() {
    this.logger.log('Calling service get Hello!');
    return this.appService.getHello();
  }
}",0,,4,,,3,,ANY
25769803785,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803786,BLOCK,2,,"{
  imports: [
    TypeOrmModule.forRoot(appPostgresDataSource),
    LoggerModule.forRoot(pinoOptions),
    UsersModule,
    RolesModule,
    RoleAliasesModule,
    UserRoleByTenantsModule,
    TenantRoleAliasModule,
  ],
  controllers: [AppController],
  providers: [AppService],
}",8,,15,,,2,,ANY
25769803787,BLOCK,2,,"[
    TypeOrmModule.forRoot(appPostgresDataSource),
    LoggerModule.forRoot(pinoOptions),
    UsersModule,
    RolesModule,
    RoleAliasesModule,
    UserRoleByTenantsModule,
    TenantRoleAliasModule,
  ]",11,,16,,,2,,ANY
25769803788,BLOCK,2,,[AppController],15,,25,,,2,,ANY
25769803789,BLOCK,2,,[AppService],13,,26,,,2,,ANY
25769803790,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803791,BLOCK,-1,,"{
    consumer.apply(CorrelationIdMiddleware).forRoutes('*');
  }",42,,29,,,3,,ANY
25769803792,BLOCK,5,,"import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';",0,,5,,,5,,ANY
25769803793,BLOCK,14,,"@Module({
  imports: [
    TypeOrmModule.forRoot(appPostgresDataSource),
    LoggerModule.forRoot(pinoOptions),
    UsersModule,
    RolesModule,
    RoleAliasesModule,
    UserRoleByTenantsModule,
    TenantRoleAliasModule,
  ],
  controllers: [AppController],
  providers: [AppService],
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer.apply(CorrelationIdMiddleware).forRoutes('*');
  }
}",0,,15,,,14,,ANY
25769803794,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803795,BLOCK,2,,new Logger(AppService.name),28,,5,,,2,,ANY
25769803796,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803797,BLOCK,1,,{ message: `Service ${AppService.name} working !!` },11,,9,,,1,,ANY
25769803798,BLOCK,-1,,"{
    this.logger.log(`${AppService.name} called function ${this.getHello.name}`);
    return { message: `Service ${AppService.name} working !!` };
  }",13,,7,,,2,,ANY
25769803799,BLOCK,1,,"import { Injectable, Logger } from '@nestjs/common';",0,,1,,,1,,ANY
25769803800,BLOCK,2,,"@Injectable()
export class AppService {
  private readonly logger = new Logger(AppService.name);

  getHello() {
    this.logger.log(`${AppService.name} called function ${this.getHello.name}`);
    return { message: `Service ${AppService.name} working !!` };
  }
}",0,,3,,,2,,ANY
25769803801,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803802,BLOCK,2,,new Logger(RoleAliasesController.name),28,,12,,,2,,ANY
25769803803,BLOCK,-1,,{},71,,11,,,3,,ANY
25769803804,BLOCK,-1,,"{
    this.logger.log('Creating new Role Alias ..');

    const newRole = await this.roleAliasesService.create(createRoleAliasDto);
    this.logger.log(`Created new Role Alias! id: ${newRole.id}.`);
    return newRole;
  }",63,,15,,,3,,ANY
25769803805,BLOCK,-1,,"{
    this.logger.log('Finding All Roles Aliases...');
    return await this.roleAliasesService.findAll();
  }",18,,24,,,2,,ANY
25769803806,BLOCK,-1,,"{
    this.logger.log(`Searching for Role Alias with id: ${id}.`);
    const foundRoleAlias = await this.roleAliasesService.findOne(+id);
    this.logger.log(`Role Alias with id: ${id} was found.`);
    return foundRoleAlias;
  }",41,,30,,,3,,ANY
25769803807,BLOCK,-1,,"{
    this.logger.log(`Searching for Role Aliases with many search args.`);
    const foundRoleAlias = await this.roleAliasesService.findByMany(findRoleAliasDto);
    this.logger.log(`found ${foundRoleAlias.length} Role Aliases.`);
    return foundRoleAlias;
  }",61,,37,,,3,,ANY
25769803808,BLOCK,-1,,"{
    this.logger.log(`Updating role alias with id: ${id}.`);
    const foundRoleAlias = await this.roleAliasesService.update(+id, updateRoleAliasDto);
    this.logger.log(`Role alias with id: ${id} was updated.`);
    return foundRoleAlias;
  }",88,,45,,,4,,ANY
25769803809,BLOCK,-1,,"{
    this.logger.log(`Disabling / Enabling Role alias with id: ${id}.`);
    const foundRoleAlias = await this.roleAliasesService.remove(+id);
    this.logger.log(`Role alias with id: ${id} was ` + foundRoleAlias.enabled ? 'Enabled!' : 'Disabled!');
    return foundRoleAlias;
  }",40,,53,,,3,,ANY
25769803810,BLOCK,2,,"import { Controller, Get, Post, Body, Patch, Param, Delete, Logger } from '@nestjs/common';",0,,2,,,2,,ANY
25769803811,BLOCK,7,,"@ApiTags('role-aliases')
@Controller('role-aliases')
export class RoleAliasesController {
  constructor(private readonly roleAliasesService: RoleAliasesService) {}
  private readonly logger = new Logger(RoleAliasesController.name);

  @Post()
  async create(@Body() createRoleAliasDto: CreateRoleAliasDto) {
    this.logger.log('Creating new Role Alias ..');

    const newRole = await this.roleAliasesService.create(createRoleAliasDto);
    this.logger.log(`Created new Role Alias! id: ${newRole.id}.`);
    return newRole;
  }

  @Get()
  async findAll() {
    this.logger.log('Finding All Roles Aliases...');
    return await this.roleAliasesService.findAll();
  }

  @Get(':id')
  async findOne(@Param('id') id: string) {
    this.logger.log(`Searching for Role Alias with id: ${id}.`);
    const foundRoleAlias = await this.roleAliasesService.findOne(+id);
    this.logger.log(`Role Alias with id: ${id} was found.`);
    return foundRoleAlias;
  }
  @Post('many/')
  async findMany(@Body() f...",0,,8,,,7,,ANY
25769803812,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803813,BLOCK,2,,"{
  imports: [TypeOrmModule.forFeature([Tenant, Role, RoleAlias, TenantRoleAliases], dbConfig.name)],
  controllers: [RoleAliasesController],
  providers: [RoleAliasesService, TenantRoleAliasesService],
}",8,,9,,,2,,ANY
25769803814,BLOCK,2,,"[TypeOrmModule.forFeature([Tenant, Role, RoleAlias, TenantRoleAliases], dbConfig.name)]",11,,10,,,2,,ANY
25769803815,BLOCK,1,,"[Tenant, Role, RoleAlias, TenantRoleAliases]",37,,10,,,3,,ANY
25769803816,BLOCK,2,,[RoleAliasesController],15,,11,,,2,,ANY
25769803817,BLOCK,2,,"[RoleAliasesService, TenantRoleAliasesService]",13,,12,,,2,,ANY
25769803818,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803819,BLOCK,6,,"import { RoleAlias, Role, Tenant, TenantRoleAliases } from '@avantodev/avanto-db';",0,,6,,,6,,ANY
25769803820,BLOCK,8,,"@Module({
  imports: [TypeOrmModule.forFeature([Tenant, Role, RoleAlias, TenantRoleAliases], dbConfig.name)],
  controllers: [RoleAliasesController],
  providers: [RoleAliasesService, TenantRoleAliasesService],
})
export class RoleAliasesModule {}",0,,9,,,8,,ANY
25769803821,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803822,BLOCK,2,,new Logger(RolesController.name),28,,12,,,2,,ANY
25769803823,BLOCK,-1,,{},59,,11,,,3,,ANY
25769803824,BLOCK,-1,,"{
    this.logger.log('Creating new Role ..');
    const newRole = await this.rolesService.create(createRoleDto);
    this.logger.log(`Created new Role! id: ${newRole.id}.`);
    return newRole;
  }",53,,15,,,3,,ANY
25769803825,BLOCK,-1,,"{
    this.logger.log('Finding All Roles...');
    return this.rolesService.findAll();
  }",18,,23,,,2,,ANY
25769803826,BLOCK,-1,,"{
    this.logger.log(`Searching for Roles with many search args.`);
    const foundRoleType = await this.rolesService.findByMany(findRoleDto);
    return foundRoleType;
  }",51,,29,,,3,,ANY
25769803827,BLOCK,-1,,"{
    this.logger.log(`Searching for Role with id: ${id}.`);
    const foundRole = await this.rolesService.findOne(+id);
    this.logger.log(`Role with id: ${id} was found.`);
    return foundRole;
  }",41,,36,,,3,,ANY
25769803828,BLOCK,-1,,"{
    this.logger.log(`Updating role with id: ${id}.`);
    const foundRole = await this.rolesService.update(+id, updateRoleDto);
    this.logger.log(`Role with id: ${id} was updated.`);
    return foundRole;
  }",78,,44,,,4,,ANY
25769803829,BLOCK,-1,,"{
    this.logger.log(`Disabling / Enabling Role with id: ${id}.`);
    const foundRole = await this.rolesService.remove(+id);
    this.logger.log(`Role with id: ${id} was ` + foundRole.enabled ? 'Enabled!' : 'Disabled!');
    return foundRole;
  }",40,,52,,,3,,ANY
25769803830,BLOCK,2,,"import { Controller, Get, Post, Body, Patch, Param, Delete, Logger } from '@nestjs/common';",0,,2,,,2,,ANY
25769803831,BLOCK,7,,"@ApiTags('roles')
@Controller('roles')
export class RolesController {
  constructor(private readonly rolesService: RolesService) {}
  private readonly logger = new Logger(RolesController.name);

  @Post()
  async create(@Body() createRoleDto: CreateRoleDto) {
    this.logger.log('Creating new Role ..');
    const newRole = await this.rolesService.create(createRoleDto);
    this.logger.log(`Created new Role! id: ${newRole.id}.`);
    return newRole;
  }

  @Get()
  async findAll() {
    this.logger.log('Finding All Roles...');
    return this.rolesService.findAll();
  }

  @Post('many/')
  async findMany(@Body() findRoleDto: FindRoleDto) {
    this.logger.log(`Searching for Roles with many search args.`);
    const foundRoleType = await this.rolesService.findByMany(findRoleDto);
    return foundRoleType;
  }

  @Get(':id')
  async findOne(@Param('id') id: string) {
    this.logger.log(`Searching for Role with id: ${id}.`);
    const foundRole = await this.rolesService.findOne(+id);
 ...",0,,8,,,7,,ANY
25769803832,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803833,BLOCK,2,,"{
  imports: [TypeOrmModule.forFeature([User, Role], dbConfig.name)],
  controllers: [RolesController],
  providers: [RolesService],
}",8,,8,,,2,,ANY
25769803834,BLOCK,2,,"[TypeOrmModule.forFeature([User, Role], dbConfig.name)]",11,,9,,,2,,ANY
25769803835,BLOCK,1,,"[User, Role]",37,,9,,,3,,ANY
25769803836,BLOCK,2,,[RolesController],15,,10,,,2,,ANY
25769803837,BLOCK,2,,[RolesService],13,,11,,,2,,ANY
25769803838,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803839,BLOCK,2,,"import { Role, User } from '@avantodev/avanto-db';",0,,2,,,2,,ANY
25769803840,BLOCK,7,,"@Module({
  imports: [TypeOrmModule.forFeature([User, Role], dbConfig.name)],
  controllers: [RolesController],
  providers: [RolesService],
})
export class RolesModule {}",0,,8,,,7,,ANY
25769803841,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803842,BLOCK,2,,new Logger(TenantRoleAliasesController.name),28,,13,,,2,,ANY
25769803843,BLOCK,-1,,{},81,,12,,,3,,ANY
25769803844,BLOCK,-1,,"{
    this.logger.log('Creating new Tenant Role Aliases ..');
    const tenantRoleAlias = await this.tenantRoleAliasService.create(createTenantRoleAliasDto);
    this.logger.log(`Created Tenenat Role Alias with id:${tenantRoleAlias.id}`);
    return tenantRoleAlias;
  }",75,,16,,,3,,ANY
25769803845,BLOCK,-1,,"{
    this.logger.log('Finding All Tenant Role Aliases...');
    const tenantRoleAlias = await this.tenantRoleAliasService.findAll();
    return tenantRoleAlias;
  }",18,,24,,,2,,ANY
25769803846,BLOCK,-1,,"{
    this.logger.log(`Searching for Tenant Role Aliases with many search args.`);
    const tenantRoleAlias = await this.tenantRoleAliasService.findByMany(findTenantRoleAliasesDto);
    return tenantRoleAlias;
  }",75,,31,,,3,,ANY
25769803847,BLOCK,-1,,"{
    this.logger.log(`Assign A Role alias to a tenant Role alias`);
    const tenantRoleAlias = await this.tenantRoleAliasService.assignToRoleAlias(assignRoleAliasDto);
    return tenantRoleAlias;
  }",69,,37,,,3,,ANY
25769803848,BLOCK,-1,,"{
    this.logger.log(`Searching for Tenant Role ALiases with id: ${id}.`);
    const tenantRoleAlias = await this.tenantRoleAliasService.findOne(+id);
    this.logger.log(`Found Tenenat Role Alias with id:${id}`);
    return tenantRoleAlias;
  }",41,,44,,,3,,ANY
25769803849,BLOCK,-1,,"{
    this.logger.log(`Updating tenant role alias with id: ${id}.`);
    const tenantRoleAlias = await this.tenantRoleAliasService.update(+id, updateTenantRoleAliasesDto);
    this.logger.log(`Updated Tenenat Role Alias with id:${id}`);
    return tenantRoleAlias;
  }",102,,52,,,4,,ANY
25769803850,BLOCK,-1,,"{
    this.logger.log(`Disabling / Enabling Tenant Role Alias with id: ${id}.`);
    const tenantRoleAlias = await this.tenantRoleAliasService.remove(+id);
    this.logger.log(`Tenant Role Alias with id: ${id} was ` + tenantRoleAlias.enabled ? 'Enabled!' : 'Disabled!');
    return tenantRoleAlias;
  }",40,,60,,,3,,ANY
25769803851,BLOCK,1,,"import { Controller, Get, Post, Body, Patch, Param, Delete, Logger } from '@nestjs/common';",0,,1,,,1,,ANY
25769803852,BLOCK,8,,"@ApiTags('tenant-role-aliases')
@Controller('tenant-role-aliases')
export class TenantRoleAliasesController {
  constructor(private readonly tenantRoleAliasService: TenantRoleAliasesService) {}
  private readonly logger = new Logger(TenantRoleAliasesController.name);

  @Post()
  async create(@Body() createTenantRoleAliasDto: CreateTenantRoleAliasDto) {
    this.logger.log('Creating new Tenant Role Aliases ..');
    const tenantRoleAlias = await this.tenantRoleAliasService.create(createTenantRoleAliasDto);
    this.logger.log(`Created Tenenat Role Alias with id:${tenantRoleAlias.id}`);
    return tenantRoleAlias;
  }

  @Get()
  async findAll() {
    this.logger.log('Finding All Tenant Role Aliases...');
    const tenantRoleAlias = await this.tenantRoleAliasService.findAll();
    return tenantRoleAlias;
  }

  @Post('many/')
  async findMany(@Body() findTenantRoleAliasesDto: FindTenantRoleAliasDto) {
    this.logger.log(`Searching for Tenant Role Aliases with many search args.`);
  ...",0,,9,,,8,,ANY
25769803853,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803854,BLOCK,2,,"{
  imports: [TypeOrmModule.forFeature([Role, Tenant, TenantRoleAliases, RoleAlias], dbConfig.name)],
  controllers: [TenantRoleAliasesController],
  providers: [TenantRoleAliasesService],
}",8,,8,,,2,,ANY
25769803855,BLOCK,2,,"[TypeOrmModule.forFeature([Role, Tenant, TenantRoleAliases, RoleAlias], dbConfig.name)]",11,,9,,,2,,ANY
25769803856,BLOCK,1,,"[Role, Tenant, TenantRoleAliases, RoleAlias]",37,,9,,,3,,ANY
25769803857,BLOCK,2,,[TenantRoleAliasesController],15,,10,,,2,,ANY
25769803858,BLOCK,2,,[TenantRoleAliasesService],13,,11,,,2,,ANY
25769803859,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803860,BLOCK,2,,"import { Role, Tenant, TenantRoleAliases, RoleAlias } from '@avantodev/avanto-db';",0,,2,,,2,,ANY
25769803861,BLOCK,7,,"@Module({
  imports: [TypeOrmModule.forFeature([Role, Tenant, TenantRoleAliases, RoleAlias], dbConfig.name)],
  controllers: [TenantRoleAliasesController],
  providers: [TenantRoleAliasesService],
})
export class TenantRoleAliasModule {}",0,,8,,,7,,ANY
25769803862,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803863,BLOCK,2,,new Logger(TenantsController.name),28,,12,,,2,,ANY
25769803864,BLOCK,-1,,{},63,,11,,,3,,ANY
25769803865,BLOCK,-1,,"{
    this.logger.log('Creating new Tenant ..');
    const { name, url, description } = createTenantDto;
    const newTenant = await this.tenantsService.create({
      ...createTenantDto,
      name: name.trim(),
      url: url.trim().toLowerCase(),
      description: description.trim(),
    });
    this.logger.log(`Created new Tenant! id: ${newTenant.id}.`);
    return newTenant;
  }",57,,15,,,3,,ANY
25769803866,BLOCK,2,,"const { name, url, description } = createTenantDto",10,,17,,,2,,ANY
25769803867,BLOCK,1,,"{
      ...createTenantDto,
      name: name.trim(),
      url: url.trim().toLowerCase(),
      description: description.trim(),
    }",55,,18,,,3,,ANY
25769803868,BLOCK,-1,,"{
    this.logger.log('Finding All Tenants...');
    return await this.tenantsService.findAll();
  }",18,,29,,,2,,ANY
25769803869,BLOCK,-1,,"{
    this.logger.log(`Searching for Tenant with many search args.`);
    const foundTenantType = await this.tenantsService.findByMany(findTenantDto);
    return foundTenantType;
  }",55,,35,,,3,,ANY
25769803870,BLOCK,-1,,"{
    this.logger.log(`Searching for Tenant with id: ${id}.`);
    const foundTenant = await this.tenantsService.findOne(+id);
    this.logger.log(`Tenant with id: ${id} was found.`);
    return foundTenant;
  }",41,,42,,,3,,ANY
25769803871,BLOCK,-1,,"{
    this.logger.log(`Updating Tenant with id: ${id}.`);
    const foundTenant = await this.tenantsService.update(+id, {
      name: updateTenantDto.name.trim(),
      url: updateTenantDto.url.toLowerCase().trim(),
      description: updateTenantDto.description.trim(),
      ...updateTenantDto,
    });
    this.logger.log(`Tenant with id: ${id} was updated.`);
    return foundTenant;
  }",82,,50,,,4,,ANY
25769803872,BLOCK,2,,"{
      name: updateTenantDto.name.trim(),
      url: updateTenantDto.url.toLowerCase().trim(),
      description: updateTenantDto.description.trim(),
      ...updateTenantDto,
    }",62,,52,,,4,,ANY
25769803873,BLOCK,-1,,"{
    this.logger.log(`Disabling / Enabling Tenant with id: ${id}.`);
    const foundTenant = await this.tenantsService.remove(+id);
    this.logger.log(`Tenant with id: ${id} was ` + foundTenant.enabled ? 'Enabled!' : 'Disabled!');
    return foundTenant;
  }",40,,63,,,3,,ANY
25769803874,BLOCK,4,,"import { Controller, Get, Post, Body, Patch, Param, Delete, Logger } from '@nestjs/common';",0,,4,,,4,,ANY
25769803875,BLOCK,7,,"@ApiTags('tenants')
@Controller('tenants')
export class TenantsController {
  constructor(private readonly tenantsService: TenantsService) {}
  private readonly logger = new Logger(TenantsController.name);

  @Post()
  async create(@Body() createTenantDto: CreateTenantDto) {
    this.logger.log('Creating new Tenant ..');
    const { name, url, description } = createTenantDto;
    const newTenant = await this.tenantsService.create({
      ...createTenantDto,
      name: name.trim(),
      url: url.trim().toLowerCase(),
      description: description.trim(),
    });
    this.logger.log(`Created new Tenant! id: ${newTenant.id}.`);
    return newTenant;
  }

  @Get()
  async findAll() {
    this.logger.log('Finding All Tenants...');
    return await this.tenantsService.findAll();
  }

  @Post('many/')
  async findMany(@Body() findTenantDto: FindTenantDto) {
    this.logger.log(`Searching for Tenant with many search args.`);
    const foundTenantType = await this.tenantsService.findByMan...",0,,8,,,7,,ANY
25769803876,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803877,BLOCK,2,,"{
  imports: [TypeOrmModule.forFeature([Tenant, TenantType, TenantConfig], dbConfig.name)],
  controllers: [TenantsController],
  providers: [TenantsService],
}",8,,8,,,2,,ANY
25769803878,BLOCK,2,,"[TypeOrmModule.forFeature([Tenant, TenantType, TenantConfig], dbConfig.name)]",11,,9,,,2,,ANY
25769803879,BLOCK,1,,"[Tenant, TenantType, TenantConfig]",37,,9,,,3,,ANY
25769803880,BLOCK,2,,[TenantsController],15,,10,,,2,,ANY
25769803881,BLOCK,2,,[TenantsService],13,,11,,,2,,ANY
25769803882,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803883,BLOCK,1,,"import { Tenant, TenantConfig, TenantType } from '@avantodev/avanto-db';",0,,1,,,1,,ANY
25769803884,BLOCK,7,,"@Module({
  imports: [TypeOrmModule.forFeature([Tenant, TenantType, TenantConfig], dbConfig.name)],
  controllers: [TenantsController],
  providers: [TenantsService],
})
export class TenantsModule {}",0,,8,,,7,,ANY
25769803885,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803886,BLOCK,2,,new Logger(UserRoleByTenantsService.name),28,,11,,,2,,ANY
25769803887,BLOCK,-1,,{},83,,10,,,3,,ANY
25769803888,BLOCK,-1,,"{
    this.logger.log('Creating new User Role by Tenant...');
    const newUserRoleByTenants = await this.userRoleByTenantsService.create({ ...createUserRoleByTenantsDto });
    this.logger.log(`Created new User Role by Tenant! id:${newUserRoleByTenants.id}`);
    return newUserRoleByTenants;
  }",79,,14,,,3,,ANY
25769803889,BLOCK,1,,{ ...createUserRoleByTenantsDto },76,,16,,,3,,ANY
25769803890,BLOCK,-1,,"{
    this.logger.log('Finding all User Role By Tenants');
    return await this.userRoleByTenantsService.findAll();
  }",18,,22,,,2,,ANY
25769803891,BLOCK,-1,,"{
    this.logger.log(`Searching for USer Role By Tenants with many search args.`);
    const foundUserRoleByTenants = await this.userRoleByTenantsService.findByMany(findUserRoleByTenantsDto);
    this.logger.log(`Found ${foundUserRoleByTenants.length} items.`);
    return foundUserRoleByTenants;
  }",77,,28,,,3,,ANY
25769803892,BLOCK,-1,,"{
    this.logger.log(`Updating User Role by Tenant with id: ${id}.`);
    const foundUserRoleByTenants = await this.userRoleByTenantsService.update(+id, { ...updateUserRoleByTenantDto });
    this.logger.log(`User Role by Tenant with id: ${id} was updated.`);
    return foundUserRoleByTenants;
  }",103,,36,,,4,,ANY
25769803893,BLOCK,2,,{ ...updateUserRoleByTenantDto },83,,38,,,4,,ANY
25769803894,BLOCK,-1,,"{
    this.logger.log(`Disabling / Enabling User Role By Tenant with id: ${id}.`);
    const foundUserRoleByTenants = await this.userRoleByTenantsService.remove(+id);
    this.logger.log(
      `User Role By Tenant with id: ${id} was ` + foundUserRoleByTenants.enabled ? 'Enabled!' : 'Disabled!',
    );
    return foundUserRoleByTenants;
  }",40,,44,,,3,,ANY
25769803895,BLOCK,1,,"import { Controller, Get, Post, Body, Patch, Param, Delete, Logger } from '@nestjs/common';",0,,1,,,1,,ANY
25769803896,BLOCK,7,,"@ApiTags('user-role-by-tenants')
@Controller('user-role-by-tenants')
export class UserRoleByTenantsController {
  constructor(private readonly userRoleByTenantsService: UserRoleByTenantsService) {}
  private readonly logger = new Logger(UserRoleByTenantsService.name);

  @Post()
  async create(@Body() createUserRoleByTenantsDto: CreateUserRoleByTenantsDto) {
    this.logger.log('Creating new User Role by Tenant...');
    const newUserRoleByTenants = await this.userRoleByTenantsService.create({ ...createUserRoleByTenantsDto });
    this.logger.log(`Created new User Role by Tenant! id:${newUserRoleByTenants.id}`);
    return newUserRoleByTenants;
  }

  @Get()
  async findAll() {
    this.logger.log('Finding all User Role By Tenants');
    return await this.userRoleByTenantsService.findAll();
  }

  @Post('/many')
  async findMany(@Body() findUserRoleByTenantsDto: FindUserRoleByTenantsDto) {
    this.logger.log(`Searching for USer Role By Tenants with many search args.`);
    const fo...",0,,7,,,7,,ANY
25769803897,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803898,BLOCK,2,,"{
  imports: [
    TypeOrmModule.forFeature([UserRoleByTenants, Role, User, RoleAlias, Tenant, TenantRoleAliases], dbConfig.name),
  ],
  controllers: [UserRoleByTenantsController],
  providers: [
    UserRoleByTenantsService,
    UsersService,
    RolesService,
    RoleAliasesService,
    TenantsService,
    TenantRoleAliasesService,
    EmailProvider,
  ],
}",8,,14,,,2,,ANY
25769803899,BLOCK,2,,"[
    TypeOrmModule.forFeature([UserRoleByTenants, Role, User, RoleAlias, Tenant, TenantRoleAliases], dbConfig.name),
  ]",11,,15,,,2,,ANY
25769803900,BLOCK,1,,"[UserRoleByTenants, Role, User, RoleAlias, Tenant, TenantRoleAliases]",29,,16,,,3,,ANY
25769803901,BLOCK,2,,[UserRoleByTenantsController],15,,18,,,2,,ANY
25769803902,BLOCK,2,,"[
    UserRoleByTenantsService,
    UsersService,
    RolesService,
    RoleAliasesService,
    TenantsService,
    TenantRoleAliasesService,
    EmailProvider,
  ]",13,,19,,,2,,ANY
25769803903,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803904,BLOCK,2,,"import { UserRoleByTenants, Role, User, RoleAlias, Tenant, TenantRoleAliases } from '@avantodev/avanto-db';",0,,2,,,2,,ANY
25769803905,BLOCK,13,,"@Module({
  imports: [
    TypeOrmModule.forFeature([UserRoleByTenants, Role, User, RoleAlias, Tenant, TenantRoleAliases], dbConfig.name),
  ],
  controllers: [UserRoleByTenantsController],
  providers: [
    UserRoleByTenantsService,
    UsersService,
    RolesService,
    RoleAliasesService,
    TenantsService,
    TenantRoleAliasesService,
    EmailProvider,
  ],
})
export class UserRoleByTenantsModule {}",0,,14,,,13,,ANY
25769803906,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803907,BLOCK,2,,new Logger(UsersController.name),28,,13,,,2,,ANY
25769803908,BLOCK,-1,,{},59,,12,,,3,,ANY
25769803909,BLOCK,-1,,"{
    
    this.logger.log('Creating new user ..');
    const payloadObject: ContextPayload = JSON.parse(payload);

    const newUser = await this.usersService.create(createUserDto, payloadObject);
    this.logger.log(`Created new User! id: ${newUser.id}.`);
    return newUser;
  }",90,,16,,,4,,ANY
25769803910,BLOCK,-1,,"{
    this.logger.log('Finding All Users...');
    return this.usersService.findAll();
  }",12,,27,,,2,,ANY
25769803911,BLOCK,-1,,"{
    this.logger.log(`Searching for user with many search args.`);
    return this.usersService.findByMany(findUserDto);
  }",51,,33,,,3,,ANY
25769803912,BLOCK,-1,,"{
    this.logger.log(`Searching for user with id: ${id}.`);
    const foundUser = await this.usersService.findOne(+id);
    this.logger.log(`User with id: ${id} was found.`);
    return foundUser;
  }",41,,39,,,3,,ANY
25769803913,BLOCK,-1,,"{

    this.logger.log(`Updating user with id: ${id}.`);
    const payloadObject: ContextPayload = JSON.parse(payload);
    const foundUser = await this.usersService.update(+id, updateUserDto, payloadObject);
    this.logger.log(`User with id: ${id} was updated.`);
    return foundUser;
  }",115,,47,,,5,,ANY
25769803914,BLOCK,-1,,"{
    this.logger.log(`Updating user with id: ${temporalId}.`);
    const foundUser = await this.usersService.resendVerification(temporalId);
    this.logger.log(`User with id: ${temporalId} was updated.`);
    return foundUser;
  }",60,,57,,,3,,ANY
25769803915,BLOCK,-1,,"{
    return this.usersService.sendMfaAttemptEmail(userId);
  }",60,,65,,,3,,ANY
25769803916,BLOCK,-1,,"{
    return this.usersService.sendMfaSuccessEmail(userId);
  }",60,,70,,,3,,ANY
25769803917,BLOCK,-1,,"{
    this.logger.log(`Disabling / Enabling User with id: ${id}.`);
    
    const payloadObject: ContextPayload = JSON.parse(payload);
    const foundUser = await this.usersService.remove(+id, payloadObject);
    this.logger.log(`User with id: ${id} was ` + foundUser.enabled ? 'Enabled!' : 'Disabled!');
    return foundUser;
  }",77,,75,,,4,,ANY
25769803918,BLOCK,1,,"import { Controller, Get, Post, Body, Patch, Param, Delete, Logger, Headers } from '@nestjs/common';",0,,1,,,1,,ANY
25769803919,BLOCK,8,,"@ApiTags('users')
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}
  private readonly logger = new Logger(UsersController.name);

  @Post()
  async create(@Body() createUserDto: CreateUserDto, @Headers('payload') payload: string) {
    
    this.logger.log('Creating new user ..');
    const payloadObject: ContextPayload = JSON.parse(payload);

    const newUser = await this.usersService.create(createUserDto, payloadObject);
    this.logger.log(`Created new User! id: ${newUser.id}.`);
    return newUser;
  }

  @Get()
  findAll() {
    this.logger.log('Finding All Users...');
    return this.usersService.findAll();
  }

  @Post('many/')
  async findMany(@Body() findUserDto: FindUserDto) {
    this.logger.log(`Searching for user with many search args.`);
    return this.usersService.findByMany(findUserDto);
  }

  @Get(':id')
  async findOne(@Param('id') id: string) {
    this.logger.log(`Searching for user with id: ${id...",0,,9,,,8,,ANY
25769803920,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803921,BLOCK,2,,"{
  imports: [TypeOrmModule.forFeature([Tenant, User, Role], dbConfig.name)],
  controllers: [UsersController],
  providers: [UsersService, TenantsService, EmailProvider],
}",8,,10,,,2,,ANY
25769803922,BLOCK,2,,"[TypeOrmModule.forFeature([Tenant, User, Role], dbConfig.name)]",11,,11,,,2,,ANY
25769803923,BLOCK,1,,"[Tenant, User, Role]",37,,11,,,3,,ANY
25769803924,BLOCK,2,,[UsersController],15,,12,,,2,,ANY
25769803925,BLOCK,2,,"[UsersService, TenantsService, EmailProvider]",13,,13,,,2,,ANY
25769803926,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803927,BLOCK,4,,"import { Role, Tenant, User } from '@avantodev/avanto-db';",0,,4,,,4,,ANY
25769803928,BLOCK,9,,"@Module({
  imports: [TypeOrmModule.forFeature([Tenant, User, Role], dbConfig.name)],
  controllers: [UsersController],
  providers: [UsersService, TenantsService, EmailProvider],
})
export class UsersModule {}",0,,10,,,9,,ANY
25769803929,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803930,BLOCK,-1,,"{
  const app = await NestFactory.create(AppModule);
  app.useLogger(app.get(Logger));

  const config = new DocumentBuilder()
    .setTitle('Tenant Micro Service')
    .setDescription('Tenants Micro Service API documentation')
    .setVersion('1.0')
    .addTag('tenant-types')
    .addTag('users')
    .addTag('roles')
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('docs', app, document);

  app.useGlobalPipes(new ValidationPipe());

  await app.listen(PORT).then(() => console.log(`App Running in port ${PORT}`));
}",27,,10,,,2,,ANY
25769803931,BLOCK,2,,new DocumentBuilder(),17,,14,,,2,,ANY
25769803932,BLOCK,1,,new ValidationPipe(),21,,25,,,3,,ANY
25769803933,BLOCK,-1,,console.log(`App Running in port ${PORT}`),36,,27,,,2,,ANY
25769803934,BLOCK,2,,"import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';",0,,2,,,2,,ANY
25769803935,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803936,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803937,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,23,,,2,,ANY
25769803938,BLOCK,2,,[Number],39,,23,,,2,,ANY
25769803939,BLOCK,3,,"import { IsNotEmpty, Length } from 'class-validator';",0,,3,,,3,,ANY
25769803940,BLOCK,4,,"export class CreateRoleAliasDto implements Omit<RoleAliasDto, 'id' | 'createdAt' | 'updatedAt'> {
  @ApiProperty()
  @IsNotEmpty()
  @Length(2, 100)
  aliasName: string;

  @ApiProperty()
  @IsNotEmpty()
  @Length(2, 400)
  description: string;

  @ApiProperty()
  @IsNotEmpty()
  roleId: number;

  @ApiProperty()
  enabled: boolean;

  @ApiProperty({ nullable: true, type: [Number] })
  tenantRoleAlias?: number[];
}",0,,5,,,4,,ANY
25769803941,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803942,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803943,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,6,,,2,,ANY
25769803944,BLOCK,2,,[Number],39,,6,,,2,,ANY
25769803945,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,9,,,2,,ANY
25769803946,BLOCK,2,,[Number],39,,9,,,2,,ANY
25769803947,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,12,,,2,,ANY
25769803948,BLOCK,2,,[Number],39,,12,,,2,,ANY
25769803949,BLOCK,2,,{ nullable: true },15,,15,,,2,,ANY
25769803950,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,18,,,2,,ANY
25769803951,BLOCK,2,,[Number],39,,18,,,2,,ANY
25769803952,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,21,,,2,,ANY
25769803953,BLOCK,2,,[Number],39,,21,,,2,,ANY
25769803954,BLOCK,4,,"export class FindRoleAliasDto extends PartialType(CreateRoleAliasDto) {
  @ApiProperty({ nullable: true, type: [Number] })
  ids?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  aliasNames?: string[];

  @ApiProperty({ nullable: true, type: [Number] })
  descriptions?: string[];

  @ApiProperty({ nullable: true })
  enabled?: boolean;

  @ApiProperty({ nullable: true, type: [Number] })
  roleIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  tenantRoleAlias?: number[];
}",0,,5,,,4,,ANY
25769803955,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803956,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803957,BLOCK,2,,"export class RoleAliasDto {
  id: number;
  aliasName: string;
  description: string;
  roleId: number;
  enabled: boolean;
  createdAt: Date;
  updatedAt: Date;
  tenantRoleAlias?: number[];
}",0,,3,,,2,,ANY
25769803958,BLOCK,3,,"export type AssignTenantRoleAliasesDto = {
  roleAliasToUpdate: RoleAlias;
  tenantRoleAlias?: number[];
  roleId?: number;
};",0,,14,,,3,,ANY
25769803959,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803960,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803961,BLOCK,2,,{ nullable: true },15,,7,,,2,,ANY
25769803962,BLOCK,2,,{ nullable: true },15,,12,,,2,,ANY
25769803963,BLOCK,2,,{ nullable: true },15,,17,,,2,,ANY
25769803964,BLOCK,2,,{ nullable: true },15,,21,,,2,,ANY
25769803965,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,24,,,2,,ANY
25769803966,BLOCK,2,,[Number],39,,24,,,2,,ANY
25769803967,BLOCK,4,,"import { IsNotEmpty, Length } from 'class-validator';",0,,4,,,4,,ANY
25769803968,BLOCK,5,,"export class UpdateRoleAliasDto extends PartialType(CreateRoleAliasDto) {
  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  @Length(2, 100)
  aliasName?: string;

  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  @Length(2, 400)
  description?: string;

  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  roleId?: number;

  @ApiProperty({ nullable: true })
  enabled?: boolean;

  @ApiProperty({ nullable: true, type: [Number] })
  tenantRoleAlias?: number[];
}",0,,6,,,5,,ANY
25769803969,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769803970,BLOCK,2,,new Logger(RoleAliasesService.name),28,,13,,,2,,ANY
25769803971,BLOCK,-1,,TenantRoleAliasesService,29,,24,,,2,,ANY
25769803972,BLOCK,-1,,{},4,,26,,,6,,ANY
25769803973,BLOCK,-1,,"{
    this.logger.log('Creating new User...');
    const roleId = createRoleAliasDto.roleId;
    const tenantRoleAlias = createRoleAliasDto.tenantRoleAlias;
    const aliasName = createRoleAliasDto.aliasName.trim();

    const existingAliasName = await this.rolesAliasRepository.findOneBy({ aliasName });
    if (existingAliasName) {
      this.logger.error(`The aliasName ${aliasName} is already used and needs to be unique`);
      throw new ForbiddenException('aliasName is already in use', {
        cause: new Error(),
        description: `The aliasName ${aliasName} is already used and needs to be unique`,
      });
    }
    const existingRole = await this.rolesRepository.findOneBy({ id: roleId });

    if (!existingRole) {
      this.logger.error(`The role with id ${roleId} was not found`);
      throw new NotFoundException('Role not found', {
        cause: new Error(),
        description: `The role with id ${roleId} was not found`,
      });
    }

    const newRoleAlias = this...",55,,28,,,3,,ANY
25769803974,BLOCK,1,,{ aliasName },72,,34,,,3,,ANY
25769803975,BLOCK,1,,"new ForbiddenException('aliasName is already in use', {
        cause: new Error(),
        description: `The aliasName ${aliasName} is already used and needs to be unique`,
      })",12,,37,,,1,,ANY
25769803976,BLOCK,2,,"{
        cause: new Error(),
        description: `The aliasName ${aliasName} is already used and needs to be unique`,
      }",66,,37,,,4,,ANY
25769803977,BLOCK,2,,new Error(),15,,38,,,2,,ANY
25769803978,BLOCK,1,,{ id: roleId },62,,42,,,3,,ANY
25769803979,BLOCK,1,,"new NotFoundException('Role not found', {
        cause: new Error(),
        description: `The role with id ${roleId} was not found`,
      })",12,,46,,,1,,ANY
25769803980,BLOCK,2,,"{
        cause: new Error(),
        description: `The role with id ${roleId} was not found`,
      }",52,,46,,,4,,ANY
25769803981,BLOCK,2,,new Error(),15,,47,,,2,,ANY
25769803982,BLOCK,1,,"{
      ...createRoleAliasDto,
      role: existingRole,
      tenantRoleAlias: [],
      aliasName,
    }",58,,52,,,3,,ANY
25769803983,BLOCK,-1,,"{
      const newTenantRoleAliases = await this.tenantRoleAliasService.assignToRoleAlias({
        roleAliasToUpdate: newRoleAlias,
        tenantRoleAliasNew: tenantRoleAlias,
        roleId,
      });

      if (newTenantRoleAliases) {
        newRoleAlias.tenantRoleAlias = newTenantRoleAliases.map((tenantRoleAlias) => {
          delete tenantRoleAlias.roleAlias;
          return tenantRoleAlias;
        });
        await this.rolesAliasRepository.save(newRoleAlias);
      }
    }",55,,61,,,2,,ANY
25769803984,BLOCK,1,,"{
        roleAliasToUpdate: newRoleAlias,
        tenantRoleAliasNew: tenantRoleAlias,
        roleId,
      }",87,,62,,,3,,ANY
25769803985,BLOCK,-1,,"{
          delete tenantRoleAlias.roleAlias;
          return tenantRoleAlias;
        }",85,,69,,,3,,ANY
25769803986,BLOCK,-1,,"{
      this.logger.error(`The aliasName ${aliasName} is already used and needs to be unique`);
      throw new ForbiddenException('aliasName is already in use', {
        cause: new Error(),
        description: `The aliasName ${aliasName} is already used and needs to be unique`,
      });
    }",27,,35,,,2,,ANY
25769803987,BLOCK,-1,,"{
      this.logger.error(`The role with id ${roleId} was not found`);
      throw new NotFoundException('Role not found', {
        cause: new Error(),
        description: `The role with id ${roleId} was not found`,
      });
    }",23,,44,,,2,,ANY
25769803988,BLOCK,-1,,"{
        newRoleAlias.tenantRoleAlias = newTenantRoleAliases.map((tenantRoleAlias) => {
          delete tenantRoleAlias.roleAlias;
          return tenantRoleAlias;
        });
        await this.rolesAliasRepository.save(newRoleAlias);
      }",32,,68,,,2,,ANY
25769803989,BLOCK,-1,,"{
    this.logger.log('Finding All Role Aliases ...');
    this.roleAliasCollection = await this.rolesAliasRepository
      .createQueryBuilder('RoleAlias')
      .leftJoinAndSelect('RoleAlias.tenantRoleAlias', 'tenantRoleAlias')
      .leftJoinAndSelect('tenantRoleAlias.tenant', 'tenant')
      .leftJoinAndSelect('tenantRoleAlias.role', 'tenantRoleAliasRole')
      .leftJoinAndSelect('RoleAlias.role', 'role')
      .getMany();
    return this.roleAliasCollection;
  }",18,,80,,,2,,ANY
25769803990,BLOCK,2,,{ id },35,,100,,,4,,ANY
25769803991,BLOCK,-1,,"{
    this.logger.log('Finding All Role Aliases ...');
    this.roleAliasCollection = await this.rolesAliasRepository
      .createQueryBuilder('RoleAlias')
      .leftJoinAndSelect('RoleAlias.tenantRoleAlias', 'tenantRoleAlias')
      .leftJoinAndSelect('tenantRoleAlias.tenant', 'tenant')
      .leftJoinAndSelect('tenantRoleAlias.role', 'tenantRoleAliasRole')
      .leftJoinAndSelect('RoleAlias.role', 'role')
      .where('RoleAlias.id = :id', { id })
      .getMany();
    return this.roleAliasCollection[0];
  }",28,,92,,,3,,ANY
25769803992,BLOCK,-1,,"{
    this.logger.log(`Finding Role Aliases by many args...`);
    const { ids, aliasNames, descriptions, enabled, roleIds, tenantRoleAlias } = findRoleAliasDto;
    let query = this.rolesAliasRepository
      .createQueryBuilder('RoleAlias')
      .leftJoinAndSelect('RoleAlias.tenantRoleAlias', 'tenantRoleAlias')
      .leftJoinAndSelect('tenantRoleAlias.tenant', 'tenant')
      .leftJoinAndSelect('tenantRoleAlias.role', 'tenantRoleAliasRole')
      .leftJoinAndSelect('RoleAlias.role', 'role');

    if (ids && ids.length > 0) {
      query = query.andWhere('RoleAlias.id IN (:...ids) ', { ids });
    }
    if (aliasNames) {
      query = query.andWhere('lower(RoleAlias.aliasName) IN (:...aliasNames) ', {
        aliasNames: aliasNames.map((alias) => alias.toLowerCase()),
      });
    }
    if (descriptions) {
      query = query.andWhere('lower(RoleAlias.description) IN (:...descriptions) ', {
        descriptions: descriptions.map((desc) => desc.toLowerCase()),
      });
    }
   ...",55,,105,,,3,,ANY
25769803993,BLOCK,2,,"const { ids, aliasNames, descriptions, enabled, roleIds, tenantRoleAlias } = findRoleAliasDto",10,,107,,,2,,ANY
25769803994,BLOCK,2,,{ ids },59,,116,,,4,,ANY
25769803995,BLOCK,2,,"{
        aliasNames: aliasNames.map((alias) => alias.toLowerCase()),
      }",80,,119,,,4,,ANY
25769803996,BLOCK,-1,,alias.toLowerCase(),46,,120,,,3,,ANY
25769803997,BLOCK,2,,"{
        descriptions: descriptions.map((desc) => desc.toLowerCase()),
      }",84,,124,,,4,,ANY
25769803998,BLOCK,-1,,desc.toLowerCase(),49,,125,,,3,,ANY
25769803999,BLOCK,2,,{ roleIds },68,,129,,,4,,ANY
25769804000,BLOCK,2,,{ enabled },62,,132,,,4,,ANY
25769804001,BLOCK,2,,"{
        tenantRoleAlias,
      }",80,,136,,,4,,ANY
25769804002,BLOCK,-1,,"{
      query = query.andWhere('RoleAlias.id IN (:...ids) ', { ids });
    }",31,,115,,,2,,ANY
25769804003,BLOCK,-1,,"{
      query = query.andWhere('lower(RoleAlias.aliasName) IN (:...aliasNames) ', {
        aliasNames: aliasNames.map((alias) => alias.toLowerCase()),
      });
    }",20,,118,,,2,,ANY
25769804004,BLOCK,-1,,"{
      query = query.andWhere('lower(RoleAlias.description) IN (:...descriptions) ', {
        descriptions: descriptions.map((desc) => desc.toLowerCase()),
      });
    }",22,,123,,,2,,ANY
25769804005,BLOCK,-1,,"{
      query = query.andWhere('RoleAlias.role_id IN (:...roleIds) ', { roleIds });
    }",17,,128,,,2,,ANY
25769804006,BLOCK,-1,,"{
      query = query.andWhere('RoleAlias.enabled = :enabled ', { enabled });
    }",25,,131,,,2,,ANY
25769804007,BLOCK,-1,,"{
      // query = query.andWhere('tenantRoleAlias.id IN (:...tenantRoleAlias)', { tenantRoleAlias });
      query = query.andWhere('tenantRoleAlias.tenant IN (:...tenantRoleAlias)', {
        tenantRoleAlias,
      });
    }",55,,134,,,2,,ANY
25769804008,BLOCK,-1,,"{
    this.logger.log(`Updating Role Alias with id: ${id}`);
    const roleAliasToUpdate = await this.rolesAliasRepository
      .createQueryBuilder('RoleAlias')
      .leftJoinAndSelect('RoleAlias.tenantRoleAlias', 'tenantRoleAlias')
      .leftJoinAndSelect('tenantRoleAlias.tenant', 'tenant')
      .leftJoinAndSelect('tenantRoleAlias.role', 'tenantRoleAliasRole')
      .leftJoinAndSelect('RoleAlias.role', 'role')
      .where('RoleAlias.id = :id', { id })
      .getOne();

    if (!roleAliasToUpdate) {
      this.logger.error(`The user with id ${id} was not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${id} was not found`,
      });
    }
    const roleId = updateRoleAliasDto.roleId || null;
    const tenantRoleAlias = updateRoleAliasDto.tenantRoleAlias;
    const aliasName = updateRoleAliasDto.aliasName ? updateRoleAliasDto.aliasName.trim() : null;
    if (aliasName) {
      const existingAliasNa...",67,,144,,,4,,ANY
25769804009,BLOCK,2,,{ id },35,,152,,,4,,ANY
25769804010,BLOCK,1,,"new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${id} was not found`,
      })",12,,157,,,1,,ANY
25769804011,BLOCK,2,,"{
        cause: new Error(),
        description: `The user with id ${id} was not found`,
      }",52,,157,,,4,,ANY
25769804012,BLOCK,2,,new Error(),15,,158,,,2,,ANY
25769804013,BLOCK,-1,,"{
      const existingAliasName = await this.rolesAliasRepository.findOneBy({ aliasName });
      if (existingAliasName && existingAliasName.id !== id) {
        this.logger.error(`The aliasName ${aliasName} is already used and needs to be unique`);
        throw new ForbiddenException('aliasName is already in use', {
          cause: new Error(),
          description: `The aliasName ${aliasName} is already used and needs to be unique`,
        });
      }
      roleAliasToUpdate.aliasName = aliasName;
    }",19,,165,,,2,,ANY
25769804014,BLOCK,1,,{ aliasName },74,,166,,,3,,ANY
25769804015,BLOCK,1,,"new ForbiddenException('aliasName is already in use', {
          cause: new Error(),
          description: `The aliasName ${aliasName} is already used and needs to be unique`,
        })",14,,169,,,1,,ANY
25769804016,BLOCK,2,,"{
          cause: new Error(),
          description: `The aliasName ${aliasName} is already used and needs to be unique`,
        }",68,,169,,,4,,ANY
25769804017,BLOCK,2,,new Error(),17,,170,,,2,,ANY
25769804018,BLOCK,-1,,"{
      const existingRole = await this.rolesRepository.findOneBy({ id: roleId });
      if (!existingRole) {
        this.logger.error(`The role with id ${roleId} was not found`);
        throw new NotFoundException('Role not found', {
          cause: new Error(),
          description: `The role with id ${roleId} was not found`,
        });
      }
      roleAliasToUpdate.role = existingRole;
    }",16,,176,,,2,,ANY
25769804019,BLOCK,1,,{ id: roleId },64,,177,,,3,,ANY
25769804020,BLOCK,1,,"new NotFoundException('Role not found', {
          cause: new Error(),
          description: `The role with id ${roleId} was not found`,
        })",14,,180,,,1,,ANY
25769804021,BLOCK,2,,"{
          cause: new Error(),
          description: `The role with id ${roleId} was not found`,
        }",54,,180,,,4,,ANY
25769804022,BLOCK,2,,new Error(),17,,181,,,2,,ANY
25769804023,BLOCK,2,,"{
      ...updateRoleAliasDto,
      tenantRoleAlias: roleAliasToUpdate.tenantRoleAlias,
      aliasName: aliasName ? aliasName.trim() : roleAliasToUpdate.aliasName,
    }",55,,188,,,4,,ANY
25769804024,BLOCK,-1,,"{
      const newTenantRoleAliases = await this.tenantRoleAliasService.assignToRoleAlias({
        roleAliasToUpdate,
        tenantRoleAliasNew: tenantRoleAlias,
        roleId,
      });

      if (newTenantRoleAliases) {
        roleAliasToUpdate.tenantRoleAlias = newTenantRoleAliases.map((tenantRoleAlias) => {
          delete tenantRoleAlias.roleAlias;
          return tenantRoleAlias;
        });
      }
    }",35,,196,,,2,,ANY
25769804025,BLOCK,1,,"{
        roleAliasToUpdate,
        tenantRoleAliasNew: tenantRoleAlias,
        roleId,
      }",87,,197,,,3,,ANY
25769804026,BLOCK,-1,,"{
          delete tenantRoleAlias.roleAlias;
          return tenantRoleAlias;
        }",90,,204,,,3,,ANY
25769804027,BLOCK,-1,,"{
      this.logger.error(`The user with id ${id} was not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${id} was not found`,
      });
    }",28,,155,,,2,,ANY
25769804028,BLOCK,-1,,"{
        this.logger.error(`The aliasName ${aliasName} is already used and needs to be unique`);
        throw new ForbiddenException('aliasName is already in use', {
          cause: new Error(),
          description: `The aliasName ${aliasName} is already used and needs to be unique`,
        });
      }",60,,167,,,2,,ANY
25769804029,BLOCK,-1,,"{
        this.logger.error(`The role with id ${roleId} was not found`);
        throw new NotFoundException('Role not found', {
          cause: new Error(),
          description: `The role with id ${roleId} was not found`,
        });
      }",25,,178,,,2,,ANY
25769804030,BLOCK,-1,,"{
        roleAliasToUpdate.tenantRoleAlias = newTenantRoleAliases.map((tenantRoleAlias) => {
          delete tenantRoleAlias.roleAlias;
          return tenantRoleAlias;
        });
      }",32,,203,,,2,,ANY
25769804031,BLOCK,-1,,"{
    this.logger.log(`Enabling / Disabling Role Alias with id: ${id}.`);
    const userToDisable = await this.rolesAliasRepository.findOneBy({ id });
    if (!userToDisable) {
      this.logger.error(`The role alias with id ${id} was not found`);
      throw new NotFoundException('Tenant not found', {
        cause: new Error(),
        description: `The role alias with id ${id} was not found`,
      });
    }
    userToDisable.enabled = !userToDisable.enabled;
    this.logger.log(`Role alias with id: ${id} was ` + userToDisable.enabled ? 'Enabled!' : 'Disabled!');

    return this.rolesAliasRepository.save(userToDisable);
  }",27,,214,,,3,,ANY
25769804032,BLOCK,1,,{ id },68,,216,,,3,,ANY
25769804033,BLOCK,1,,"new NotFoundException('Tenant not found', {
        cause: new Error(),
        description: `The role alias with id ${id} was not found`,
      })",12,,219,,,1,,ANY
25769804034,BLOCK,2,,"{
        cause: new Error(),
        description: `The role alias with id ${id} was not found`,
      }",54,,219,,,4,,ANY
25769804035,BLOCK,2,,new Error(),15,,220,,,2,,ANY
25769804036,BLOCK,-1,,"{
      this.logger.error(`The role alias with id ${id} was not found`);
      throw new NotFoundException('Tenant not found', {
        cause: new Error(),
        description: `The role alias with id ${id} was not found`,
      });
    }",24,,217,,,2,,ANY
25769804037,BLOCK,2,,"import { RoleAlias, Role, TenantRoleAliases } from '@avantodev/avanto-db';",0,,2,,,2,,ANY
25769804038,BLOCK,3,,"import { Injectable, Logger, ForbiddenException, NotFoundException, Inject, forwardRef } from '@nestjs/common';",0,,3,,,3,,ANY
25769804039,BLOCK,10,,"@Injectable()
export class RoleAliasesService {
  private readonly logger = new Logger(RoleAliasesService.name);
  private roleAliasCollection: RoleAlias[] = [];

  constructor(
    @InjectRepository(RoleAlias, dbConfig.name)
    private readonly rolesAliasRepository: Repository<RoleAlias>,
    @InjectRepository(Role, dbConfig.name)
    private readonly rolesRepository: Repository<Role>,
    @InjectRepository(TenantRoleAliases, dbConfig.name)
    private readonly tenantRoleAliasRepository: Repository<TenantRoleAliases>,

    @Inject(forwardRef(() => TenantRoleAliasesService))
    private readonly tenantRoleAliasService: TenantRoleAliasesService,
  ) {}

  async create(createRoleAliasDto: CreateRoleAliasDto) {
    this.logger.log('Creating new User...');
    const roleId = createRoleAliasDto.roleId;
    const tenantRoleAlias = createRoleAliasDto.tenantRoleAlias;
    const aliasName = createRoleAliasDto.aliasName.trim();

    const existingAliasName = await this.rolesAliasRepository.f...",0,,11,,,10,,ANY
25769804040,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804041,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804042,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,36,,,2,,ANY
25769804043,BLOCK,2,,[Number],39,,36,,,2,,ANY
25769804044,BLOCK,3,,"import { IsNotEmpty, Length } from 'class-validator';",0,,3,,,3,,ANY
25769804045,BLOCK,4,,"export class CreateRoleDto implements Omit<RoleDto, 'id' | 'createdAt' | 'updatedAt'> {
  @ApiProperty()
  @IsNotEmpty()
  @Length(2, 100)
  name: string;

  @ApiProperty()
  @IsNotEmpty()
  @Length(2, 400)
  description: string;

  @ApiProperty()
  @IsNotEmpty()
  @Length(2, 50)
  tag: string;

  @ApiProperty()
  enabled: boolean;

  @ApiProperty()
  BackOfficeAccess?: boolean;

  @ApiProperty()
  SaasAccess?: boolean;

  @ApiProperty()
  tenantSpecific: boolean;

  @ApiProperty()
  tenantCreatorId?: number;

  @ApiProperty({ nullable: true, type: [Number] })
  tenantTypesIds?: number[];

  /* 
  @ApiProperty({ nullable: true, type: [Number] })
  aliases?: number[];
 */
}",0,,5,,,4,,ANY
25769804046,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804047,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804048,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,5,,,2,,ANY
25769804049,BLOCK,2,,[Number],39,,5,,,2,,ANY
25769804050,BLOCK,2,,"{ nullable: true, type: [String] }",15,,8,,,2,,ANY
25769804051,BLOCK,2,,[String],39,,8,,,2,,ANY
25769804052,BLOCK,2,,"{ nullable: true, type: [String] }",15,,11,,,2,,ANY
25769804053,BLOCK,2,,[String],39,,11,,,2,,ANY
25769804054,BLOCK,2,,"{ nullable: true, type: [String] }",15,,14,,,2,,ANY
25769804055,BLOCK,2,,[String],39,,14,,,2,,ANY
25769804056,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,32,,,2,,ANY
25769804057,BLOCK,2,,[Number],39,,32,,,2,,ANY
25769804058,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,35,,,2,,ANY
25769804059,BLOCK,2,,[Number],39,,35,,,2,,ANY
25769804060,BLOCK,1,,"import { ApiProperty, PartialType } from '@nestjs/swagger';",0,,1,,,1,,ANY
25769804061,BLOCK,3,,"export class FindRoleDto extends PartialType(CreateRoleDto) {
  @ApiProperty({ nullable: true, type: [Number] })
  ids?: number[];

  @ApiProperty({ nullable: true, type: [String] })
  names?: string[];

  @ApiProperty({ nullable: true, type: [String] })
  descriptions?: string[];

  @ApiProperty({ nullable: true, type: [String] })
  tags?: string[];

  @ApiProperty()
  enabled?: boolean;

  @ApiProperty()
  BackOfficeAccess?: boolean;

  @ApiProperty()
  SaasAccess?: boolean;

  @ApiProperty()
  tenantSpecific?: boolean;

  @ApiProperty()
  tenantCreatorIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  tenantTypesIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  aliasIds?: number[];
}",0,,4,,,3,,ANY
25769804062,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804063,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804064,BLOCK,1,,"export class RoleDto {
  id: number;
  name: string;
  description: string;
  tag: string;
  enabled: boolean;
  createdAt: Date;
  updatedAt: Date;
  BackOfficeAccess?: boolean;
  SaasAccess?: boolean;
  tenantSpecific: boolean;
  tenantCreatorId?: number;
  tenantTypesIds?: number[];
  aliases?: number[];
}",0,,1,,,1,,ANY
25769804065,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804066,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804067,BLOCK,2,,{ nullable: true },15,,7,,,2,,ANY
25769804068,BLOCK,2,,{ nullable: true },15,,12,,,2,,ANY
25769804069,BLOCK,2,,{ nullable: true },15,,17,,,2,,ANY
25769804070,BLOCK,2,,{ nullable: true },15,,22,,,2,,ANY
25769804071,BLOCK,2,,{ nullable: true },15,,25,,,2,,ANY
25769804072,BLOCK,2,,{ nullable: true },15,,28,,,2,,ANY
25769804073,BLOCK,2,,{ nullable: true },15,,31,,,2,,ANY
25769804074,BLOCK,2,,{ nullable: true },15,,34,,,2,,ANY
25769804075,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,37,,,2,,ANY
25769804076,BLOCK,2,,[Number],39,,37,,,2,,ANY
25769804077,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,40,,,2,,ANY
25769804078,BLOCK,2,,[Number],39,,40,,,2,,ANY
25769804079,BLOCK,4,,"import { IsNotEmpty, Length } from 'class-validator';",0,,4,,,4,,ANY
25769804080,BLOCK,5,,"export class UpdateRoleDto extends PartialType(CreateRoleDto) {
  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  @Length(2, 100)
  name?: string;

  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  @Length(2, 400)
  description?: string;

  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  @Length(2, 50)
  tag?: string;

  @ApiProperty({ nullable: true })
  enabled?: boolean;

  @ApiProperty({ nullable: true })
  BackOfficeAccess?: boolean;

  @ApiProperty({ nullable: true })
  SaasAccess?: boolean;

  @ApiProperty({ nullable: true })
  tenantSpecific?: boolean;

  @ApiProperty({ nullable: true })
  tenantCreatorId?: number;

  @ApiProperty({ nullable: true, type: [Number] })
  tenantTypesIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  aliasesIds?: number[];
}",0,,6,,,5,,ANY
25769804081,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804082,BLOCK,2,,new Logger(RolesService.name),28,,13,,,2,,ANY
25769804083,BLOCK,-1,,{},4,,19,,,3,,ANY
25769804084,BLOCK,-1,,"{
    this.logger.log('Creating new roles...');
    const { tag, name, description, tenantSpecific, tenantCreatorId } = createRoleDto;
    const existingTenantTag = await this.rolesRepository.findOneBy({ tag: tag.toLowerCase().trim() });
    if (existingTenantTag) {
      this.logger.error(`The tag ""${tag}"" is already used and needs to be unique`);
      throw new ForbiddenException('tag is already in use', {
        cause: new Error(),
        description: `The tag ""${tag}"" is already used and needs to be unique`,
      });
    }
    if (createRoleDto.tenantTypesIds && createRoleDto.tenantTypesIds.length > 0) {
      this.logger.log(`tenant types: ${createRoleDto.tenantTypesIds}`);
    }
    let foundTenantCreator: Tenant[] = [];
    if (tenantSpecific) {
      const url = process.env.TENANTS_MS_URL || 'error';
      if (url === 'error') {
        this.logger.error(`Missing TENANTS_MS_URL env variable`);
        throw new NotFoundException('TENANTS_MS_URL env variable not found', {...",45,,21,,,3,,ANY
25769804085,BLOCK,2,,"const { tag, name, description, tenantSpecific, tenantCreatorId } = createRoleDto",10,,23,,,2,,ANY
25769804086,BLOCK,1,,{ tag: tag.toLowerCase().trim() },67,,24,,,3,,ANY
25769804087,BLOCK,1,,"new ForbiddenException('tag is already in use', {
        cause: new Error(),
        description: `The tag ""${tag}"" is already used and needs to be unique`,
      })",12,,27,,,1,,ANY
25769804088,BLOCK,2,,"{
        cause: new Error(),
        description: `The tag ""${tag}"" is already used and needs to be unique`,
      }",60,,27,,,4,,ANY
25769804089,BLOCK,2,,new Error(),15,,28,,,2,,ANY
25769804090,BLOCK,-1,,"{
      const url = process.env.TENANTS_MS_URL || 'error';
      if (url === 'error') {
        this.logger.error(`Missing TENANTS_MS_URL env variable`);
        throw new NotFoundException('TENANTS_MS_URL env variable not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        });
      }
      try {
        this.logger.log(`looking for tenant with id:${tenantCreatorId}`);
        foundTenantCreator = await fetchTenants({ ids: [tenantCreatorId] }, `${url}tenants/many`);
        if (foundTenantCreator.length < 1) {
          this.logger.error(`The tenant with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant not found', {
            cause: new Error(),
            description: `The tenant with id ${tenantCreatorId} was not found`,
          });
        }
      } catch (e) {
        this.logger.error(`An error has occurred`);
        this.logger.error(e);
      }
    }",24,,36,,,2,,ANY
25769804091,BLOCK,1,,"new NotFoundException('TENANTS_MS_URL env variable not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        })",14,,40,,,1,,ANY
25769804092,BLOCK,2,,"{
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        }",77,,40,,,4,,ANY
25769804093,BLOCK,2,,new Error(),17,,41,,,2,,ANY
25769804094,BLOCK,1,,{ ids: [tenantCreatorId] },48,,47,,,3,,ANY
25769804095,BLOCK,2,,[tenantCreatorId],55,,47,,,2,,ANY
25769804096,BLOCK,1,,"new NotFoundException('Tenant not found', {
            cause: new Error(),
            description: `The tenant with id ${tenantCreatorId} was not found`,
          })",16,,50,,,1,,ANY
25769804097,BLOCK,2,,"{
            cause: new Error(),
            description: `The tenant with id ${tenantCreatorId} was not found`,
          }",58,,50,,,4,,ANY
25769804098,BLOCK,2,,new Error(),19,,51,,,2,,ANY
25769804099,BLOCK,-1,,"{
      this.logger.log(`tenant types: ${createRoleDto.tenantTypesIds}`);
      const url = process.env.TENANTS_MS_URL || 'error';
      if (url === 'error') {
        this.logger.error(`Missing TENANTS_MS_URL env variable`);
        throw new NotFoundException('TENANTS_MS_URL env variable not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        });
      }
      try {
        foundTenantTypes = await fetchTenants({ ids: createRoleDto.tenantTypesIds }, `${url}tenant-types/many`);
        if (foundTenantTypes.length < 1) {
          this.logger.error(`The tenant type with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant type not found', {
            cause: new Error(),
            description: `The tenant type with id ${tenantCreatorId} was not found`,
          });
        }
      } catch (e) {
        this.logger.error(`An error has occurred`);
        this.logger.error(e);
      }
    }",81,,62,,,2,,ANY
25769804100,BLOCK,1,,"new NotFoundException('TENANTS_MS_URL env variable not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        })",14,,67,,,1,,ANY
25769804101,BLOCK,2,,"{
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        }",77,,67,,,4,,ANY
25769804102,BLOCK,2,,new Error(),17,,68,,,2,,ANY
25769804103,BLOCK,1,,{ ids: createRoleDto.tenantTypesIds },46,,73,,,3,,ANY
25769804104,BLOCK,1,,"new NotFoundException('Tenant type not found', {
            cause: new Error(),
            description: `The tenant type with id ${tenantCreatorId} was not found`,
          })",16,,76,,,1,,ANY
25769804105,BLOCK,2,,"{
            cause: new Error(),
            description: `The tenant type with id ${tenantCreatorId} was not found`,
          }",63,,76,,,4,,ANY
25769804106,BLOCK,2,,new Error(),19,,77,,,2,,ANY
25769804107,BLOCK,2,,"{
      ...createRoleDto,
      name: name.trim(),
      tag: tag.trim().toLowerCase(),
      description: description.trim(),
      tenantTypes: foundTenantTypes,
      BackOfficeAccess: createRoleDto.BackOfficeAccess ?? false,
      SaasAccess: false,
      aliases: [],
      roles: [],
      gridPreferences: [],
      tenantRoleAlias: [],
      roleMenuItemActions: [],
    }",32,,87,,,2,,ANY
25769804108,BLOCK,-1,,"{
      this.logger.error(`The tag ""${tag}"" is already used and needs to be unique`);
      throw new ForbiddenException('tag is already in use', {
        cause: new Error(),
        description: `The tag ""${tag}"" is already used and needs to be unique`,
      });
    }",27,,25,,,2,,ANY
25769804109,BLOCK,-1,,"{
      this.logger.log(`tenant types: ${createRoleDto.tenantTypesIds}`);
    }",81,,32,,,2,,ANY
25769804110,BLOCK,-1,,"{
        this.logger.error(`Missing TENANTS_MS_URL env variable`);
        throw new NotFoundException('TENANTS_MS_URL env variable not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        });
      }",27,,38,,,2,,ANY
25769804111,BLOCK,1,,"{
        this.logger.log(`looking for tenant with id:${tenantCreatorId}`);
        foundTenantCreator = await fetchTenants({ ids: [tenantCreatorId] }, `${url}tenants/many`);
        if (foundTenantCreator.length < 1) {
          this.logger.error(`The tenant with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant not found', {
            cause: new Error(),
            description: `The tenant with id ${tenantCreatorId} was not found`,
          });
        }
      }",10,,45,,,1,,ANY
25769804112,BLOCK,-1,,"{
          this.logger.error(`The tenant with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant not found', {
            cause: new Error(),
            description: `The tenant with id ${tenantCreatorId} was not found`,
          });
        }",43,,48,,,2,,ANY
25769804113,BLOCK,-1,,"catch (e) {
        this.logger.error(`An error has occurred`);
        this.logger.error(e);
      }",8,,55,,,1,,ANY
25769804114,BLOCK,-1,,"{
        this.logger.error(`Missing TENANTS_MS_URL env variable`);
        throw new NotFoundException('TENANTS_MS_URL env variable not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        });
      }",27,,65,,,2,,ANY
25769804115,BLOCK,1,,"{
        foundTenantTypes = await fetchTenants({ ids: createRoleDto.tenantTypesIds }, `${url}tenant-types/many`);
        if (foundTenantTypes.length < 1) {
          this.logger.error(`The tenant type with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant type not found', {
            cause: new Error(),
            description: `The tenant type with id ${tenantCreatorId} was not found`,
          });
        }
      }",10,,72,,,1,,ANY
25769804116,BLOCK,-1,,"{
          this.logger.error(`The tenant type with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant type not found', {
            cause: new Error(),
            description: `The tenant type with id ${tenantCreatorId} was not found`,
          });
        }",41,,74,,,2,,ANY
25769804117,BLOCK,-1,,"catch (e) {
        this.logger.error(`An error has occurred`);
        this.logger.error(e);
      }",8,,81,,,1,,ANY
25769804118,BLOCK,-1,,"{
    this.logger.log('Finding All Roles ...');
    this.rolesCollection = await this.rolesRepository
      .createQueryBuilder('roles')
      .leftJoinAndSelect('roles.tenantTypes', 'tenantTypes')
      .leftJoinAndSelect('roles.aliases', 'aliases')
      .leftJoinAndSelect('roles.roles', 'assignedRoles')
      // .leftJoinAndSelect('roles.gridPreferences', 'gridPreferences')
      .leftJoinAndSelect('assignedRoles.role', 'role')
      // .leftJoinAndSelect('assignedRoles.user', 'user')
      // .leftJoinAndSelect('assignedRoles.tenant', 'tenant')
      // .leftJoinAndSelect('assignedRoles.roleAlias', 'roleAlias')
      .getMany();
    this.logger.log(`${this.rolesCollection.length} roles found`);
    return this.rolesCollection;
  }",18,,105,,,2,,ANY
25769804119,BLOCK,-1,,"{
    this.logger.log(`Searching for Role  with id: ${id}.`);
    const foundRole = await this.rolesRepository
      .createQueryBuilder('roles')
      .leftJoinAndSelect('roles.tenantTypes', 'tenantTypes')
      .leftJoinAndSelect('roles.aliases', 'aliases')
      .leftJoinAndSelect('roles.roles', 'assignedRoles')
      // .leftJoinAndSelect('roles.gridPreferences', 'gridPreferences')
      .leftJoinAndSelect('assignedRoles.role', 'role')
      // .leftJoinAndSelect('assignedRoles.user', 'user')
      // .leftJoinAndSelect('assignedRoles.tenant', 'tenant')
      // .leftJoinAndSelect('assignedRoles.roleAlias', 'roleAlias')
      .andWhere('roles.id = :id', { id })
      .getOne();

    if (!foundRole) {
      this.logger.error(`The tenant with id ${id} was not found`);
      throw new NotFoundException('Role  not found', {
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      });
    }
    this.logger.log(`role with id: ${id} was found.`);
 ...",28,,122,,,3,,ANY
25769804120,BLOCK,2,,{ id },34,,134,,,4,,ANY
25769804121,BLOCK,1,,"new NotFoundException('Role  not found', {
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      })",12,,139,,,1,,ANY
25769804122,BLOCK,2,,"{
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      }",53,,139,,,4,,ANY
25769804123,BLOCK,2,,new Error(),15,,140,,,2,,ANY
25769804124,BLOCK,-1,,"{
      this.logger.error(`The tenant with id ${id} was not found`);
      throw new NotFoundException('Role  not found', {
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      });
    }",20,,137,,,2,,ANY
25769804125,BLOCK,-1,,"{
    const {
      ids,
      names,
      descriptions,
      enabled,
      tags,
      BackOfficeAccess,
      SaasAccess,
      tenantSpecific,
      tenantTypesIds,
      tenantCreatorIds,
      aliasIds,
    } = findRoleDto;
    let query = this.rolesRepository
      .createQueryBuilder('roles')
      .leftJoinAndSelect('roles.tenantTypes', 'tenantTypes')
      .leftJoinAndSelect('roles.aliases', 'aliases')
      .leftJoinAndSelect('roles.roles', 'assignedRoles')
      //.leftJoinAndSelect('roles.gridPreferences', 'gridPreferences')
      .leftJoinAndSelect('assignedRoles.role', 'role');
    //.leftJoinAndSelect('assignedRoles.user', 'user')
    //.leftJoinAndSelect('assignedRoles.tenant', 'tenant')
    //.leftJoinAndSelect('assignedRoles.roleAlias', 'roleAlias');
    // .leftJoinAndSelect('roles.tenantCreator', 'tenantCreator');

    if (ids && ids.length > 0) {
      this.logger.log(`Finding by ids: ${ids}`);
      query = query.andWhere('roles.id IN (:...ids) ', { ids });
...",45,,148,,,3,,ANY
25769804126,BLOCK,1,,"const {
      ids,
      names,
      descriptions,
      enabled,
      tags,
      BackOfficeAccess,
      SaasAccess,
      tenantSpecific,
      tenantTypesIds,
      tenantCreatorIds,
      aliasIds,
    } = findRoleDto",10,,149,,,1,,ANY
25769804127,BLOCK,2,,{ ids },55,,176,,,4,,ANY
25769804128,BLOCK,2,,"{
        names: names.map((name) => name.toLowerCase().trim()),
      }",66,,180,,,4,,ANY
25769804129,BLOCK,-1,,name.toLowerCase().trim(),35,,181,,,3,,ANY
25769804130,BLOCK,2,,{ tags: tags.map((tag) => tag.toLowerCase().trim()) },64,,186,,,4,,ANY
25769804131,BLOCK,-1,,tag.toLowerCase().trim(),90,,186,,,3,,ANY
25769804132,BLOCK,2,,{ descriptions },73,,190,,,4,,ANY
25769804133,BLOCK,2,,{ tenantTypesIds: tenantTypesIds },72,,200,,,4,,ANY
25769804134,BLOCK,2,,{ aliasIds },62,,204,,,4,,ANY
25769804135,BLOCK,2,,{ enabled },58,,209,,,4,,ANY
25769804136,BLOCK,2,,{ BackOfficeAccess },76,,213,,,4,,ANY
25769804137,BLOCK,2,,{ SaasAccess },64,,217,,,4,,ANY
25769804138,BLOCK,2,,{ tenantSpecific },72,,221,,,4,,ANY
25769804139,BLOCK,-1,,"{
      this.logger.log(`Finding by ids: ${ids}`);
      query = query.andWhere('roles.id IN (:...ids) ', { ids });
    }",31,,174,,,2,,ANY
25769804140,BLOCK,-1,,"{
      this.logger.log(`Finding by names: ${names}`);
      query = query.andWhere('lower(roles.name) IN (:...names) ', {
        names: names.map((name) => name.toLowerCase().trim()),
      });
    }",35,,178,,,2,,ANY
25769804141,BLOCK,-1,,"{
      this.logger.log(`Finding by tags: ${tags}`);
      query = query.andWhere('lower(roles.tag) IN (:...tags) ', { tags: tags.map((tag) => tag.toLowerCase().trim()) });
    }",33,,184,,,2,,ANY
25769804142,BLOCK,-1,,"{
      this.logger.log(`Finding by descriptions: ${descriptions}`);
      query = query.andWhere('roles.description IN (:...descriptions) ', { descriptions });
    }",49,,188,,,2,,ANY
25769804143,BLOCK,-1,,"{
      this.logger.log(`Finding by tenantType Ids: ${tenantTypesIds}`);
      query = query.andWhere('tenantTypes.id IN (:...tenantTypesIds) ', { tenantTypesIds: tenantTypesIds });
    }",53,,198,,,2,,ANY
25769804144,BLOCK,-1,,"{
      this.logger.log(`Finding by alias Ids: ${aliasIds}`);
      query = query.andWhere('aliases.id IN (:...aliasIds) ', { aliasIds });
    }",41,,202,,,2,,ANY
25769804145,BLOCK,-1,,"{
      this.logger.log(`Finding by enabled: ${enabled}`);
      query = query.andWhere('roles.enabled = :enabled ', { enabled });
    }",25,,207,,,2,,ANY
25769804146,BLOCK,-1,,"{
      this.logger.log(`Finding by Back Office Access: ${BackOfficeAccess}`);
      query = query.andWhere('roles.BackOfficeAccess = :BackOfficeAccess ', { BackOfficeAccess });
    }",34,,211,,,2,,ANY
25769804147,BLOCK,-1,,"{
      this.logger.log(`Finding by Saas Access: ${SaasAccess}`);
      query = query.andWhere('roles.SaasAccess = :SaasAccess ', { SaasAccess });
    }",28,,215,,,2,,ANY
25769804148,BLOCK,-1,,"{
      this.logger.log(`Finding by tenant Specific: ${tenantSpecific}`);
      query = query.andWhere('roles.tenantSpecific = :tenantSpecific ', { tenantSpecific });
    }",32,,219,,,2,,ANY
25769804149,BLOCK,-1,,"{
    this.logger.log(`Searching for Role with id: ${id} to Update it`);
    const roleToUpdate = await this.rolesRepository
      .createQueryBuilder('roles')
      .leftJoinAndSelect('roles.tenantTypes', 'tenantTypes')
      .leftJoinAndSelect('roles.aliases', 'aliases')
      .leftJoinAndSelect('roles.roles', 'assignedRoles')
      // .leftJoinAndSelect('roles.gridPreferences', 'gridPreferences')
      .leftJoinAndSelect('assignedRoles.role', 'role')
      // .leftJoinAndSelect('assignedRoles.user', 'user')
      // .leftJoinAndSelect('assignedRoles.tenant', 'tenant')
      // .leftJoinAndSelect('assignedRoles.roleAlias', 'roleAlias')
      .andWhere('roles.id = :id', { id })
      .getOne();

    if (!roleToUpdate) {
      this.logger.error(`The tenant with id ${id} was not found`);
      throw new NotFoundException('Role  not found', {
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      });
    }
    this.logger.log(`role with id: ${id...",57,,229,,,4,,ANY
25769804150,BLOCK,2,,{ id },34,,241,,,4,,ANY
25769804151,BLOCK,1,,"new NotFoundException('Role  not found', {
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      })",12,,246,,,1,,ANY
25769804152,BLOCK,2,,"{
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      }",53,,246,,,4,,ANY
25769804153,BLOCK,2,,new Error(),15,,247,,,2,,ANY
25769804154,BLOCK,5,,"const { tenantSpecific, tenantCreatorId } = updateRoleDto",10,,253,,,5,,ANY
25769804155,BLOCK,6,,"let { name, tag, description } = updateRoleDto",8,,254,,,6,,ANY
25769804156,BLOCK,-1,,"{
      this.logger.log(`finding role with tag: ${tag} ...`);
      const existingTenantTag = await this.rolesRepository.findOneBy({ tag });
      if (existingTenantTag && existingTenantTag.id != id) {
        this.logger.error(`The tag ""${tag}"" is already used and needs to be unique`);
        throw new ForbiddenException('tag is already in use', {
          cause: new Error(),
          description: `The tag '${tag}' is already used and needs to be unique`,
        });
      }
      roleToUpdate.tag = tag;
    }",27,,259,,,2,,ANY
25769804157,BLOCK,1,,{ tag },69,,261,,,3,,ANY
25769804158,BLOCK,1,,"new ForbiddenException('tag is already in use', {
          cause: new Error(),
          description: `The tag '${tag}' is already used and needs to be unique`,
        })",14,,264,,,1,,ANY
25769804159,BLOCK,2,,"{
          cause: new Error(),
          description: `The tag '${tag}' is already used and needs to be unique`,
        }",62,,264,,,4,,ANY
25769804160,BLOCK,2,,new Error(),17,,265,,,2,,ANY
25769804161,BLOCK,-1,,"{
      this.logger.log(`finding Tenant Creator with id: ${tenantCreatorId} ...`);
      const url = process.env.TENANTS_MS_URL || 'error';
      if (url === 'error') {
        this.logger.error(`Missing TENANTS_MS_URL env variable`);
        throw new NotFoundException('Role  not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        });
      }
      if (!updateRoleDto.tenantCreatorId) {
        this.logger.error(`The tenant with id ${tenantCreatorId} was not supplied`);
        throw new NotFoundException('tenantCreatorId not supplied', {
          cause: new Error(),
          description: `The tenant with id ${tenantCreatorId} was not supplied. Please supply a valid one when including the tenantSpecific prop!`,
        });
      }
      try {
        this.logger.log(`looking for tenant with id:${tenantCreatorId}`);
        const foundTenantCreator = await fetchTenants({ ids: [tenantCreatorId] }, `${url}tenants/many`);
     ...",24,,271,,,2,,ANY
25769804162,BLOCK,1,,"new NotFoundException('Role  not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        })",14,,276,,,1,,ANY
25769804163,BLOCK,2,,"{
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        }",55,,276,,,4,,ANY
25769804164,BLOCK,2,,new Error(),17,,277,,,2,,ANY
25769804165,BLOCK,1,,"new NotFoundException('tenantCreatorId not supplied', {
          cause: new Error(),
          description: `The tenant with id ${tenantCreatorId} was not supplied. Please supply a valid one when including the tenantSpecific prop!`,
        })",14,,283,,,1,,ANY
25769804166,BLOCK,2,,"{
          cause: new Error(),
          description: `The tenant with id ${tenantCreatorId} was not supplied. Please supply a valid one when including the tenantSpecific prop!`,
        }",68,,283,,,4,,ANY
25769804167,BLOCK,2,,new Error(),17,,284,,,2,,ANY
25769804168,BLOCK,1,,"{
        this.logger.log(`looking for tenant with id:${tenantCreatorId}`);
        const foundTenantCreator = await fetchTenants({ ids: [tenantCreatorId] }, `${url}tenants/many`);
        if (foundTenantCreator.length < 1) {
          this.logger.error(`The tenant with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant  not found', {
            cause: new Error(),
            description: `The tenant with id ${tenantCreatorId} was not found`,
          });
        }
      }",10,,288,,,1,,ANY
25769804169,BLOCK,1,,{ ids: [tenantCreatorId] },54,,290,,,3,,ANY
25769804170,BLOCK,2,,[tenantCreatorId],61,,290,,,2,,ANY
25769804171,BLOCK,1,,"new NotFoundException('Tenant  not found', {
            cause: new Error(),
            description: `The tenant with id ${tenantCreatorId} was not found`,
          })",16,,293,,,1,,ANY
25769804172,BLOCK,2,,"{
            cause: new Error(),
            description: `The tenant with id ${tenantCreatorId} was not found`,
          }",59,,293,,,4,,ANY
25769804173,BLOCK,2,,new Error(),19,,294,,,2,,ANY
25769804174,BLOCK,-1,,"{
      this.logger.log(`tenant types: ${updateRoleDto.tenantTypesIds}`);
      const url = process.env.TENANTS_MS_URL || 'error';
      if (url === 'error') {
        this.logger.error(`Missing TENANTS_MS_URL env variable`);
        throw new NotFoundException('TENANTS_MS_URL env variable not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        });
      }
      try {
        foundTenantTypes = await fetchTenants({ ids: updateRoleDto.tenantTypesIds }, `${url}tenant-types/many`);
        if (foundTenantTypes.length < 1) {
          this.logger.error(`The tenant type with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant type not found', {
            cause: new Error(),
            description: `The tenant type with id ${tenantCreatorId} was not found`,
          });
        }
      } catch (e) {
        this.logger.error(`An error has occurred`);
        this.logger.error(e);
        throw e...",81,,304,,,2,,ANY
25769804175,BLOCK,1,,"new NotFoundException('TENANTS_MS_URL env variable not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        })",14,,309,,,1,,ANY
25769804176,BLOCK,2,,"{
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        }",77,,309,,,4,,ANY
25769804177,BLOCK,2,,new Error(),17,,310,,,2,,ANY
25769804178,BLOCK,1,,{ ids: updateRoleDto.tenantTypesIds },46,,315,,,3,,ANY
25769804179,BLOCK,1,,"new NotFoundException('Tenant type not found', {
            cause: new Error(),
            description: `The tenant type with id ${tenantCreatorId} was not found`,
          })",16,,318,,,1,,ANY
25769804180,BLOCK,2,,"{
            cause: new Error(),
            description: `The tenant type with id ${tenantCreatorId} was not found`,
          }",63,,318,,,4,,ANY
25769804181,BLOCK,2,,new Error(),19,,319,,,2,,ANY
25769804182,BLOCK,2,,"{
      ...updateRoleDto,
      name,
      description,
      tenantTypes: foundTenantTypes,
    }",45,,330,,,4,,ANY
25769804183,BLOCK,-1,,"{
      this.logger.error(`The tenant with id ${id} was not found`);
      throw new NotFoundException('Role  not found', {
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      });
    }",23,,244,,,2,,ANY
25769804184,BLOCK,-1,,"{
        this.logger.error(`The tag ""${tag}"" is already used and needs to be unique`);
        throw new ForbiddenException('tag is already in use', {
          cause: new Error(),
          description: `The tag '${tag}' is already used and needs to be unique`,
        });
      }",59,,262,,,2,,ANY
25769804185,BLOCK,-1,,"{
        this.logger.error(`Missing TENANTS_MS_URL env variable`);
        throw new NotFoundException('Role  not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        });
      }",27,,274,,,2,,ANY
25769804186,BLOCK,-1,,"{
        this.logger.error(`The tenant with id ${tenantCreatorId} was not supplied`);
        throw new NotFoundException('tenantCreatorId not supplied', {
          cause: new Error(),
          description: `The tenant with id ${tenantCreatorId} was not supplied. Please supply a valid one when including the tenantSpecific prop!`,
        });
      }",42,,281,,,2,,ANY
25769804187,BLOCK,-1,,"{
          this.logger.error(`The tenant with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant  not found', {
            cause: new Error(),
            description: `The tenant with id ${tenantCreatorId} was not found`,
          });
        }",43,,291,,,2,,ANY
25769804188,BLOCK,-1,,"catch (e) {
        this.logger.error(`An error has occurred`);
        this.logger.error(e);
      }",8,,298,,,1,,ANY
25769804189,BLOCK,-1,,"{
        this.logger.error(`Missing TENANTS_MS_URL env variable`);
        throw new NotFoundException('TENANTS_MS_URL env variable not found', {
          cause: new Error(),
          description: `Missing TENANTS_MS_URL env variable`,
        });
      }",27,,307,,,2,,ANY
25769804190,BLOCK,1,,"{
        foundTenantTypes = await fetchTenants({ ids: updateRoleDto.tenantTypesIds }, `${url}tenant-types/many`);
        if (foundTenantTypes.length < 1) {
          this.logger.error(`The tenant type with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant type not found', {
            cause: new Error(),
            description: `The tenant type with id ${tenantCreatorId} was not found`,
          });
        }
      }",10,,314,,,1,,ANY
25769804191,BLOCK,-1,,"{
          this.logger.error(`The tenant type with id ${tenantCreatorId} was not found`);
          throw new NotFoundException('Tenant type not found', {
            cause: new Error(),
            description: `The tenant type with id ${tenantCreatorId} was not found`,
          });
        }",41,,316,,,2,,ANY
25769804192,BLOCK,-1,,"catch (e) {
        this.logger.error(`An error has occurred`);
        this.logger.error(e);
        throw e;
      }",8,,323,,,1,,ANY
25769804193,BLOCK,-1,,"{
    this.logger.log(`Enabling / Disabling Role with id: ${id}.`);
    const roleToDelete = await this.rolesRepository
      .createQueryBuilder('roles')
      .leftJoinAndSelect('roles.tenantTypes', 'tenantTypes')
      .leftJoinAndSelect('roles.aliases', 'aliases')
      .leftJoinAndSelect('roles.roles', 'assignedRoles')
      // .leftJoinAndSelect('roles.gridPreferences', 'gridPreferences')
      .leftJoinAndSelect('assignedRoles.role', 'role')
      // .leftJoinAndSelect('assignedRoles.user', 'user')
      // .leftJoinAndSelect('assignedRoles.tenant', 'tenant')
      // .leftJoinAndSelect('assignedRoles.roleAlias', 'roleAlias')
      .andWhere('roles.id = :id', { id })
      .getOne();

    if (!roleToDelete) {
      this.logger.error(`The tenant with id ${id} was not found`);
      throw new NotFoundException('Role  not found', {
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      });
    }
    roleToDelete.enabled = !roleToDelete.ena...",27,,343,,,3,,ANY
25769804194,BLOCK,2,,{ id },34,,355,,,4,,ANY
25769804195,BLOCK,1,,"new NotFoundException('Role  not found', {
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      })",12,,360,,,1,,ANY
25769804196,BLOCK,2,,"{
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      }",53,,360,,,4,,ANY
25769804197,BLOCK,2,,new Error(),15,,361,,,2,,ANY
25769804198,BLOCK,-1,,"{
      this.logger.error(`The tenant with id ${id} was not found`);
      throw new NotFoundException('Role  not found', {
        cause: new Error(),
        description: `The role with id ${id} was not found`,
      });
    }",23,,358,,,2,,ANY
25769804199,BLOCK,4,,"import { Role, Tenant, TenantType } from '@avantodev/avanto-db';",0,,4,,,4,,ANY
25769804200,BLOCK,9,,"import { Injectable, Logger, ForbiddenException, NotFoundException } from '@nestjs/common';",0,,9,,,9,,ANY
25769804201,BLOCK,10,,"@Injectable()
export class RolesService {
  private readonly logger = new Logger(RolesService.name);
  private rolesCollection: Role[] = [];

  constructor(
    @InjectRepository(Role, dbConfig.name)
    private readonly rolesRepository: Repository<Role>,
  ) {}

  async create(createRoleDto: CreateRoleDto) {
    this.logger.log('Creating new roles...');
    const { tag, name, description, tenantSpecific, tenantCreatorId } = createRoleDto;
    const existingTenantTag = await this.rolesRepository.findOneBy({ tag: tag.toLowerCase().trim() });
    if (existingTenantTag) {
      this.logger.error(`The tag ""${tag}"" is already used and needs to be unique`);
      throw new ForbiddenException('tag is already in use', {
        cause: new Error(),
        description: `The tag ""${tag}"" is already used and needs to be unique`,
      });
    }
    if (createRoleDto.tenantTypesIds && createRoleDto.tenantTypesIds.length > 0) {
      this.logger.log(`tenant types: ${createRoleDto.tenantTypesIds}...",0,,11,,,10,,ANY
25769804202,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804203,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804204,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,7,,,2,,ANY
25769804205,BLOCK,2,,[Number],39,,7,,,2,,ANY
25769804206,BLOCK,2,,{ nullable: true },15,,10,,,2,,ANY
25769804207,BLOCK,2,,{ nullable: true },15,,13,,,2,,ANY
25769804208,BLOCK,5,,"export class AssignTenantRoleAliasDto extends PartialType(CreateTenantRoleAliasDto) {
  @ApiProperty({ nullable: true, type: [Number] })
  tenantRoleAliasNew: number[];

  @ApiProperty({ nullable: true })
  roleId: number;

  @ApiProperty({ nullable: true })
  roleAliasToUpdate: RoleAlias;
}",0,,6,,,5,,ANY
25769804209,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804210,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804211,BLOCK,4,,"export class CreateTenantRoleAliasDto implements Omit<TenantRoleAliasDto, 'id' | 'createdAt' | 'updatedAt'> {
  @ApiProperty()
  @IsNotEmpty()
  tenant: number;

  @ApiProperty()
  @IsNotEmpty()
  role: number;

  @ApiProperty()
  @IsNotEmpty()
  roleAlias: number;

  @ApiProperty()
  enabled: boolean;
}",0,,5,,,4,,ANY
25769804212,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804213,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804214,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,6,,,2,,ANY
25769804215,BLOCK,2,,[Number],39,,6,,,2,,ANY
25769804216,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,9,,,2,,ANY
25769804217,BLOCK,2,,[Number],39,,9,,,2,,ANY
25769804218,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,12,,,2,,ANY
25769804219,BLOCK,2,,[Number],39,,12,,,2,,ANY
25769804220,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,15,,,2,,ANY
25769804221,BLOCK,2,,[Number],39,,15,,,2,,ANY
25769804222,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,18,,,2,,ANY
25769804223,BLOCK,2,,[Number],39,,18,,,2,,ANY
25769804224,BLOCK,4,,"export class FindTenantRoleAliasDto extends PartialType(CreateTenantRoleAliasDto) {
  @ApiProperty({ nullable: true, type: [Number] })
  ids?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  tenants?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  roles?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  roleAliases?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  enabled?: boolean;
}",0,,5,,,4,,ANY
25769804225,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804226,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804227,BLOCK,1,,"export class TenantRoleAliasDto {
  id: number;
  tenant: number;
  role: number;
  roleAlias: number;
  enabled: boolean;
  createdAt: Date;
  updatedAt: Date;
}",0,,1,,,1,,ANY
25769804228,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804229,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804230,BLOCK,2,,{ nullable: true },15,,7,,,2,,ANY
25769804231,BLOCK,2,,{ nullable: true },15,,11,,,2,,ANY
25769804232,BLOCK,2,,{ nullable: true },15,,15,,,2,,ANY
25769804233,BLOCK,2,,{ nullable: true },15,,19,,,2,,ANY
25769804234,BLOCK,5,,"export class UpdateTenantRoleAliasDto extends PartialType(CreateTenantRoleAliasDto) {
  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  tenant: number;

  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  role: number;

  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  roleAlias: number;

  @ApiProperty({ nullable: true })
  enabled: boolean;
}",0,,6,,,5,,ANY
25769804235,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804236,BLOCK,2,,new Logger(TenantRoleAliases.name),28,,13,,,2,,ANY
25769804237,BLOCK,-1,,{},4,,25,,,6,,ANY
25769804238,BLOCK,-1,,"{
    const foundTenant = await this.tenantRepository.createQueryBuilder().where('id = :tenant', { tenant }).getOne();

    if (!foundTenant) {
      this.logger.error(`Invalid Tenant, does not exist any tenant with id ${tenant}`);
      throw new NotFoundException('Invalid Tenant', {
        cause: new Error(),
        description: `Invalid Tenant, does not exist any tenant with id ${tenant}`,
      });
    }

    const foundRole = await this.rolesRepository.createQueryBuilder().where('id = :role', { role }).getOne();

    if (!foundRole) {
      this.logger.error(`Invalid Role, does not exist any role with id ${role}`);
      throw new NotFoundException('Invalid Role', {
        cause: new Error(),
        description: `Invalid Role, does not exist any role with id ${role}`,
      });
    }

    const foundRoleAlias = await this.rolesAliasRepository
      .createQueryBuilder('RoleAlias')
      .leftJoinAndSelect('RoleAlias.tenantRoleAlias', 'tenantRoleAlias')
      .leftJoinAndSel...",79,,27,,,3,,ANY
25769804239,BLOCK,2,,{ tenant },95,,28,,,4,,ANY
25769804240,BLOCK,1,,"new NotFoundException('Invalid Tenant', {
        cause: new Error(),
        description: `Invalid Tenant, does not exist any tenant with id ${tenant}`,
      })",12,,32,,,1,,ANY
25769804241,BLOCK,2,,"{
        cause: new Error(),
        description: `Invalid Tenant, does not exist any tenant with id ${tenant}`,
      }",52,,32,,,4,,ANY
25769804242,BLOCK,2,,new Error(),15,,33,,,2,,ANY
25769804243,BLOCK,2,,{ role },90,,38,,,4,,ANY
25769804244,BLOCK,1,,"new NotFoundException('Invalid Role', {
        cause: new Error(),
        description: `Invalid Role, does not exist any role with id ${role}`,
      })",12,,42,,,1,,ANY
25769804245,BLOCK,2,,"{
        cause: new Error(),
        description: `Invalid Role, does not exist any role with id ${role}`,
      }",50,,42,,,4,,ANY
25769804246,BLOCK,2,,new Error(),15,,43,,,2,,ANY
25769804247,BLOCK,2,,{ roleAlias },45,,54,,,4,,ANY
25769804248,BLOCK,2,,{ role },35,,55,,,4,,ANY
25769804249,BLOCK,1,,"new NotFoundException('Invalid RoleAlias', {
        cause: new Error(),
        description: `Invalid RoleAlias, does not exist any role alias with id ${roleAlias}, for role ${role}`,
      })",12,,59,,,1,,ANY
25769804250,BLOCK,2,,"{
        cause: new Error(),
        description: `Invalid RoleAlias, does not exist any role alias with id ${roleAlias}, for role ${role}`,
      }",55,,59,,,4,,ANY
25769804251,BLOCK,2,,new Error(),15,,60,,,2,,ANY
25769804252,BLOCK,2,,{ tenant },39,,70,,,4,,ANY
25769804253,BLOCK,2,,{ role },35,,71,,,4,,ANY
25769804254,BLOCK,1,,"new ForbiddenException('Entry Already Exists', {
        cause: new Error(),
        description: `Entry Already Exists with id ${existingTenantRoleAliases.id}, can only have one for tenant ${tenant} and role ${role}`,
      })",12,,77,,,1,,ANY
25769804255,BLOCK,2,,"{
        cause: new Error(),
        description: `Entry Already Exists with id ${existingTenantRoleAliases.id}, can only have one for tenant ${tenant} and role ${role}`,
      }",59,,77,,,4,,ANY
25769804256,BLOCK,2,,new Error(),15,,78,,,2,,ANY
25769804257,BLOCK,-1,,"{
      this.logger.error(`Invalid Tenant, does not exist any tenant with id ${tenant}`);
      throw new NotFoundException('Invalid Tenant', {
        cause: new Error(),
        description: `Invalid Tenant, does not exist any tenant with id ${tenant}`,
      });
    }",22,,30,,,2,,ANY
25769804258,BLOCK,-1,,"{
      this.logger.error(`Invalid Role, does not exist any role with id ${role}`);
      throw new NotFoundException('Invalid Role', {
        cause: new Error(),
        description: `Invalid Role, does not exist any role with id ${role}`,
      });
    }",20,,40,,,2,,ANY
25769804259,BLOCK,-1,,"{
      this.logger.error(`Invalid RoleAlias, does not exist any role alias with id ${roleAlias}, for role ${role}`);
      throw new NotFoundException('Invalid RoleAlias', {
        cause: new Error(),
        description: `Invalid RoleAlias, does not exist any role alias with id ${roleAlias}, for role ${role}`,
      });
    }",25,,57,,,2,,ANY
25769804260,BLOCK,-1,,"{
      this.logger.error(
        `Entry Already Exists with id ${existingTenantRoleAliases.id}, can only have one for tenant ${tenant} and role ${role}`,
      );
      throw new ForbiddenException('Entry Already Exists', {
        cause: new Error(),
        description: `Entry Already Exists with id ${existingTenantRoleAliases.id}, can only have one for tenant ${tenant} and role ${role}`,
      });
    }",35,,73,,,2,,ANY
25769804261,BLOCK,-1,,"{
    return await this.tenantRoleAliasRepository
      .createQueryBuilder('TenantRoleAliases')
      .leftJoinAndSelect('TenantRoleAliases.tenant', 'Tenant')
      .leftJoinAndSelect('TenantRoleAliases.role', 'Role')
      .leftJoinAndSelect('TenantRoleAliases.roleAlias', 'RoleAlias')
      .getMany();
  }",18,,93,,,2,,ANY
25769804262,BLOCK,2,,{ id },41,,108,,,4,,ANY
25769804263,BLOCK,-1,,"{
    return await this.tenantRoleAliasRepository
      .createQueryBuilder('TenantRoleAliases')
      .leftJoinAndSelect('TenantRoleAliases.tenant', 'Tenant')
      .leftJoinAndSelect('TenantRoleAliases.role', 'Role')
      .leftJoinAndSelect('TenantRoleAliases.roleAlias', 'RoleAlias')
      .where('TenantRoleAliases.id=:id', { id })
      .getOne();
  }",28,,102,,,3,,ANY
25769804264,BLOCK,-1,,"{
    let query = this.tenantRoleAliasRepository
      .createQueryBuilder('TenantRoleAliases')
      .leftJoinAndSelect('TenantRoleAliases.tenant', 'Tenant')
      .leftJoinAndSelect('TenantRoleAliases.role', 'Role')
      .leftJoinAndSelect('TenantRoleAliases.roleAlias', 'RoleAlias');

    if (ids && ids.length > 0) query = query.andWhere('TenantRoleAliases.id IN (:...ids) ', { ids });

    if (roles && roles.length > 0) query = query.andWhere('TenantRoleAliases.role IN (:...roles) ', { roles });

    if (roleAliases && roleAliases.length > 0)
      query = query.andWhere('TenantRoleAliases.roleAlias IN (:...roleAliases) ', { roleAliases });

    if (tenants && tenants.length > 0)
      query = query.andWhere('TenantRoleAliases.tenant IN (:...tenants) ', { tenants });

    if (enabled != null) query = query.andWhere('TenantRoleAliases.enabled = :enabled ', { enabled });

    return await query.getMany();
  }",90,,112,,,3,,ANY
25769804265,BLOCK,2,,{ ids },92,,119,,,4,,ANY
25769804266,BLOCK,2,,{ roles },100,,121,,,4,,ANY
25769804267,BLOCK,2,,{ roleAliases },82,,124,,,4,,ANY
25769804268,BLOCK,2,,{ tenants },75,,127,,,4,,ANY
25769804269,BLOCK,2,,{ enabled },89,,129,,,4,,ANY
25769804270,BLOCK,-1,,"{
    const tenantRoleAliasesToUpdate = await this.tenantRoleAliasRepository
      .createQueryBuilder('TenantRoleAliases')
      .leftJoinAndSelect('TenantRoleAliases.tenant', 'Tenant')
      .leftJoinAndSelect('TenantRoleAliases.role', 'Role')
      .leftJoinAndSelect('TenantRoleAliases.roleAlias', 'RoleAlias')
      .andWhere('TenantRoleAliases.id = :id', { id })
      .getOne();

    if (!tenantRoleAliasesToUpdate) return null;

    const newTenantId = tenant ? tenant : tenantRoleAliasesToUpdate.tenant.id;
    const newRole = role ? role : tenantRoleAliasesToUpdate.role.id;
    if (tenant || role) {
      const existingTenantRoleAliases = await this.tenantRoleAliasRepository
        .createQueryBuilder('TenantRoleAliases')
        .leftJoinAndSelect('TenantRoleAliases.tenant', 'Tenant')
        .leftJoinAndSelect('TenantRoleAliases.role', 'Role')
        .leftJoinAndSelect('TenantRoleAliases.roleAlias', 'RoleAlias')
        .andWhere('Tenant.id = :newTenantId', { newTenantId })
...",91,,134,,,4,,ANY
25769804271,BLOCK,2,,{ id },46,,140,,,4,,ANY
25769804272,BLOCK,-1,,"{
      const existingTenantRoleAliases = await this.tenantRoleAliasRepository
        .createQueryBuilder('TenantRoleAliases')
        .leftJoinAndSelect('TenantRoleAliases.tenant', 'Tenant')
        .leftJoinAndSelect('TenantRoleAliases.role', 'Role')
        .leftJoinAndSelect('TenantRoleAliases.roleAlias', 'RoleAlias')
        .andWhere('Tenant.id = :newTenantId', { newTenantId })
        .andWhere('Role.id = :newRole', { newRole })
        .getOne();
      if (existingTenantRoleAliases && existingTenantRoleAliases?.id != id) {
        this.logger.error(
          `Entry Already Exists with id ${existingTenantRoleAliases.id}, can only have one for tenant ${newTenantId} and role ${newRole}`,
        );
        throw new ForbiddenException('Entry Already Exists', {
          cause: new Error(),
          description: `Entry Already Exists with id ${existingTenantRoleAliases.id}, can only have one for tenant ${newTenantId} and role ${newRole}`,
        });
      }
    }",24,,147,,,2,,ANY
25769804273,BLOCK,2,,{ newTenantId },46,,153,,,4,,ANY
25769804274,BLOCK,2,,{ newRole },40,,154,,,4,,ANY
25769804275,BLOCK,1,,"new ForbiddenException('Entry Already Exists', {
          cause: new Error(),
          description: `Entry Already Exists with id ${existingTenantRoleAliases.id}, can only have one for tenant ${newTenantId} and role ${newRole}`,
        })",14,,160,,,1,,ANY
25769804276,BLOCK,2,,"{
          cause: new Error(),
          description: `Entry Already Exists with id ${existingTenantRoleAliases.id}, can only have one for tenant ${newTenantId} and role ${newRole}`,
        }",61,,160,,,4,,ANY
25769804277,BLOCK,2,,new Error(),17,,161,,,2,,ANY
25769804278,BLOCK,-1,,"{
      const foundTenant = await this.tenantRepository.createQueryBuilder().where('id = :tenant', { tenant }).getOne();
      if (!foundTenant) {
        this.logger.error(`Invalid Tenant, does not exist any tenant with id ${tenant}`);
        throw new NotFoundException('Invalid Tenant', {
          cause: new Error(),
          description: `Invalid Tenant, does not exist any tenant with id ${tenant}`,
        });
      }
      tenantRoleAliasesToUpdate.tenant = foundTenant;
    }",16,,167,,,2,,ANY
25769804279,BLOCK,2,,{ tenant },97,,168,,,4,,ANY
25769804280,BLOCK,1,,"new NotFoundException('Invalid Tenant', {
          cause: new Error(),
          description: `Invalid Tenant, does not exist any tenant with id ${tenant}`,
        })",14,,171,,,1,,ANY
25769804281,BLOCK,2,,"{
          cause: new Error(),
          description: `Invalid Tenant, does not exist any tenant with id ${tenant}`,
        }",54,,171,,,4,,ANY
25769804282,BLOCK,2,,new Error(),17,,172,,,2,,ANY
25769804283,BLOCK,-1,,"{
      const foundRole = await this.rolesRepository.createQueryBuilder().where('id = :role', { role }).getOne();

      if (!foundRole) {
        this.logger.error(`Invalid Role, does not exist any role with id ${role}`);
        throw new NotFoundException('Invalid Role', {
          cause: new Error(),
          description: `Invalid Role, does not exist any role with id ${role}`,
        });
      }
      tenantRoleAliasesToUpdate.role = foundRole;
    }",14,,179,,,2,,ANY
25769804284,BLOCK,2,,{ role },92,,180,,,4,,ANY
25769804285,BLOCK,1,,"new NotFoundException('Invalid Role', {
          cause: new Error(),
          description: `Invalid Role, does not exist any role with id ${role}`,
        })",14,,184,,,1,,ANY
25769804286,BLOCK,2,,"{
          cause: new Error(),
          description: `Invalid Role, does not exist any role with id ${role}`,
        }",52,,184,,,4,,ANY
25769804287,BLOCK,2,,new Error(),17,,185,,,2,,ANY
25769804288,BLOCK,-1,,"{
      const foundRoleAlias = await this.rolesAliasRepository
        .createQueryBuilder('RoleAlias')
        .leftJoinAndSelect('RoleAlias.tenantRoleAlias', 'tenantRoleAlias')
        .leftJoinAndSelect('tenantRoleAlias.tenant', 'tenant')
        .leftJoinAndSelect('tenantRoleAlias.role', 'tenantRoleAliasRole')
        .leftJoinAndSelect('RoleAlias.role', 'role')
        .andWhere('RoleAlias.id = :roleAlias', { roleAlias })
        .andWhere('role.id = :newRole', { newRole })
        .getOne();

      if (!foundRoleAlias) {
        this.logger.error(`Invalid RoleAlias, does not exist any role alias with id ${roleAlias}, for role ${role}`);
        throw new NotFoundException('Invalid RoleAlias', {
          cause: new Error(),
          description: `Invalid RoleAlias, does not exist any role alias with id ${roleAlias}, for role ${newRole}`,
        });
      }
      tenantRoleAliasesToUpdate.roleAlias = foundRoleAlias;
    }",19,,191,,,2,,ANY
25769804289,BLOCK,2,,{ roleAlias },47,,198,,,4,,ANY
25769804290,BLOCK,2,,{ newRole },40,,199,,,4,,ANY
25769804291,BLOCK,1,,"new NotFoundException('Invalid RoleAlias', {
          cause: new Error(),
          description: `Invalid RoleAlias, does not exist any role alias with id ${roleAlias}, for role ${newRole}`,
        })",14,,204,,,1,,ANY
25769804292,BLOCK,2,,"{
          cause: new Error(),
          description: `Invalid RoleAlias, does not exist any role alias with id ${roleAlias}, for role ${newRole}`,
        }",57,,204,,,4,,ANY
25769804293,BLOCK,2,,new Error(),17,,205,,,2,,ANY
25769804294,BLOCK,-1,,"{
        this.logger.error(
          `Entry Already Exists with id ${existingTenantRoleAliases.id}, can only have one for tenant ${newTenantId} and role ${newRole}`,
        );
        throw new ForbiddenException('Entry Already Exists', {
          cause: new Error(),
          description: `Entry Already Exists with id ${existingTenantRoleAliases.id}, can only have one for tenant ${newTenantId} and role ${newRole}`,
        });
      }",76,,156,,,2,,ANY
25769804295,BLOCK,-1,,"{
        this.logger.error(`Invalid Tenant, does not exist any tenant with id ${tenant}`);
        throw new NotFoundException('Invalid Tenant', {
          cause: new Error(),
          description: `Invalid Tenant, does not exist any tenant with id ${tenant}`,
        });
      }",24,,169,,,2,,ANY
25769804296,BLOCK,-1,,"{
        this.logger.error(`Invalid Role, does not exist any role with id ${role}`);
        throw new NotFoundException('Invalid Role', {
          cause: new Error(),
          description: `Invalid Role, does not exist any role with id ${role}`,
        });
      }",22,,182,,,2,,ANY
25769804297,BLOCK,-1,,"{
        this.logger.error(`Invalid RoleAlias, does not exist any role alias with id ${roleAlias}, for role ${role}`);
        throw new NotFoundException('Invalid RoleAlias', {
          cause: new Error(),
          description: `Invalid RoleAlias, does not exist any role alias with id ${roleAlias}, for role ${newRole}`,
        });
      }",27,,202,,,2,,ANY
25769804298,BLOCK,-1,,"{
    const tenantRoleAliasToRemove = await this.tenantRoleAliasRepository
      .createQueryBuilder('TenantRoleAliases')
      .leftJoinAndSelect('TenantRoleAliases.tenant', 'Tenant')
      .leftJoinAndSelect('TenantRoleAliases.role', 'Role')
      .leftJoinAndSelect('TenantRoleAliases.roleAlias', 'RoleAlias')
      .where('TenantRoleAliases.id=:id', { id })
      .getOne();

    if (!tenantRoleAliasToRemove) {
      this.logger.error(`The tenant role alias with id ${id} was not found`);
      throw new NotFoundException('Tenant role alias not found', {
        cause: new Error(),
        description: `The tenant role alias with id ${id} was not found`,
      });
    }
    tenantRoleAliasToRemove.enabled = !tenantRoleAliasToRemove.enabled;
    this.logger.log(
      `Tenant role alias with id: ${id} was ` + tenantRoleAliasToRemove.enabled ? 'Enabled!' : 'Disabled!',
    );

    return await this.tenantRepository.save(tenantRoleAliasToRemove);
  }",27,,217,,,3,,ANY
25769804299,BLOCK,2,,{ id },41,,223,,,4,,ANY
25769804300,BLOCK,1,,"new NotFoundException('Tenant role alias not found', {
        cause: new Error(),
        description: `The tenant role alias with id ${id} was not found`,
      })",12,,228,,,1,,ANY
25769804301,BLOCK,2,,"{
        cause: new Error(),
        description: `The tenant role alias with id ${id} was not found`,
      }",65,,228,,,4,,ANY
25769804302,BLOCK,2,,new Error(),15,,229,,,2,,ANY
25769804303,BLOCK,-1,,"{
      this.logger.error(`The tenant role alias with id ${id} was not found`);
      throw new NotFoundException('Tenant role alias not found', {
        cause: new Error(),
        description: `The tenant role alias with id ${id} was not found`,
      });
    }",34,,226,,,2,,ANY
25769804304,BLOCK,-1,,"{
    const collection: TenantRoleAliases[] = [];

    if (tenantRoleAliasNew || roleId) {
      const tenantRoleAliasN: number[] = [];
      const tenantRoleAliasesToDelete: TenantRoleAliases[] = [];

      if (!tenantRoleAliasNew) {
        for (const t of roleAliasToUpdate.tenantRoleAlias) {
          tenantRoleAliasN.push(t.tenant.id);
        }
      } else {
        tenantRoleAliasN.push(...tenantRoleAliasNew);
      }

      if (tenantRoleAliasN && tenantRoleAliasN.length > 0) {
        for (const tenant of tenantRoleAliasN) {
          const foundTenantRoleAliases = await this.tenantRoleAliasRepository
            .createQueryBuilder('Tenants')
            .andWhere('Tenants.tenant = :tenant', { tenant })
            .andWhere('Tenants.role = :roleId', { roleId: roleId || roleAliasToUpdate.role?.id })
            .getOne();
          if (foundTenantRoleAliases) {
            foundTenantRoleAliases.roleAlias = roleAliasToUpdate;
            this.tenantRoleAliasRepository.save...",103,,241,,,3,,ANY
25769804305,BLOCK,-1,,"{
      const tenantRoleAliasN: number[] = [];
      const tenantRoleAliasesToDelete: TenantRoleAliases[] = [];

      if (!tenantRoleAliasNew) {
        for (const t of roleAliasToUpdate.tenantRoleAlias) {
          tenantRoleAliasN.push(t.tenant.id);
        }
      } else {
        tenantRoleAliasN.push(...tenantRoleAliasNew);
      }

      if (tenantRoleAliasN && tenantRoleAliasN.length > 0) {
        for (const tenant of tenantRoleAliasN) {
          const foundTenantRoleAliases = await this.tenantRoleAliasRepository
            .createQueryBuilder('Tenants')
            .andWhere('Tenants.tenant = :tenant', { tenant })
            .andWhere('Tenants.role = :roleId', { roleId: roleId || roleAliasToUpdate.role?.id })
            .getOne();
          if (foundTenantRoleAliases) {
            foundTenantRoleAliases.roleAlias = roleAliasToUpdate;
            this.tenantRoleAliasRepository.save(foundTenantRoleAliases);
            collection.push(foundTenantRoleAliases);
          ...",38,,244,,,2,,ANY
25769804306,BLOCK,1,,"for (const t of roleAliasToUpdate.tenantRoleAlias) {
          tenantRoleAliasN.push(t.tenant.id);
        }",8,,249,,,1,,ANY
25769804307,BLOCK,1,,"for (const tenant of tenantRoleAliasN) {
          const foundTenantRoleAliases = await this.tenantRoleAliasRepository
            .createQueryBuilder('Tenants')
            .andWhere('Tenants.tenant = :tenant', { tenant })
            .andWhere('Tenants.role = :roleId', { roleId: roleId || roleAliasToUpdate.role?.id })
            .getOne();
          if (foundTenantRoleAliases) {
            foundTenantRoleAliases.roleAlias = roleAliasToUpdate;
            this.tenantRoleAliasRepository.save(foundTenantRoleAliases);
            collection.push(foundTenantRoleAliases);
          } else {
            try {
              const newTenantRoleALias = await this.create({
                role: roleId || (roleAliasToUpdate.role?.id ?? 0),
                enabled: roleAliasToUpdate.enabled,
                tenant,
                roleAlias: roleAliasToUpdate.id,
              });
              collection.push(newTenantRoleALias);
            } catch (error) {
              this.logger.error...",8,,257,,,1,,ANY
25769804308,BLOCK,2,,"{
          const foundTenantRoleAliases = await this.tenantRoleAliasRepository
            .createQueryBuilder('Tenants')
            .andWhere('Tenants.tenant = :tenant', { tenant })
            .andWhere('Tenants.role = :roleId', { roleId: roleId || roleAliasToUpdate.role?.id })
            .getOne();
          if (foundTenantRoleAliases) {
            foundTenantRoleAliases.roleAlias = roleAliasToUpdate;
            this.tenantRoleAliasRepository.save(foundTenantRoleAliases);
            collection.push(foundTenantRoleAliases);
          } else {
            try {
              const newTenantRoleALias = await this.create({
                role: roleId || (roleAliasToUpdate.role?.id ?? 0),
                enabled: roleAliasToUpdate.enabled,
                tenant,
                roleAlias: roleAliasToUpdate.id,
              });
              collection.push(newTenantRoleALias);
            } catch (error) {
              this.logger.error(`${error} when updating tenant-role-al...",47,,257,,,2,,ANY
25769804309,BLOCK,2,,{ tenant },50,,260,,,4,,ANY
25769804310,BLOCK,2,,{ roleId: roleId || roleAliasToUpdate.role?.id },48,,261,,,4,,ANY
25769804311,BLOCK,1,,"{
              const newTenantRoleALias = await this.create({
                role: roleId || (roleAliasToUpdate.role?.id ?? 0),
                enabled: roleAliasToUpdate.enabled,
                tenant,
                roleAlias: roleAliasToUpdate.id,
              });
              collection.push(newTenantRoleALias);
            }",16,,268,,,1,,ANY
25769804312,BLOCK,1,,"{
                role: roleId || (roleAliasToUpdate.role?.id ?? 0),
                enabled: roleAliasToUpdate.enabled,
                tenant,
                roleAlias: roleAliasToUpdate.id,
              }",59,,269,,,3,,ANY
25769804313,BLOCK,1,,"new ForbiddenException('Cannot asociate role alias with tenant', {
                cause: new Error(),
                description: `${error} when updating tenant-role-alias asociation.`,
              })",20,,278,,,1,,ANY
25769804314,BLOCK,2,,"{
                cause: new Error(),
                description: `${error} when updating tenant-role-alias asociation.`,
              }",85,,278,,,4,,ANY
25769804315,BLOCK,2,,new Error(),23,,279,,,2,,ANY
25769804316,BLOCK,-1,,"{
        for (const tenant of tenantRoleAliasN) {
          const foundTenantRoleAliases = await this.tenantRoleAliasRepository
            .createQueryBuilder('Tenants')
            .andWhere('Tenants.tenant = :tenant', { tenant })
            .andWhere('Tenants.role = :roleId', { roleId: roleId || roleAliasToUpdate.role?.id })
            .getOne();
          if (foundTenantRoleAliases) {
            foundTenantRoleAliases.roleAlias = roleAliasToUpdate;
            this.tenantRoleAliasRepository.save(foundTenantRoleAliases);
            collection.push(foundTenantRoleAliases);
          } else {
            try {
              const newTenantRoleALias = await this.create({
                role: roleId || (roleAliasToUpdate.role?.id ?? 0),
                enabled: roleAliasToUpdate.enabled,
                tenant,
                roleAlias: roleAliasToUpdate.id,
              });
              collection.push(newTenantRoleALias);
            } catch (error) {
              this.lo...",59,,256,,,2,,ANY
25769804317,BLOCK,2,,{ roleAlias: roleAliasToUpdate.id },61,,288,,,4,,ANY
25769804318,BLOCK,1,,"new Brackets((qb) => {
              qb.where('TenantRoleAliases.tenant NOT IN (:...tenant)', {
                tenant: tenantRoleAliasN,
              }).orWhere('TenantRoleAliases.role <> :roleId', {
                roleId: roleId || roleAliasToUpdate.role?.id,
              });
            })",12,,290,,,3,,ANY
25769804319,BLOCK,2,,"{
                tenant: tenantRoleAliasN,
              }",71,,291,,,4,,ANY
25769804320,BLOCK,2,,"{
                roleId: roleId || roleAliasToUpdate.role?.id,
              }",62,,293,,,4,,ANY
25769804321,BLOCK,-1,,"{
              qb.where('TenantRoleAliases.tenant NOT IN (:...tenant)', {
                tenant: tenantRoleAliasN,
              }).orWhere('TenantRoleAliases.role <> :roleId', {
                roleId: roleId || roleAliasToUpdate.role?.id,
              });
            }",33,,290,,,3,,ANY
25769804322,BLOCK,1,,"for (const t of tenantRoleAliasesToDelete) {
          await this.tenantRoleAliasRepository.delete(t.id);
        }",8,,311,,,1,,ANY
25769804323,BLOCK,-1,,"{
        for (const t of roleAliasToUpdate.tenantRoleAlias) {
          tenantRoleAliasN.push(t.tenant.id);
        }
      }",31,,248,,,2,,ANY
25769804324,BLOCK,-1,,"for (const t of roleAliasToUpdate.tenantRoleAlias) {
          tenantRoleAliasN.push(t.tenant.id);
        }",8,,249,,,2,,ANY
25769804325,BLOCK,2,,"{
          tenantRoleAliasN.push(t.tenant.id);
        }",59,,249,,,2,,ANY
25769804326,BLOCK,-1,,"{
        tenantRoleAliasN.push(...tenantRoleAliasNew);
      }",13,,252,,,3,,ANY
25769804327,BLOCK,-1,,"for (const tenant of tenantRoleAliasN) {
          const foundTenantRoleAliases = await this.tenantRoleAliasRepository
            .createQueryBuilder('Tenants')
            .andWhere('Tenants.tenant = :tenant', { tenant })
            .andWhere('Tenants.role = :roleId', { roleId: roleId || roleAliasToUpdate.role?.id })
            .getOne();
          if (foundTenantRoleAliases) {
            foundTenantRoleAliases.roleAlias = roleAliasToUpdate;
            this.tenantRoleAliasRepository.save(foundTenantRoleAliases);
            collection.push(foundTenantRoleAliases);
          } else {
            try {
              const newTenantRoleALias = await this.create({
                role: roleId || (roleAliasToUpdate.role?.id ?? 0),
                enabled: roleAliasToUpdate.enabled,
                tenant,
                roleAlias: roleAliasToUpdate.id,
              });
              collection.push(newTenantRoleALias);
            } catch (error) {
              this.logger.error...",8,,257,,,2,,ANY
25769804328,BLOCK,-1,,"{
            foundTenantRoleAliases.roleAlias = roleAliasToUpdate;
            this.tenantRoleAliasRepository.save(foundTenantRoleAliases);
            collection.push(foundTenantRoleAliases);
          }",38,,263,,,2,,ANY
25769804329,BLOCK,-1,,"{
            try {
              const newTenantRoleALias = await this.create({
                role: roleId || (roleAliasToUpdate.role?.id ?? 0),
                enabled: roleAliasToUpdate.enabled,
                tenant,
                roleAlias: roleAliasToUpdate.id,
              });
              collection.push(newTenantRoleALias);
            } catch (error) {
              this.logger.error(`${error} when updating tenant-role-alias asociation.`);
              throw new ForbiddenException('Cannot asociate role alias with tenant', {
                cause: new Error(),
                description: `${error} when updating tenant-role-alias asociation.`,
              });
            }
          }",17,,267,,,3,,ANY
25769804330,BLOCK,-1,,"catch (error) {
              this.logger.error(`${error} when updating tenant-role-alias asociation.`);
              throw new ForbiddenException('Cannot asociate role alias with tenant', {
                cause: new Error(),
                description: `${error} when updating tenant-role-alias asociation.`,
              });
            }",14,,276,,,1,,ANY
25769804331,BLOCK,-1,,"{
        for (const t of tenantRoleAliasesToDelete) {
          await this.tenantRoleAliasRepository.delete(t.id);
        }
      }",77,,310,,,2,,ANY
25769804332,BLOCK,-1,,"for (const t of tenantRoleAliasesToDelete) {
          await this.tenantRoleAliasRepository.delete(t.id);
        }",8,,311,,,2,,ANY
25769804333,BLOCK,2,,"{
          await this.tenantRoleAliasRepository.delete(t.id);
        }",51,,311,,,2,,ANY
25769804334,BLOCK,2,,"import { RoleAlias, Role, Tenant, TenantRoleAliases } from '@avantodev/avanto-db';",0,,2,,,2,,ANY
25769804335,BLOCK,3,,"import { Injectable, Logger, ForbiddenException, NotFoundException } from '@nestjs/common';",0,,3,,,3,,ANY
25769804336,BLOCK,8,,"import { Repository, Brackets } from 'typeorm';",0,,8,,,8,,ANY
25769804337,BLOCK,10,,"@Injectable()
export class TenantRoleAliasesService {
  private readonly logger = new Logger(TenantRoleAliases.name);
  private roleAliasCollection: RoleAlias[] = [];

  constructor(
    @InjectRepository(RoleAlias, dbConfig.name)
    private readonly rolesAliasRepository: Repository<RoleAlias>,
    @InjectRepository(Role, dbConfig.name)
    private readonly rolesRepository: Repository<Role>,
    @InjectRepository(TenantRoleAliases, dbConfig.name)
    private readonly tenantRoleAliasRepository: Repository<TenantRoleAliases>,
    @InjectRepository(Tenant, dbConfig.name)
    private readonly tenantRepository: Repository<Tenant>,
  ) {}

  async create({ tenant, role, roleAlias, enabled }: CreateTenantRoleAliasDto) {
    const foundTenant = await this.tenantRepository.createQueryBuilder().where('id = :tenant', { tenant }).getOne();

    if (!foundTenant) {
      this.logger.error(`Invalid Tenant, does not exist any tenant with id ${tenant}`);
      throw new NotFoundException('Invalid ...",0,,11,,,10,,ANY
25769804338,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804339,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804340,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,31,,,2,,ANY
25769804341,BLOCK,2,,[Number],39,,31,,,2,,ANY
25769804342,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,34,,,2,,ANY
25769804343,BLOCK,2,,[Number],39,,34,,,2,,ANY
25769804344,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,37,,,2,,ANY
25769804345,BLOCK,2,,[Number],39,,37,,,2,,ANY
25769804346,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,40,,,2,,ANY
25769804347,BLOCK,2,,[Number],39,,40,,,2,,ANY
25769804348,BLOCK,3,,"import { IsNotEmpty, Length } from 'class-validator';",0,,3,,,3,,ANY
25769804349,BLOCK,4,,"export class CreateTenantDto implements Omit<TenantDto, 'id' | 'createdAt' | 'updatedAt'> {
  @IsNotEmpty()
  @Length(2, 200)
  @ApiProperty()
  name: string;

  @IsNotEmpty()
  @Length(2, 400)
  @ApiProperty()
  description: string;

  @ApiProperty()
  parentId?: number;

  @IsNotEmpty()
  @ApiProperty()
  coverageZoneId: number;

  @IsNotEmpty()
  @Length(2, 100)
  @ApiProperty()
  url: string;

  @ApiProperty()
  enabled: boolean;

  @ApiProperty({ nullable: true, type: [Number] })
  userIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  tenantTypeIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  childrenIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  roleAliasesIds?: number[];
}",0,,5,,,4,,ANY
25769804350,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804351,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804352,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,6,,,2,,ANY
25769804353,BLOCK,2,,[Number],39,,6,,,2,,ANY
25769804354,BLOCK,2,,"{ nullable: true, type: [String] }",15,,9,,,2,,ANY
25769804355,BLOCK,2,,[String],39,,9,,,2,,ANY
25769804356,BLOCK,2,,"{ nullable: true, type: [String] }",15,,12,,,2,,ANY
25769804357,BLOCK,2,,[String],39,,12,,,2,,ANY
25769804358,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,15,,,2,,ANY
25769804359,BLOCK,2,,[Number],39,,15,,,2,,ANY
25769804360,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,18,,,2,,ANY
25769804361,BLOCK,2,,[Number],39,,18,,,2,,ANY
25769804362,BLOCK,2,,"{ nullable: true, type: [String] }",15,,21,,,2,,ANY
25769804363,BLOCK,2,,[String],39,,21,,,2,,ANY
25769804364,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,27,,,2,,ANY
25769804365,BLOCK,2,,[Number],39,,27,,,2,,ANY
25769804366,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,30,,,2,,ANY
25769804367,BLOCK,2,,[Number],39,,30,,,2,,ANY
25769804368,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,33,,,2,,ANY
25769804369,BLOCK,2,,[Number],39,,33,,,2,,ANY
25769804370,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,36,,,2,,ANY
25769804371,BLOCK,2,,[Number],39,,36,,,2,,ANY
25769804372,BLOCK,4,,"export class FindTenantDto extends PartialType(CreateTenantDto) {
  @ApiProperty({ nullable: true, type: [Number] })
  ids?: number[];

  @ApiProperty({ nullable: true, type: [String] })
  names?: string[];

  @ApiProperty({ nullable: true, type: [String] })
  descriptions?: string[];

  @ApiProperty({ nullable: true, type: [Number] })
  parentIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  coverageZoneIds?: number[];

  @ApiProperty({ nullable: true, type: [String] })
  urls?: string[];

  @ApiProperty()
  enabled?: boolean;

  @ApiProperty({ nullable: true, type: [Number] })
  userIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  tenantTypeIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  childrenIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  roleAliasesIds?: number[];
}",0,,5,,,4,,ANY
25769804373,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804374,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804375,BLOCK,1,,"export class TenantDto {
  id: number;
  name: string;
  description: string;
  parentId?: number;
  coverageZoneId: number;
  url: string;
  enabled: boolean;
  createdAt: Date;
  updatedAt: Date;
  userIds?: number[];
  tenantTypeIds?: number[];
  childrenIds?: number[];
  roleAliasesIds?: number[];
}",0,,1,,,1,,ANY
25769804376,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804377,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804378,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,35,,,2,,ANY
25769804379,BLOCK,2,,[Number],39,,35,,,2,,ANY
25769804380,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,38,,,2,,ANY
25769804381,BLOCK,2,,[Number],39,,38,,,2,,ANY
25769804382,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,41,,,2,,ANY
25769804383,BLOCK,2,,[Number],39,,41,,,2,,ANY
25769804384,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,44,,,2,,ANY
25769804385,BLOCK,2,,[Number],39,,44,,,2,,ANY
25769804386,BLOCK,2,,"import { IsNotEmpty, Length } from 'class-validator';",0,,2,,,2,,ANY
25769804387,BLOCK,5,,"export class UpdateTenantDto extends PartialType(CreateTenantDto) {
  @ApiProperty()
  id: number;

  @IsNotEmpty()
  @Length(2, 200)
  @ApiProperty()
  name: string;

  @IsNotEmpty()
  @Length(2, 400)
  @ApiProperty()
  description: string;

  @ApiProperty()
  parentId?: number;

  @IsNotEmpty()
  @ApiProperty()
  coverageZoneId: number;

  @IsNotEmpty()
  @Length(2, 100)
  @ApiProperty()
  url: string;

  @ApiProperty()
  enabled: boolean;

  @ApiProperty({ nullable: true, type: [Number] })
  userIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  tenantTypeIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  childrenIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  roleAliasesIds?: number[];
}",0,,6,,,5,,ANY
25769804388,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804389,BLOCK,2,,new Logger(TenantsService.name),28,,12,,,2,,ANY
25769804390,BLOCK,-1,,{},4,,18,,,3,,ANY
25769804391,BLOCK,-1,,"{
    this.logger.log('Creating new Tenant...');
    const { url, name, description } = createTenantDto;
    const existingTenantUrl = await this.tenantRepository.findOneBy({ url: url.toLowerCase().trim() });
    if (existingTenantUrl) {
      this.logger.error(`The url ""${url}"" is already used and needs to be unique`);
      throw new ForbiddenException('url is already in use', {
        cause: new Error(),
        description: `The url ""${url}"" is already used and needs to be unique`,
      });
    }
    if (createTenantDto.tenantTypeIds && createTenantDto.tenantTypeIds.length > 0) {
      this.logger.log(`tenant types: ${createTenantDto.tenantTypeIds}`);
    }
    const newTenantType = this.tenantRepository.create({
      ...createTenantDto,
      name: name.trim(),
      url: url.trim().toLowerCase(),
      description: description.trim(),
    });
    return await this.tenantRepository.save(newTenantType);
  }",49,,20,,,3,,ANY
25769804392,BLOCK,2,,"const { url, name, description } = createTenantDto",10,,22,,,2,,ANY
25769804393,BLOCK,1,,{ url: url.toLowerCase().trim() },68,,23,,,3,,ANY
25769804394,BLOCK,1,,"new ForbiddenException('url is already in use', {
        cause: new Error(),
        description: `The url ""${url}"" is already used and needs to be unique`,
      })",12,,26,,,1,,ANY
25769804395,BLOCK,2,,"{
        cause: new Error(),
        description: `The url ""${url}"" is already used and needs to be unique`,
      }",60,,26,,,4,,ANY
25769804396,BLOCK,2,,new Error(),15,,27,,,2,,ANY
25769804397,BLOCK,1,,"{
      ...createTenantDto,
      name: name.trim(),
      url: url.trim().toLowerCase(),
      description: description.trim(),
    }",55,,34,,,3,,ANY
25769804398,BLOCK,-1,,"{
      this.logger.error(`The url ""${url}"" is already used and needs to be unique`);
      throw new ForbiddenException('url is already in use', {
        cause: new Error(),
        description: `The url ""${url}"" is already used and needs to be unique`,
      });
    }",27,,24,,,2,,ANY
25769804399,BLOCK,-1,,"{
      this.logger.log(`tenant types: ${createTenantDto.tenantTypeIds}`);
    }",83,,31,,,2,,ANY
25769804400,BLOCK,-1,,"{
    this.logger.log('Finding All Tenant ...');
    this.tenantCollection = await this.tenantRepository
      .createQueryBuilder('Tenants')
      .leftJoinAndSelect('Tenants.tenantType', 'tenantType')
      .leftJoinAndSelect('Tenants.childrenIds', 'childrenIds')
      .leftJoinAndSelect('Tenants.parent', 'parent')
      .leftJoinAndSelect('Tenants.tenantRoleAlias', 'tenantRoleAlias')
      .leftJoinAndSelect('Tenants.coverageZone', 'coverageZone')
      //.leftJoinAndSelect('Tenants.userIds', 'userIds')
      // .leftJoinAndSelect('Tenants.roles', 'roles')
      //.leftJoinAndSelect('roles.role', 'role')
      //.leftJoinAndSelect('roles.user', 'user')
      // .leftJoinAndSelect('roles.tenant', 'tenant')
      //.leftJoinAndSelect('roles.roleAlias', 'roleAlias')
      .leftJoinAndSelect('tenantType.roles', 'tenantRoles')
      .getMany();
    return this.tenantCollection;
  }",18,,43,,,2,,ANY
25769804401,BLOCK,2,,{ id },37,,79,,,4,,ANY
25769804402,BLOCK,1,,"new NotFoundException('Tenant  not found', {
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      })",12,,83,,,1,,ANY
25769804403,BLOCK,2,,"{
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      }",55,,83,,,4,,ANY
25769804404,BLOCK,2,,new Error(),15,,84,,,2,,ANY
25769804405,BLOCK,-1,,"{
    this.logger.log(`Searching for Tenant  with id: ${id}.`);
    this.tenantCollection = await this.tenantRepository
      .createQueryBuilder('Tenants')
      .leftJoinAndSelect('Tenants.tenantType', 'tenantType')
      .leftJoinAndSelect('Tenants.childrenIds', 'childrenIds')
      .leftJoinAndSelect('Tenants.parent', 'parent')
      //.leftJoinAndSelect('Tenants.tenantRoleAlias', 'tenantRoleAlias')
      //.leftJoinAndSelect('Tenants.coverageZone', 'coverageZone')
      //.leftJoinAndSelect('Tenants.userIds', 'userIds')
      //.leftJoinAndSelect('Tenants.roles', 'roles')
      //.leftJoinAndSelect('roles.role', 'role')
      //.leftJoinAndSelect('roles.user', 'user')
      //.leftJoinAndSelect('roles.tenant', 'tenant')
      //.leftJoinAndSelect('roles.roleAlias', 'roleAlias')
      .leftJoinAndSelect('tenantType.roles', 'tenantRoles')
      .andWhere('Tenants.id = :id ', { id })
      .getMany();
    if (this.tenantCollection.length < 1) {
      this.logger.error(`The tenant ...",28,,63,,,3,,ANY
25769804406,BLOCK,-1,,"{
      this.logger.error(`The tenant with id ${id} was not found`);
      throw new NotFoundException('Tenant  not found', {
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      });
    }",42,,81,,,2,,ANY
25769804407,BLOCK,-1,,"{
    const {
      ids,
      names,
      descriptions,
      enabled,
      parentIds,
      coverageZoneIds,
      urls,
      userIds,
      tenantTypeIds,
      childrenIds,
      roleAliasesIds,
    } = findTenantDto;
    let query = this.tenantRepository
      .createQueryBuilder('Tenants')
      .leftJoinAndSelect('Tenants.tenantType', 'tenantType')
      .leftJoinAndSelect('Tenants.children', 'children')
      .leftJoinAndSelect('Tenants.parent', 'parent')
      //.leftJoinAndSelect('Tenants.tenantRoleAlias', 'tenantRoleAlias')
      //.leftJoinAndSelect('Tenants.coverageZone', 'coverageZone')
      .leftJoinAndSelect('Tenants.users', 'users')
      .leftJoinAndSelect('Tenants.roles', 'roles')
      //.leftJoinAndSelect('roles.role', 'role')
      .leftJoinAndSelect('roles.user', 'user')
      //.leftJoinAndSelect('roles.tenant', 'tenant')
      .leftJoinAndSelect('roles.roleAlias', 'roleAlias')
      .leftJoinAndSelect('tenantType.roles', 'tenantRoles');

    if (ids && i...",49,,92,,,3,,ANY
25769804408,BLOCK,1,,"const {
      ids,
      names,
      descriptions,
      enabled,
      parentIds,
      coverageZoneIds,
      urls,
      userIds,
      tenantTypeIds,
      childrenIds,
      roleAliasesIds,
    } = findTenantDto",10,,93,,,1,,ANY
25769804409,BLOCK,2,,{ ids },57,,123,,,4,,ANY
25769804410,BLOCK,2,,{ names: names.map((name) => name) },60,,127,,,4,,ANY
25769804411,BLOCK,-1,,name,89,,127,,,3,,ANY
25769804412,BLOCK,2,,{ urls: urls.map((url) => url) },59,,131,,,4,,ANY
25769804413,BLOCK,-1,,url,85,,131,,,3,,ANY
25769804414,BLOCK,2,,{ descriptions },74,,135,,,4,,ANY
25769804415,BLOCK,2,,{ parentIds },62,,139,,,4,,ANY
25769804416,BLOCK,2,,{ roleAliasesIds },76,,143,,,4,,ANY
25769804417,BLOCK,2,,{ tenantTypeIds },70,,147,,,4,,ANY
25769804418,BLOCK,2,,{ childrenIds },66,,151,,,4,,ANY
25769804419,BLOCK,2,,{ coverageZoneIds },74,,155,,,4,,ANY
25769804420,BLOCK,2,,{ userIds },58,,159,,,4,,ANY
25769804421,BLOCK,2,,{ enabled },59,,163,,,4,,ANY
25769804422,BLOCK,-1,,"{
      this.logger.log(`Finding by ids: ${ids}`);
      query = query.andWhere('Tenants.id IN (:...ids) ', { ids });
    }",31,,121,,,2,,ANY
25769804423,BLOCK,-1,,"{
      this.logger.log(`Finding by names: ${names}`);
      query = query.andWhere('Tenant.name IN (:...names) ', { names: names.map((name) => name) });
    }",35,,125,,,2,,ANY
25769804424,BLOCK,-1,,"{
      this.logger.log(`Finding by urls: ${urls}`);
      query = query.andWhere('Tenant.urls IN (:...urls) ', { urls: urls.map((url) => url) });
    }",33,,129,,,2,,ANY
25769804425,BLOCK,-1,,"{
      this.logger.log(`Finding by descriptions: ${descriptions}`);
      query = query.andWhere('Tenant.description IN (:...descriptions) ', { descriptions });
    }",49,,133,,,2,,ANY
25769804426,BLOCK,-1,,"{
      this.logger.log(`Finding by parent Ids: ${parentIds}`);
      query = query.andWhere('parent.id IN (:...parentIds) ', { parentIds });
    }",43,,137,,,2,,ANY
25769804427,BLOCK,-1,,"{
      this.logger.log(`Finding by roleAliases Ids: ${roleAliasesIds}`);
      query = query.andWhere('tenantRoleAlias.id IN (:...roleAliasesIds) ', { roleAliasesIds });
    }",53,,141,,,2,,ANY
25769804428,BLOCK,-1,,"{
      this.logger.log(`Finding by tenantType Ids: ${tenantTypeIds}`);
      query = query.andWhere('tenantType.id IN (:...tenantTypeIds) ', { tenantTypeIds });
    }",51,,145,,,2,,ANY
25769804429,BLOCK,-1,,"{
      this.logger.log(`Finding by children Ids: ${childrenIds}`);
      query = query.andWhere('children.id IN (:...childrenIds) ', { childrenIds });
    }",47,,149,,,2,,ANY
25769804430,BLOCK,-1,,"{
      this.logger.log(`Finding by coverageZone Ids: ${coverageZoneIds}`);
      query = query.andWhere('coverageZone.id IN (:...coverageZoneIds) ', { coverageZoneIds });
    }",55,,153,,,2,,ANY
25769804431,BLOCK,-1,,"{
      this.logger.log(`Finding by user Ids: ${userIds}`);
      query = query.andWhere('users.id IN (:...userIds)', { userIds });
    }",39,,157,,,2,,ANY
25769804432,BLOCK,-1,,"{
      this.logger.log(`Finding by enabled: ${enabled}`);
      query = query.andWhere('Tenant.enabled = :enabled ', { enabled });
    }",25,,161,,,2,,ANY
25769804433,BLOCK,-1,,"{
    this.logger.log(`Updating for Tenant with id: ${id}.`);
    const { url, name, description } = updateTenantDto;

    const tenantToUpdate = await this.tenantRepository
      .createQueryBuilder('Tenants')
      .leftJoinAndSelect('Tenants.tenantType', 'tenantType')
      .leftJoinAndSelect('Tenants.childrenIds', 'childrenIds')
      .leftJoinAndSelect('Tenants.parent', 'parent')
      //.leftJoinAndSelect('Tenants.tenantRoleAlias', 'tenantRoleAlias')
      //.leftJoinAndSelect('Tenants.coverageZone', 'coverageZone')
      //.leftJoinAndSelect('Tenants.userIds', 'userIds')
      //.leftJoinAndSelect('Tenants.roles', 'roles')
      //.leftJoinAndSelect('roles.role', 'role')
      //.leftJoinAndSelect('roles.user', 'user')
      //.leftJoinAndSelect('roles.tenant', 'tenant')
      //.leftJoinAndSelect('roles.roleAlias', 'roleAlias')
      .leftJoinAndSelect('tenantType.roles', 'tenantRoles')
      .andWhere('Tenants.id = :id ', { id })
      .getOne();
    if (!tenantToUpdate) {
...",61,,171,,,4,,ANY
25769804434,BLOCK,2,,"const { url, name, description } = updateTenantDto",10,,173,,,2,,ANY
25769804435,BLOCK,2,,{ id },37,,189,,,4,,ANY
25769804436,BLOCK,1,,"new NotFoundException('Tenant not found', {
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      })",12,,193,,,1,,ANY
25769804437,BLOCK,2,,"{
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      }",54,,193,,,4,,ANY
25769804438,BLOCK,2,,new Error(),15,,194,,,2,,ANY
25769804439,BLOCK,-1,,"{
      const existingTenantTag = await this.tenantRepository.findOneBy({
        url: url.toLowerCase().trim(),
      });
      if (existingTenantTag.id !== id) {
        this.logger.error(`The url ""${url}"" is already used and needs to be unique`);
        throw new ForbiddenException('url is already in use', {
          cause: new Error(),
          description: `The url ""${url}"" is already used and needs to be unique`,
        });
      }
    }",13,,198,,,2,,ANY
25769804440,BLOCK,1,,"{
        url: url.toLowerCase().trim(),
      }",70,,199,,,3,,ANY
25769804441,BLOCK,1,,"new ForbiddenException('url is already in use', {
          cause: new Error(),
          description: `The url ""${url}"" is already used and needs to be unique`,
        })",14,,204,,,1,,ANY
25769804442,BLOCK,2,,"{
          cause: new Error(),
          description: `The url ""${url}"" is already used and needs to be unique`,
        }",62,,204,,,4,,ANY
25769804443,BLOCK,2,,new Error(),17,,205,,,2,,ANY
25769804444,BLOCK,2,,"{
      ...updateTenantDto,
      name: name.trim(),
      url: url.trim().toLowerCase(),
      description: description.trim(),
    }",48,,210,,,4,,ANY
25769804445,BLOCK,-1,,"{
      this.logger.error(`The tenant with id ${id} was not found`);
      throw new NotFoundException('Tenant not found', {
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      });
    }",25,,191,,,2,,ANY
25769804446,BLOCK,-1,,"{
        this.logger.error(`The url ""${url}"" is already used and needs to be unique`);
        throw new ForbiddenException('url is already in use', {
          cause: new Error(),
          description: `The url ""${url}"" is already used and needs to be unique`,
        });
      }",39,,202,,,2,,ANY
25769804447,BLOCK,-1,,"{
    this.logger.log(`Enabling / Disabling Tenant with id: ${id}.`);
    const tenantToDisable = await this.tenantRepository
      .createQueryBuilder('Tenants')
      .leftJoinAndSelect('Tenants.tenantType', 'tenantType')
      .leftJoinAndSelect('Tenants.childrenIds', 'childrenIds')
      .leftJoinAndSelect('Tenants.parent', 'parent')
      //.leftJoinAndSelect('Tenants.tenantRoleAlias', 'tenantRoleAlias')
      //.leftJoinAndSelect('Tenants.coverageZone', 'coverageZone')
      //.leftJoinAndSelect('Tenants.userIds', 'userIds')
      //.leftJoinAndSelect('Tenants.roles', 'roles')
      //.leftJoinAndSelect('roles.role', 'role')
      //.leftJoinAndSelect('roles.user', 'user')
      //.leftJoinAndSelect('roles.tenant', 'tenant')
      //.leftJoinAndSelect('roles.roleAlias', 'roleAlias')
      .leftJoinAndSelect('tenantType.roles', 'tenantRoles')
      .andWhere('Tenants.id = :id ', { id })
      .getOne();
    if (!tenantToDisable) {
      this.logger.error(`The tenant with id ${i...",27,,220,,,3,,ANY
25769804448,BLOCK,2,,{ id },37,,236,,,4,,ANY
25769804449,BLOCK,1,,"new NotFoundException('Tenant not found', {
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      })",12,,240,,,1,,ANY
25769804450,BLOCK,2,,"{
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      }",54,,240,,,4,,ANY
25769804451,BLOCK,2,,new Error(),15,,241,,,2,,ANY
25769804452,BLOCK,-1,,"{
      this.logger.error(`The tenant with id ${id} was not found`);
      throw new NotFoundException('Tenant not found', {
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      });
    }",26,,238,,,2,,ANY
25769804453,BLOCK,-1,,"{
    const { ids } = findTenantDto;
    let query = this.tenantRepository.createQueryBuilder('Tenants');

    if (ids && ids.length > 0) {
      this.logger.log(`Finding by ids: ${ids}`);
      query = query.andWhere('Tenants.id IN (:...ids) ', { ids });
      this.tenantCollection = await query.getMany();
      this.logger.log(`Found ${this.tenantCollection.length} Tenant Types`);
      return this.tenantCollection;
    } else {
      return [];
    }
  }",48,,251,,,3,,ANY
25769804454,BLOCK,1,,const { ids } = findTenantDto,10,,252,,,1,,ANY
25769804455,BLOCK,2,,{ ids },57,,257,,,4,,ANY
25769804456,BLOCK,-1,,"{
      this.logger.log(`Finding by ids: ${ids}`);
      query = query.andWhere('Tenants.id IN (:...ids) ', { ids });
      this.tenantCollection = await query.getMany();
      this.logger.log(`Found ${this.tenantCollection.length} Tenant Types`);
      return this.tenantCollection;
    }",31,,255,,,2,,ANY
25769804457,BLOCK,-1,,"{
      return [];
    }",11,,261,,,3,,ANY
25769804458,BLOCK,3,,"import { Injectable, Logger, ForbiddenException, NotFoundException } from '@nestjs/common';",0,,3,,,3,,ANY
25769804459,BLOCK,9,,"@Injectable()
export class TenantsService {
  private readonly logger = new Logger(TenantsService.name);
  private tenantCollection: Tenant[] = [];

  constructor(
    @InjectRepository(Tenant, dbConfig.name)
    private readonly tenantRepository: Repository<Tenant>,
  ) {}

  async create(createTenantDto: CreateTenantDto) {
    this.logger.log('Creating new Tenant...');
    const { url, name, description } = createTenantDto;
    const existingTenantUrl = await this.tenantRepository.findOneBy({ url: url.toLowerCase().trim() });
    if (existingTenantUrl) {
      this.logger.error(`The url ""${url}"" is already used and needs to be unique`);
      throw new ForbiddenException('url is already in use', {
        cause: new Error(),
        description: `The url ""${url}"" is already used and needs to be unique`,
      });
    }
    if (createTenantDto.tenantTypeIds && createTenantDto.tenantTypeIds.length > 0) {
      this.logger.log(`tenant types: ${createTenantDto.tenantTypeIds}`);
    }
...",0,,10,,,9,,ANY
25769804460,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804461,BLOCK,2,,"export const tenantStub: Tenant = JSON.parse(`{
    ""id"": 1,
    ""name"": ""Hartford Office Interiors"",
    ""description"": ""Testing purposes in Orderbahn"",
    ""url"": ""hoi"",
    ""apiKey"": ""SrzczBcbeIhLsT3QQcEBtfhzQWeqo9lmn4K-TI1rHs"",
    ""apiSecret"": ""a9VBUUykzIpl0AMWV0YlZpxsNzOzRkqFMXw6-H1VxaRuEPPy1VPSqflyLDWrsFWJS2MjkU4-XWFzzQYgTlRTP2gxfL9ksqljUGZfrOfZz-JVFs4X"",
    ""enabled"": true,
    ""createdAt"": ""2022-08-09T17:37:42.597Z"",
    ""updatedAt"": ""2023-07-12T14:27:45.746Z"",
    ""tenantType"": [
      {
        ""id"": 3,
        ""name"": ""Installer"",
        ""description"": ""Installer"",
        ""tag"": ""Installer"",
        ""enabled"": true,
        ""createdAt"": ""2022-08-09T17:31:09.317Z"",
        ""updatedAt"": ""2023-07-12T13:46:56.821Z""
      },
      {
        ""id"": 2,
        ""name"": ""Dealer"",
        ""description"": ""Dealer"",
        ""tag"": ""Dealer"",
        ""enabled"": true,
        ""createdAt"": ""2022-08-09T17:30:58.113Z"",
        ""updatedAt"": ""2023-07-12T13:46:56.807Z""
      },
      {
    ...",0,,3,,,2,,ANY
25769804462,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804463,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804464,BLOCK,2,,{ nullable: true },15,,18,,,2,,ANY
25769804465,BLOCK,4,,"export class CreateUserRoleByTenantsDto implements Omit<UserRoleByTenantsDto, 'id' | 'createdAt' | 'updatedAt'> {
  @IsNotEmpty()
  @ApiProperty()
  userId: number;

  @IsNotEmpty()
  @ApiProperty()
  tenantId: number;

  @IsNotEmpty()
  @ApiProperty()
  roleId: number;

  @ApiProperty({ nullable: true })
  roleAliasId?: number;

  @ApiProperty()
  enabled: boolean;
}",0,,5,,,4,,ANY
25769804466,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804467,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804468,BLOCK,2,,{ nullable: true },15,,6,,,2,,ANY
25769804469,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,9,,,2,,ANY
25769804470,BLOCK,2,,[Number],39,,9,,,2,,ANY
25769804471,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,12,,,2,,ANY
25769804472,BLOCK,2,,[Number],39,,12,,,2,,ANY
25769804473,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,15,,,2,,ANY
25769804474,BLOCK,2,,[Number],39,,15,,,2,,ANY
25769804475,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,18,,,2,,ANY
25769804476,BLOCK,2,,[Number],39,,18,,,2,,ANY
25769804477,BLOCK,2,,{ nullable: true },15,,21,,,2,,ANY
25769804478,BLOCK,4,,"export class FindUserRoleByTenantsDto extends PartialType(CreateUserRoleByTenantsDto) {
  @ApiProperty({ nullable: true })
  ids?: number;

  @ApiProperty({ nullable: true, type: [Number] })
  userIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  tenantIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  roleIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  roleAliasIds?: number[];

  @ApiProperty({ nullable: true })
  enabled?: boolean;
}",0,,5,,,4,,ANY
25769804479,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804480,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804481,BLOCK,2,,{ nullable: true },15,,7,,,2,,ANY
25769804482,BLOCK,2,,{ nullable: true },15,,11,,,2,,ANY
25769804483,BLOCK,2,,{ nullable: true },15,,15,,,2,,ANY
25769804484,BLOCK,2,,{ nullable: true },15,,19,,,2,,ANY
25769804485,BLOCK,2,,{ nullable: true },15,,22,,,2,,ANY
25769804486,BLOCK,5,,"export class UpdateUserRoleByTenantsDto extends PartialType(CreateUserRoleByTenantsDto) {
  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  userId?: number;

  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  tenantId?: number;

  @ApiProperty({ nullable: true })
  @IsNotEmpty()
  roleId?: number;

  @ApiProperty({ nullable: true })
  roleAliasId?: number;

  @ApiProperty({ nullable: true })
  enabled?: boolean;
}",0,,6,,,5,,ANY
25769804487,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804488,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804489,BLOCK,1,,"export class UserRoleByTenantsDto {
  id: number;
  userId: number;
  tenantId: number;
  roleId: number;
  roleAliasId?: number;
  enabled: boolean;
  createdAt: Date;
  updatedAt: Date;
}",0,,1,,,1,,ANY
25769804490,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804491,BLOCK,2,,new Logger(UserRoleByTenantsService.name),28,,16,,,2,,ANY
25769804492,BLOCK,-1,,UsersService,29,,22,,,2,,ANY
25769804493,BLOCK,-1,,TenantsService,29,,25,,,2,,ANY
25769804494,BLOCK,-1,,RolesService,29,,28,,,2,,ANY
25769804495,BLOCK,-1,,RoleAliasesService,29,,31,,,2,,ANY
25769804496,BLOCK,-1,,{},4,,33,,,7,,ANY
25769804497,BLOCK,-1,,"{
    const newUserRoleByTenants = this.userRoleByTenantsRepository.create();

    this.logger.log(`Finding user ${userId} in tenant ${tenantId} ...`);
    const foundUser = await this.usersService.findByMany({ ids: [userId], tenantsIds: [tenantId] });

    if (foundUser.length < 0) {
      this.logger.error('Invalid User or is not registered for that Tenant');
      throw new NotFoundException('Invalid User or is not registered for that Tenant', {
        cause: new Error(),
        description: `Invalid User ${userId} or is not registered for Tenant ${tenantId}`,
      });
    }

    const foundUserRoleByTenants = await this.findByMany({
      userIds: [userId],
      tenantIds: [tenantId],
      roleIds: [roleId],
    });

    if (foundUserRoleByTenants.length > 0) {
      this.logger.error(
        `There is a role ${roleId} with user ${userId} in the tenant ${tenantId}, and needs to be unique. Object ${foundUserRoleByTenants[0].id} Found ${foundUserRoleByTenants.length}`,
     ...",95,,35,,,3,,ANY
25769804498,BLOCK,1,,"{ ids: [userId], tenantsIds: [tenantId] }",57,,39,,,3,,ANY
25769804499,BLOCK,2,,[userId],64,,39,,,2,,ANY
25769804500,BLOCK,2,,[tenantId],86,,39,,,2,,ANY
25769804501,BLOCK,1,,"new NotFoundException('Invalid User or is not registered for that Tenant', {
        cause: new Error(),
        description: `Invalid User ${userId} or is not registered for Tenant ${tenantId}`,
      })",12,,43,,,1,,ANY
25769804502,BLOCK,2,,"{
        cause: new Error(),
        description: `Invalid User ${userId} or is not registered for Tenant ${tenantId}`,
      }",87,,43,,,4,,ANY
25769804503,BLOCK,2,,new Error(),15,,44,,,2,,ANY
25769804504,BLOCK,1,,"{
      userIds: [userId],
      tenantIds: [tenantId],
      roleIds: [roleId],
    }",57,,49,,,3,,ANY
25769804505,BLOCK,2,,[userId],15,,50,,,2,,ANY
25769804506,BLOCK,2,,[tenantId],17,,51,,,2,,ANY
25769804507,BLOCK,2,,[roleId],15,,52,,,2,,ANY
25769804508,BLOCK,1,,"new ForbiddenException('Violation of unique constraint', {
        cause: new Error(),
        description: `There is a role ${roleId} with that user ${userId} in the tenant ${tenantId}, and needs to be unique`,
      })",12,,59,,,1,,ANY
25769804509,BLOCK,2,,"{
        cause: new Error(),
        description: `There is a role ${roleId} with that user ${userId} in the tenant ${tenantId}, and needs to be unique`,
      }",69,,59,,,4,,ANY
25769804510,BLOCK,2,,new Error(),15,,60,,,2,,ANY
25769804511,BLOCK,1,,"{ ids: [tenantId], userIds: [userId] }",61,,67,,,3,,ANY
25769804512,BLOCK,2,,[tenantId],68,,67,,,2,,ANY
25769804513,BLOCK,2,,[userId],89,,67,,,2,,ANY
25769804514,BLOCK,1,,"new ForbiddenException('Invalid Tenant!', {
        cause: new Error(),
        description: `Invalid Tenant ${tenantId}!`,
      })",12,,70,,,1,,ANY
25769804515,BLOCK,2,,"{
        cause: new Error(),
        description: `Invalid Tenant ${tenantId}!`,
      }",54,,70,,,4,,ANY
25769804516,BLOCK,2,,new Error(),15,,71,,,2,,ANY
25769804517,BLOCK,-1,,tenantType.id,70,,76,,,3,,ANY
25769804518,BLOCK,1,,"{ ids: [roleId], tenantTypesIds: tenantTypes }",57,,80,,,3,,ANY
25769804519,BLOCK,2,,[roleId],64,,80,,,2,,ANY
25769804520,BLOCK,1,,"new NotFoundException('Invalid Role or is not registered for that tenant type', {
        cause: new Error(),
        description: `Invalid Role ${roleId} or is not registered for tenant type ${tenantTypes}`,
      })",12,,83,,,1,,ANY
25769804521,BLOCK,2,,"{
        cause: new Error(),
        description: `Invalid Role ${roleId} or is not registered for tenant type ${tenantTypes}`,
      }",92,,83,,,4,,ANY
25769804522,BLOCK,2,,new Error(),15,,84,,,2,,ANY
25769804523,BLOCK,-1,,"{
      const roleId = foundRole[0].id;
      this.logger.log(`Finding role alias ${roleAliasId} for the role ${roleId} ...`);

      const foundRoleAlias = await this.roleAliasService.findByMany({ ids: [roleAliasId], roleIds: [roleId] });
      if (foundRoleAlias.length <= 0) {
        this.logger.error('Invalid Role Alias or is not registered for the selected role');
        throw new NotFoundException('Invalid Role Alias or is not registered for the selected role', {
          cause: new Error(),
          description: `Invalid Role Alias ${roleAliasId} or is not registered for the selected role ${roleId}`,
        });
      }
      newUserRoleByTenants.roleAlias = foundRoleAlias[0];
    }",21,,89,,,2,,ANY
25769804524,BLOCK,1,,"{ ids: [roleAliasId], roleIds: [roleId] }",68,,93,,,3,,ANY
25769804525,BLOCK,2,,[roleAliasId],75,,93,,,2,,ANY
25769804526,BLOCK,2,,[roleId],99,,93,,,2,,ANY
25769804527,BLOCK,1,,"new NotFoundException('Invalid Role Alias or is not registered for the selected role', {
          cause: new Error(),
          description: `Invalid Role Alias ${roleAliasId} or is not registered for the selected role ${roleId}`,
        })",14,,96,,,1,,ANY
25769804528,BLOCK,2,,"{
          cause: new Error(),
          description: `Invalid Role Alias ${roleAliasId} or is not registered for the selected role ${roleId}`,
        }",101,,96,,,4,,ANY
25769804529,BLOCK,2,,new Error(),17,,97,,,2,,ANY
25769804530,BLOCK,-1,,"{
      this.logger.error('Invalid User or is not registered for that Tenant');
      throw new NotFoundException('Invalid User or is not registered for that Tenant', {
        cause: new Error(),
        description: `Invalid User ${userId} or is not registered for Tenant ${tenantId}`,
      });
    }",30,,41,,,2,,ANY
25769804531,BLOCK,-1,,"{
      this.logger.error(
        `There is a role ${roleId} with user ${userId} in the tenant ${tenantId}, and needs to be unique. Object ${foundUserRoleByTenants[0].id} Found ${foundUserRoleByTenants.length}`,
      );
      throw new ForbiddenException('Violation of unique constraint', {
        cause: new Error(),
        description: `There is a role ${roleId} with that user ${userId} in the tenant ${tenantId}, and needs to be unique`,
      });
    }",43,,55,,,2,,ANY
25769804532,BLOCK,-1,,"{
      this.logger.error('Invalid Tenant!');
      throw new ForbiddenException('Invalid Tenant!', {
        cause: new Error(),
        description: `Invalid Tenant ${tenantId}!`,
      });
    }",33,,68,,,2,,ANY
25769804533,BLOCK,-1,,"{
      this.logger.error('Invalid Role or is not registered for that tenant type');
      throw new NotFoundException('Invalid Role or is not registered for that tenant type', {
        cause: new Error(),
        description: `Invalid Role ${roleId} or is not registered for tenant type ${tenantTypes}`,
      });
    }",31,,81,,,2,,ANY
25769804534,BLOCK,-1,,"{
        this.logger.error('Invalid Role Alias or is not registered for the selected role');
        throw new NotFoundException('Invalid Role Alias or is not registered for the selected role', {
          cause: new Error(),
          description: `Invalid Role Alias ${roleAliasId} or is not registered for the selected role ${roleId}`,
        });
      }",38,,94,,,2,,ANY
25769804535,BLOCK,-1,,"{
    this.logger.log(`Finding all ...`);
    return await this.userRoleByTenantsRepository
      .createQueryBuilder('userRoleByTenants')
      .leftJoinAndSelect('userRoleByTenants.tenant', 'tenant')
      .leftJoinAndSelect('userRoleByTenants.user', 'user')
      .leftJoinAndSelect('userRoleByTenants.role', 'role')
      .leftJoinAndSelect('userRoleByTenants.roleAlias', 'roleAlias')
      .getMany();
  }",18,,114,,,2,,ANY
25769804536,BLOCK,-1,,"{
    this.logger.log(`Finding user role by tenants`);
    let query = this.userRoleByTenantsRepository
      .createQueryBuilder('userRoleByTenants')
      .leftJoinAndSelect('userRoleByTenants.tenant', 'tenants')
      .leftJoinAndSelect('userRoleByTenants.user', 'user')
      .leftJoinAndSelect('userRoleByTenants.role', 'role')
      .leftJoinAndSelect('userRoleByTenants.roleAlias', 'roleAlias');

    if (ids) {
      this.logger.log(`with id ${ids} ...`);
      query = query.andWhere('userRoleByTenants.id IN (:...ids)', { ids });
    }
    if (userIds && userIds.length > 0) {
      this.logger.log(`with userIds ${userIds} ...`);
      query = query.andWhere('user.id IN (:...userIds)', { userIds });
    }
    if (tenantIds && tenantIds.length > 0) {
      this.logger.log(`with tenantIds ${tenantIds} ...`);
      query = query.andWhere('tenants.id IN (:...tenantIds)', { tenantIds });
    }
    if (roleIds && roleIds.length > 0) {
      this.logger.log(`with roleIds ${roleIds} ...`...",106,,125,,,3,,ANY
25769804537,BLOCK,2,,{ ids },66,,136,,,4,,ANY
25769804538,BLOCK,2,,{ userIds },57,,140,,,4,,ANY
25769804539,BLOCK,2,,{ tenantIds },62,,144,,,4,,ANY
25769804540,BLOCK,2,,{ roleIds },57,,148,,,4,,ANY
25769804541,BLOCK,2,,{ roleAliasIds },67,,152,,,4,,ANY
25769804542,BLOCK,2,,{ enabled },69,,156,,,4,,ANY
25769804543,BLOCK,-1,,"{
      this.logger.log(`with id ${ids} ...`);
      query = query.andWhere('userRoleByTenants.id IN (:...ids)', { ids });
    }",13,,134,,,2,,ANY
25769804544,BLOCK,-1,,"{
      this.logger.log(`with userIds ${userIds} ...`);
      query = query.andWhere('user.id IN (:...userIds)', { userIds });
    }",39,,138,,,2,,ANY
25769804545,BLOCK,-1,,"{
      this.logger.log(`with tenantIds ${tenantIds} ...`);
      query = query.andWhere('tenants.id IN (:...tenantIds)', { tenantIds });
    }",43,,142,,,2,,ANY
25769804546,BLOCK,-1,,"{
      this.logger.log(`with roleIds ${roleIds} ...`);
      query = query.andWhere('role.id IN (:...roleIds)', { roleIds });
    }",39,,146,,,2,,ANY
25769804547,BLOCK,-1,,"{
      this.logger.log(`with roleAliasIds ${roleAliasIds} ...`);
      query = query.andWhere('roleAlias.id IN (:...roleAliasIds)', { roleAliasIds });
    }",49,,150,,,2,,ANY
25769804548,BLOCK,-1,,"{
      this.logger.log(`with enabled property ${enabled} ...`);
      query = query.andWhere('userRoleByTenants.enabled = :enabled', { enabled });
    }",25,,154,,,2,,ANY
25769804549,BLOCK,-1,,"{
    const userRoleByTenantsToUpdate = await this.userRoleByTenantsRepository
      .createQueryBuilder('userRoleByTenants')
      .leftJoinAndSelect('userRoleByTenants.tenant', 'tenant')
      .leftJoinAndSelect('userRoleByTenants.user', 'user')
      .leftJoinAndSelect('userRoleByTenants.role', 'role')
      .leftJoinAndSelect('userRoleByTenants.roleAlias', 'roleAlias')
      .andWhere('userRoleByTenants.id = :id', { id })
      .getOne();

    if (!userRoleByTenantsToUpdate) {
      this.logger.error('Property to update not found');
      throw new NotFoundException('Not found', {
        cause: new Error(),
        description: `Property to update not found`,
      });
    }

    if (enabled != null) userRoleByTenantsToUpdate.enabled = enabled;

    const newUser = userId || userRoleByTenantsToUpdate.user.id;
    const newTenant = tenantId || userRoleByTenantsToUpdate.tenant.id;
    const newRole = roleId || userRoleByTenantsToUpdate.role.id;

    if (userId) {
      const foun...",107,,162,,,4,,ANY
25769804550,BLOCK,2,,{ id },46,,169,,,4,,ANY
25769804551,BLOCK,1,,"new NotFoundException('Not found', {
        cause: new Error(),
        description: `Property to update not found`,
      })",12,,174,,,1,,ANY
25769804552,BLOCK,2,,"{
        cause: new Error(),
        description: `Property to update not found`,
      }",47,,174,,,4,,ANY
25769804553,BLOCK,2,,new Error(),15,,175,,,2,,ANY
25769804554,BLOCK,-1,,"{
      const foundUser = await this.usersService.findByMany({ ids: [userId], tenantsIds: [newTenant] });
      if (foundUser.length <= 0) {
        this.logger.error('Invalid User or is not registered for that Tenant');
        throw new NotFoundException('Invalid User or is not registered for that Tenant', {
          cause: new Error(),
          description: `Invalid User ${userId} or is not registered for Tenant ${tenantId}`,
        });
      }
      userRoleByTenantsToUpdate.user = foundUser[0];
    }",16,,186,,,2,,ANY
25769804555,BLOCK,1,,"{ ids: [userId], tenantsIds: [newTenant] }",59,,187,,,3,,ANY
25769804556,BLOCK,2,,[userId],66,,187,,,2,,ANY
25769804557,BLOCK,2,,[newTenant],88,,187,,,2,,ANY
25769804558,BLOCK,1,,"new NotFoundException('Invalid User or is not registered for that Tenant', {
          cause: new Error(),
          description: `Invalid User ${userId} or is not registered for Tenant ${tenantId}`,
        })",14,,190,,,1,,ANY
25769804559,BLOCK,2,,"{
          cause: new Error(),
          description: `Invalid User ${userId} or is not registered for Tenant ${tenantId}`,
        }",89,,190,,,4,,ANY
25769804560,BLOCK,2,,new Error(),17,,191,,,2,,ANY
25769804561,BLOCK,1,,"{ ids: [newTenant], userIds: [newUser] }",61,,198,,,3,,ANY
25769804562,BLOCK,2,,[newTenant],68,,198,,,2,,ANY
25769804563,BLOCK,2,,[newUser],90,,198,,,2,,ANY
25769804564,BLOCK,1,,"new ForbiddenException('Invalid Tenant!', {
        cause: new Error(),
        description: `Invalid Tenant ${newTenant}!`,
      })",12,,202,,,1,,ANY
25769804565,BLOCK,2,,"{
        cause: new Error(),
        description: `Invalid Tenant ${newTenant}!`,
      }",54,,202,,,4,,ANY
25769804566,BLOCK,2,,new Error(),15,,203,,,2,,ANY
25769804567,BLOCK,-1,,tenantType.id,70,,208,,,3,,ANY
25769804568,BLOCK,-1,,"{
      const foundRole = await this.rolesService.findByMany({ ids: [roleId], tenantTypesIds: tenantTypes });
      if (foundRole.length <= 0) {
        this.logger.error('Invalid Role or is not registered for that tenant type');
        throw new NotFoundException('Invalid Role or is not registered for that tenant type', {
          cause: new Error(),
          description: `Invalid Role ${roleId} or is not registered for that tenant type ${tenantTypes}`,
        });
      }
      userRoleByTenantsToUpdate.role = foundRole[0];
    }",16,,212,,,2,,ANY
25769804569,BLOCK,1,,"{ ids: [roleId], tenantTypesIds: tenantTypes }",59,,213,,,3,,ANY
25769804570,BLOCK,2,,[roleId],66,,213,,,2,,ANY
25769804571,BLOCK,1,,"new NotFoundException('Invalid Role or is not registered for that tenant type', {
          cause: new Error(),
          description: `Invalid Role ${roleId} or is not registered for that tenant type ${tenantTypes}`,
        })",14,,216,,,1,,ANY
25769804572,BLOCK,2,,"{
          cause: new Error(),
          description: `Invalid Role ${roleId} or is not registered for that tenant type ${tenantTypes}`,
        }",94,,216,,,4,,ANY
25769804573,BLOCK,2,,new Error(),17,,217,,,2,,ANY
25769804574,BLOCK,-1,,"{
      const foundRoleAlias = await this.roleAliasService.findByMany({ ids: [roleAliasId], roleIds: [newRole] });
      if (foundRoleAlias.length <= 0) {
        this.logger.error('Invalid Role Alias or is not registered for the selected role');
        throw new NotFoundException('Invalid Role Alias or is not registered for the selected role', {
          cause: new Error(),
          description: `Invalid Role Alias ${roleAliasId} or is not registered for the selected role ${newRole}`,
        });
      }
      userRoleByTenantsToUpdate.roleAlias = foundRoleAlias[0];
    }",21,,224,,,2,,ANY
25769804575,BLOCK,1,,"{ ids: [roleAliasId], roleIds: [newRole] }",68,,225,,,3,,ANY
25769804576,BLOCK,2,,[roleAliasId],75,,225,,,2,,ANY
25769804577,BLOCK,2,,[newRole],99,,225,,,2,,ANY
25769804578,BLOCK,1,,"new NotFoundException('Invalid Role Alias or is not registered for the selected role', {
          cause: new Error(),
          description: `Invalid Role Alias ${roleAliasId} or is not registered for the selected role ${newRole}`,
        })",14,,228,,,1,,ANY
25769804579,BLOCK,2,,"{
          cause: new Error(),
          description: `Invalid Role Alias ${roleAliasId} or is not registered for the selected role ${newRole}`,
        }",101,,228,,,4,,ANY
25769804580,BLOCK,2,,new Error(),17,,229,,,2,,ANY
25769804581,BLOCK,1,,"{
      tenantIds: [newTenant],
      userIds: [newUser],
      roleIds: [newRole],
    }",64,,236,,,3,,ANY
25769804582,BLOCK,2,,[newTenant],17,,237,,,2,,ANY
25769804583,BLOCK,2,,[newUser],15,,238,,,2,,ANY
25769804584,BLOCK,2,,[newRole],15,,239,,,2,,ANY
25769804585,BLOCK,1,,"new ForbiddenException('Violation of unique constraint', {
            cause: new Error(),
            description: `There is a role ${newRole} with that user ${newUser} in the tenant ${newTenant}, and needs to be unique`,
          })",16,,248,,,1,,ANY
25769804586,BLOCK,2,,"{
            cause: new Error(),
            description: `There is a role ${newRole} with that user ${newUser} in the tenant ${newTenant}, and needs to be unique`,
          }",73,,248,,,4,,ANY
25769804587,BLOCK,2,,new Error(),19,,249,,,2,,ANY
25769804588,BLOCK,-1,,"{
        if (existingRole.id !== userRoleByTenantsToUpdate.id) {
          this.logger.error(
            `There is a role ${newRole} with that user ${newUser} in the tenant ${newTenant}, and needs to be unique`,
          );
          throw new ForbiddenException('Violation of unique constraint', {
            cause: new Error(),
            description: `There is a role ${newRole} with that user ${newUser} in the tenant ${newTenant}, and needs to be unique`,
          });
        }
      }",62,,243,,,3,,ANY
25769804589,BLOCK,-1,,"{
          this.logger.error(
            `There is a role ${newRole} with that user ${newUser} in the tenant ${newTenant}, and needs to be unique`,
          );
          throw new ForbiddenException('Violation of unique constraint', {
            cause: new Error(),
            description: `There is a role ${newRole} with that user ${newUser} in the tenant ${newTenant}, and needs to be unique`,
          });
        }",62,,244,,,2,,ANY
25769804590,BLOCK,-1,,"{
      this.logger.error('Property to update not found');
      throw new NotFoundException('Not found', {
        cause: new Error(),
        description: `Property to update not found`,
      });
    }",36,,172,,,2,,ANY
25769804591,BLOCK,-1,,"{
        this.logger.error('Invalid User or is not registered for that Tenant');
        throw new NotFoundException('Invalid User or is not registered for that Tenant', {
          cause: new Error(),
          description: `Invalid User ${userId} or is not registered for Tenant ${tenantId}`,
        });
      }",33,,188,,,2,,ANY
25769804592,BLOCK,-1,,"{
      this.logger.error('Invalid Tenant!');
      throw new ForbiddenException('Invalid Tenant!', {
        cause: new Error(),
        description: `Invalid Tenant ${newTenant}!`,
      });
    }",33,,200,,,2,,ANY
25769804593,BLOCK,-1,,"{
        this.logger.error('Invalid Role or is not registered for that tenant type');
        throw new NotFoundException('Invalid Role or is not registered for that tenant type', {
          cause: new Error(),
          description: `Invalid Role ${roleId} or is not registered for that tenant type ${tenantTypes}`,
        });
      }",33,,214,,,2,,ANY
25769804594,BLOCK,-1,,"{
        this.logger.error('Invalid Role Alias or is not registered for the selected role');
        throw new NotFoundException('Invalid Role Alias or is not registered for the selected role', {
          cause: new Error(),
          description: `Invalid Role Alias ${roleAliasId} or is not registered for the selected role ${newRole}`,
        });
      }",38,,226,,,2,,ANY
25769804595,BLOCK,-1,,"{
      existingRoleByTenantsToUpdate.forEach((existingRole) => {
        if (existingRole.id !== userRoleByTenantsToUpdate.id) {
          this.logger.error(
            `There is a role ${newRole} with that user ${newUser} in the tenant ${newTenant}, and needs to be unique`,
          );
          throw new ForbiddenException('Violation of unique constraint', {
            cause: new Error(),
            description: `There is a role ${newRole} with that user ${newUser} in the tenant ${newTenant}, and needs to be unique`,
          });
        }
      });
    }",83,,242,,,2,,ANY
25769804596,BLOCK,-1,,"{
    this.logger.log(`Enabling / Disabling User Role By Tenant with id: ${id}.`);
    const userRoleByTenantsToDisable = await this.userRoleByTenantsRepository
      .createQueryBuilder('userRoleByTenants')
      .leftJoinAndSelect('userRoleByTenants.tenant', 'tenant')
      .leftJoinAndSelect('userRoleByTenants.user', 'user')
      .leftJoinAndSelect('userRoleByTenants.role', 'role')
      .leftJoinAndSelect('userRoleByTenants.roleAlias', 'roleAlias')
      .andWhere('userRoleByTenants.id = :id', { id })
      .getOne();

    if (!userRoleByTenantsToDisable) {
      this.logger.error('Property to disble/enable not found');
      throw new NotFoundException('Not found', {
        cause: new Error(),
        description: `Property to disable/enable not found`,
      });
    }
    userRoleByTenantsToDisable.enabled = !userRoleByTenantsToDisable.enabled;
    this.logger.log(
      `User Role By Tenant with id: ${id} was ` + (userRoleByTenantsToDisable.enabled ? 'Enabled!' : 'Disabled!...",27,,260,,,3,,ANY
25769804597,BLOCK,2,,{ id },46,,268,,,4,,ANY
25769804598,BLOCK,1,,"new NotFoundException('Not found', {
        cause: new Error(),
        description: `Property to disable/enable not found`,
      })",12,,273,,,1,,ANY
25769804599,BLOCK,2,,"{
        cause: new Error(),
        description: `Property to disable/enable not found`,
      }",47,,273,,,4,,ANY
25769804600,BLOCK,2,,new Error(),15,,274,,,2,,ANY
25769804601,BLOCK,-1,,"{
      this.logger.error('Property to disble/enable not found');
      throw new NotFoundException('Not found', {
        cause: new Error(),
        description: `Property to disable/enable not found`,
      });
    }",37,,271,,,2,,ANY
25769804602,BLOCK,3,,"import { Injectable, Logger, ForbiddenException, NotFoundException, Inject, forwardRef } from '@nestjs/common';",0,,3,,,3,,ANY
25769804603,BLOCK,13,,"@Injectable()
export class UserRoleByTenantsService {
  private readonly logger = new Logger(UserRoleByTenantsService.name);

  constructor(
    @InjectRepository(UserRoleByTenants, dbConfig.name)
    private readonly userRoleByTenantsRepository: Repository<UserRoleByTenants>,

    @Inject(forwardRef(() => UsersService))
    private readonly usersService: UsersService,

    @Inject(forwardRef(() => TenantsService))
    private readonly tenantsService: TenantsService,

    @Inject(forwardRef(() => RolesService))
    private readonly rolesService: RolesService,

    @Inject(forwardRef(() => RoleAliasesService))
    private readonly roleAliasService: RoleAliasesService,
  ) {}

  async create({ userId, tenantId, roleId, roleAliasId, enabled }: CreateUserRoleByTenantsDto) {
    const newUserRoleByTenants = this.userRoleByTenantsRepository.create();

    this.logger.log(`Finding user ${userId} in tenant ${tenantId} ...`);
    const foundUser = await this.usersService.findByMany({ ids: [u...",0,,14,,,13,,ANY
25769804604,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804605,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804606,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,47,,,2,,ANY
25769804607,BLOCK,2,,[Number],39,,47,,,2,,ANY
25769804608,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,50,,,2,,ANY
25769804609,BLOCK,2,,[Number],39,,50,,,2,,ANY
25769804610,BLOCK,4,,"import { IsEmail, IsNotEmpty, IsOptional, Length } from 'class-validator';",0,,4,,,4,,ANY
25769804611,BLOCK,5,,"export class CreateUserDto implements Omit<UserDto, 'id' | 'createdAt' | 'updatedAt'> {
  @IsNotEmpty()
  @Length(2, 200)
  @ApiProperty()
  firstName: string;

  @IsNotEmpty()
  @Length(2, 200)
  @ApiProperty()
  lastName: string;

  @IsNotEmpty()
  @Length(2, 200)
  @ApiProperty()
  fireBaseId?: string;

  @ApiProperty()
  validated: boolean;

  @ApiProperty()
  BackOfficeAccess?: boolean;

  @ApiProperty()
  typeOfUser?: TypeOfUser;

  @ApiProperty()
  SaasAccess?: boolean;

  @IsNotEmpty()
  @IsEmail()
  @Length(2, 200)
  @ApiProperty()
  email: string;

  @IsOptional()
  @ApiProperty()
  phone: string;

  @ApiProperty()
  enabled?: boolean;

  @ApiProperty({ nullable: true, type: [Number] })
  tenantsIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  userRoleByTenantsIds?: number[];
}",0,,6,,,5,,ANY
25769804612,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804613,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804614,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,6,,,2,,ANY
25769804615,BLOCK,2,,[Number],39,,6,,,2,,ANY
25769804616,BLOCK,2,,"{ nullable: true, type: [String] }",15,,9,,,2,,ANY
25769804617,BLOCK,2,,[String],39,,9,,,2,,ANY
25769804618,BLOCK,2,,"{ nullable: true, type: [String] }",15,,12,,,2,,ANY
25769804619,BLOCK,2,,[String],39,,12,,,2,,ANY
25769804620,BLOCK,2,,"{ nullable: true, type: [String] }",15,,33,,,2,,ANY
25769804621,BLOCK,2,,[String],39,,33,,,2,,ANY
25769804622,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,39,,,2,,ANY
25769804623,BLOCK,2,,[Number],39,,39,,,2,,ANY
25769804624,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,42,,,2,,ANY
25769804625,BLOCK,2,,[Number],39,,42,,,2,,ANY
25769804626,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,45,,,2,,ANY
25769804627,BLOCK,2,,[Number],39,,45,,,2,,ANY
25769804628,BLOCK,1,,"import { ApiProperty, PartialType } from '@nestjs/swagger';",0,,1,,,1,,ANY
25769804629,BLOCK,4,,"export class FindUserDto extends PartialType(CreateUserDto) {
  @ApiProperty({ nullable: true, type: [Number] })
  ids?: number[];

  @ApiProperty({ nullable: true, type: [String] })
  firstNames?: string[];

  @ApiProperty({ nullable: true, type: [String] })
  lastNames?: string[];

  @ApiProperty()
  fireBaseId?: string;

  @ApiProperty()
  validated?: boolean;

  @ApiProperty()
  BackOfficeAccess?: boolean;

  @ApiProperty()
  typeOfUser?: TypeOfUser;

  @ApiProperty()
  SaasAccess?: boolean;

  @ApiProperty()
  temporalId?: string;

  @ApiProperty({ nullable: true, type: [String] })
  emails?: string[];

  @ApiProperty()
  enabled?: boolean;

  @ApiProperty({ nullable: true, type: [Number] })
  tenantsIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  userRoleByTenantsIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  recordTypeIds?: number[];
}",0,,5,,,4,,ANY
25769804630,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804631,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804632,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,46,,,2,,ANY
25769804633,BLOCK,2,,[Number],39,,46,,,2,,ANY
25769804634,BLOCK,2,,"{ nullable: true, type: [Number] }",15,,49,,,2,,ANY
25769804635,BLOCK,2,,[Number],39,,49,,,2,,ANY
25769804636,BLOCK,2,,{ nullable: true },15,,52,,,2,,ANY
25769804637,BLOCK,1,,"import { ApiProperty, PartialType } from '@nestjs/swagger';",0,,1,,,1,,ANY
25769804638,BLOCK,3,,"import { IsEmail, IsNotEmpty, Length } from 'class-validator';",0,,3,,,3,,ANY
25769804639,BLOCK,5,,"export class UpdateUserDto extends PartialType(CreateUserDto) {
  @IsNotEmpty()
  @Length(2, 200)
  @ApiProperty()
  firstName: string;

  @IsNotEmpty()
  @Length(2, 200)
  @ApiProperty()
  lastName: string;

  @IsNotEmpty()
  @Length(2, 200)
  @ApiProperty()
  fireBaseId?: string;

  @ApiProperty()
  validated: boolean;

  @ApiProperty()
  BackOfficeAccess?: boolean;

  @ApiProperty()
  typeOfUser?: TypeOfUser;

  @ApiProperty()
  SaasAccess?: boolean;

  @IsNotEmpty()
  @IsEmail()
  @Length(2, 200)
  @ApiProperty()
  email: string;

  @ApiProperty()
  phone: string;

  @ApiProperty()
  enabled?: boolean;

  @ApiProperty({ nullable: true, type: [Number] })
  tenantsIds?: number[];

  @ApiProperty({ nullable: true, type: [Number] })
  userRoleByTenantsIds?: number[];

  @ApiProperty({ nullable: true })
  temporalId?: string;
}",0,,6,,,5,,ANY
25769804640,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804641,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804642,BLOCK,2,,"export class UserDto {
  id: number;
  firstName: string;
  lastName: string;
  fireBaseId?: string;
  validated: boolean;
  BackOfficeAccess?: boolean;
  typeOfUser?: TypeOfUser;
  SaasAccess?: boolean;
  email: string;
  enabled?: boolean;
  createdAt: Date;
  updatedAt: Date;
  tenantsIds?: number[];
  userRoleByTenantsIds?: number[];
}",0,,3,,,2,,ANY
25769804643,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804644,BLOCK,2,,"{
  firstName: 'Robert',
  lastName: 'Smith',
  validated: false,
  BackOfficeAccess: false,
  typeOfUser: TypeOfUser.Client,
  SaasAccess: true,
  email: 'robertsmith@gmail.com',
  enabled: true,
  tenantsIds: [1],
  userRoleByTenantsIds: [1, 47],
  phone: '3198725234',
}",45,,7,,,2,,ANY
25769804645,BLOCK,2,,[1],14,,16,,,2,,ANY
25769804646,BLOCK,2,,"[1, 47]",24,,17,,,2,,ANY
25769804647,BLOCK,2,,"{
  firstName: 'Robert',
  lastName: 'Smith',
  validated: false,
  BackOfficeAccess: false,
  typeOfUser: TypeOfUser.Client,
  SaasAccess: true,
  enabled: true,
  tenantsIds: [1],
  email: '',
  phone: '',
}",45,,21,,,2,,ANY
25769804648,BLOCK,2,,[1],14,,29,,,2,,ANY
25769804649,BLOCK,2,,"{
  id: 1,
  firstName: 'Robert',
  lastName: 'Smith',
  validated: false,
  BackOfficeAccess: false,
  SaasAccess: true,
  email: 'robertsmith@gmail.com',
  enabled: true,
  tenants: [{ id: 1 }],
  createdAt: new Date(),
  updatedAt: new Date(),
  fireBaseId: '',
}",26,,91,,,2,,ANY
25769804650,BLOCK,2,,[{ id: 1 }],11,,100,,,2,,ANY
25769804651,BLOCK,1,,{ id: 1 },12,,100,,,3,,ANY
25769804652,BLOCK,2,,new Date(),13,,101,,,2,,ANY
25769804653,BLOCK,2,,new Date(),13,,102,,,2,,ANY
25769804654,BLOCK,1,,"import { Role, User } from '@avantodev/avanto-db';",0,,1,,,1,,ANY
25769804655,BLOCK,6,,"export const createUserMock: CreateUserDto = {
  firstName: 'Robert',
  lastName: 'Smith',
  validated: false,
  BackOfficeAccess: false,
  typeOfUser: TypeOfUser.Client,
  SaasAccess: true,
  email: 'robertsmith@gmail.com',
  enabled: true,
  tenantsIds: [1],
  userRoleByTenantsIds: [1, 47],
  phone: '3198725234',
};",0,,7,,,6,,ANY
25769804656,BLOCK,7,,"export const updateUserMock: UpdateUserDto = {
  firstName: 'Robert',
  lastName: 'Smith',
  validated: false,
  BackOfficeAccess: false,
  typeOfUser: TypeOfUser.Client,
  SaasAccess: true,
  enabled: true,
  tenantsIds: [1],
  email: '',
  phone: '',
};",0,,21,,,7,,ANY
25769804657,BLOCK,8,,"export const fetchedRolesMock: Role[] = JSON.parse(`[
  {
    ""id"": ""1"",
    ""name"": ""Administrator"",
    ""description"": ""Super administrators"",
    ""tag"": ""god""
  },
  {
    ""id"": ""41"",
    ""name"": ""Role C"",
    ""description"": ""Role C"",
    ""tag"": ""role c""
  },
  {
    ""id"": ""43"",
    ""name"": ""Role 1943"",
    ""description"": ""Role 1943"",
    ""tag"": ""1943""
  },
  {
    ""id"": ""44"",
    ""name"": ""Integration Role"",
    ""description"": ""Integration Role"",
    ""tag"": ""integration role""
  },
  {
    ""id"": ""42"",
    ""name"": ""Role D"",
    ""description"": ""role D"",
    ""tag"": ""role_d""
  },
  {
    ""id"": ""40"",
    ""name"": ""Role B"",
    ""description"": ""role b"",
    ""tag"": ""role_b""
  },
  {
    ""id"": ""46"",
    ""name"": ""Test Qa2"",
    ""description"": ""test"",
    ""tag"": ""test2""
  },
  {
    ""id"": ""45"",
    ""name"": ""Test Qa"",
    ""description"": ""test"",
    ""tag"": ""test""
  },
  {
    ""id"": ""47"",
    ""name"": ""Test Qa 382024"",
    ""description"": ""test"",
    ""tag"": ""test qa""
  }
]`);",0,,34,,,8,,ANY
25769804658,BLOCK,9,,"export const myMockUser = {
  id: 1,
  firstName: 'Robert',
  lastName: 'Smith',
  validated: false,
  BackOfficeAccess: false,
  SaasAccess: true,
  email: 'robertsmith@gmail.com',
  enabled: true,
  tenants: [{ id: 1 }],
  createdAt: new Date(),
  updatedAt: new Date(),
  fireBaseId: '',
};",0,,91,,,9,,ANY
25769804659,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804660,BLOCK,2,,new Logger(UserVerificationService.name),28,,14,,,2,,ANY
25769804661,BLOCK,-1,,{},4,,21,,,5,,ANY
25769804662,BLOCK,-1,,"{
    this.logger.log(`Sending verification email to user with temporalId: ${temporalId}`);
    
    // Find user by temporalId
    const user = await this.userRepository
      .createQueryBuilder('user')
      .leftJoinAndSelect('user.tenants', 'tenants')
      .where('user.temporalId = :temporalId', { temporalId })
      .getOne();

    if (!user) {
      this.logger.error(`User with temporalId ${temporalId} not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} not found`,
      });
    }

    // Check if the user is already verified
    if (user.validated) {
      this.logger.error(`User with temporalId ${temporalId} is already verified`);
      throw new ForbiddenException('User is already verified', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} is already verified`,
      });
    }

    // Check if the user has associated tenants
    if (!(u...",68,,28,,,3,,ANY
25769804663,BLOCK,2,,{ temporalId },46,,35,,,4,,ANY
25769804664,BLOCK,1,,"new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} not found`,
      })",12,,40,,,1,,ANY
25769804665,BLOCK,2,,"{
        cause: new Error(),
        description: `User with temporalId ${temporalId} not found`,
      }",52,,40,,,4,,ANY
25769804666,BLOCK,2,,new Error(),15,,41,,,2,,ANY
25769804667,BLOCK,1,,"new ForbiddenException('User is already verified', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} is already verified`,
      })",12,,49,,,1,,ANY
25769804668,BLOCK,2,,"{
        cause: new Error(),
        description: `User with temporalId ${temporalId} is already verified`,
      }",63,,49,,,4,,ANY
25769804669,BLOCK,2,,new Error(),15,,50,,,2,,ANY
25769804670,BLOCK,1,,"new ForbiddenException('User has no tenants associated', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} has no tenants associated`,
      })",12,,58,,,1,,ANY
25769804671,BLOCK,2,,"{
        cause: new Error(),
        description: `User with temporalId ${temporalId} has no tenants associated`,
      }",69,,58,,,4,,ANY
25769804672,BLOCK,2,,new Error(),15,,59,,,2,,ANY
25769804673,BLOCK,1,,{ ids: user.tenants.map(tenant => tenant.id) },55,,65,,,3,,ANY
25769804674,BLOCK,-1,,tenant.id,89,,65,,,3,,ANY
25769804675,BLOCK,2,,new Date(),24,,76,,,2,,ANY
25769804676,BLOCK,-1,,"{
      this.logger.error(`User with temporalId ${temporalId} not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} not found`,
      });
    }",15,,38,,,2,,ANY
25769804677,BLOCK,-1,,"{
      this.logger.error(`User with temporalId ${temporalId} is already verified`);
      throw new ForbiddenException('User is already verified', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} is already verified`,
      });
    }",24,,47,,,2,,ANY
25769804678,BLOCK,-1,,"{
      this.logger.error(`User with temporalId ${temporalId} has no tenants associated`);
      throw new ForbiddenException('User has no tenants associated', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} has no tenants associated`,
      });
    }",52,,56,,,2,,ANY
25769804679,BLOCK,-1,,"{
      this.logger.log(`Verification email sent successfully to ${user.email}`);
      user.verifiedAt = new Date();
      await this.userRepository.save(user);
      return true;
    }",19,,74,,,2,,ANY
25769804680,BLOCK,-1,,"{
      this.logger.error(`Failed to send verification email to ${user.email}`);
      return false;
    }",11,,79,,,3,,ANY
25769804681,BLOCK,-1,,"{
    this.logger.log(`Verifying user with temporalId: ${temporalId}`);
    
    // Find user by temporalId
    const user = await this.userRepository
      .createQueryBuilder('user')
      .where('user.temporalId = :temporalId', { temporalId })
      .getOne();

    if (!user) {
      this.logger.error(`User with temporalId ${temporalId} not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} not found`,
      });
    }

    // Check if the user is already verified
    if (user.validated) {
      this.logger.error(`User with temporalId ${temporalId} is already verified`);
      throw new ForbiddenException('User is already verified', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} is already verified`,
      });
    }

    // Mark user as validated
    user.validated = true;
    user.verifiedAt = new Date();
    
    // Save changes
    this.logger...",54,,90,,,3,,ANY
25769804682,BLOCK,2,,{ temporalId },46,,96,,,4,,ANY
25769804683,BLOCK,1,,"new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} not found`,
      })",12,,101,,,1,,ANY
25769804684,BLOCK,2,,"{
        cause: new Error(),
        description: `User with temporalId ${temporalId} not found`,
      }",52,,101,,,4,,ANY
25769804685,BLOCK,2,,new Error(),15,,102,,,2,,ANY
25769804686,BLOCK,1,,"new ForbiddenException('User is already verified', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} is already verified`,
      })",12,,110,,,1,,ANY
25769804687,BLOCK,2,,"{
        cause: new Error(),
        description: `User with temporalId ${temporalId} is already verified`,
      }",63,,110,,,4,,ANY
25769804688,BLOCK,2,,new Error(),15,,111,,,2,,ANY
25769804689,BLOCK,2,,new Date(),22,,118,,,2,,ANY
25769804690,BLOCK,-1,,"{
      this.logger.error(`User with temporalId ${temporalId} not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} not found`,
      });
    }",15,,99,,,2,,ANY
25769804691,BLOCK,-1,,"{
      this.logger.error(`User with temporalId ${temporalId} is already verified`);
      throw new ForbiddenException('User is already verified', {
        cause: new Error(),
        description: `User with temporalId ${temporalId} is already verified`,
      });
    }",24,,108,,,2,,ANY
25769804692,BLOCK,-1,,"{
    this.logger.log(`Sending MFA attempt email to user with id: ${userId}`);
    
    // Find user by ID
    const user = await this.userRepository.findOneBy({ id: userId });

    if (!user) {
      this.logger.error(`User with id ${userId} not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with id ${userId} not found`,
      });
    }

    // Get email template
    const template = this.emailProvider.getMfaAttemptTemplate(user);
    
    // Send the email
    this.logger.log(`Sending MFA attempt email to ${user.email}`);
    const emailSent = await this.emailProvider.sendEmail(user.email, template.subject, template.body);
    
    if (emailSent) {
      this.logger.log(`MFA attempt email sent successfully to ${user.email}`);
      return true;
    } else {
      this.logger.error(`Failed to send MFA attempt email to ${user.email}`);
      return false;
    }
  }",62,,130,,,3,,ANY
25769804693,BLOCK,1,,{ id: userId },53,,134,,,3,,ANY
25769804694,BLOCK,1,,"new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with id ${userId} not found`,
      })",12,,138,,,1,,ANY
25769804695,BLOCK,2,,"{
        cause: new Error(),
        description: `User with id ${userId} not found`,
      }",52,,138,,,4,,ANY
25769804696,BLOCK,2,,new Error(),15,,139,,,2,,ANY
25769804697,BLOCK,-1,,"{
      this.logger.error(`User with id ${userId} not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with id ${userId} not found`,
      });
    }",15,,136,,,2,,ANY
25769804698,BLOCK,-1,,"{
      this.logger.log(`MFA attempt email sent successfully to ${user.email}`);
      return true;
    }",19,,151,,,2,,ANY
25769804699,BLOCK,-1,,"{
      this.logger.error(`Failed to send MFA attempt email to ${user.email}`);
      return false;
    }",11,,154,,,3,,ANY
25769804700,BLOCK,-1,,"{
    this.logger.log(`Sending MFA success email to user with id: ${userId}`);
    
    // Find user by ID
    const user = await this.userRepository.findOneBy({ id: userId });

    if (!user) {
      this.logger.error(`User with id ${userId} not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with id ${userId} not found`,
      });
    }

    // Get email template
    const template = this.emailProvider.getMfaSuccessTemplate(user);
    
    // Send the email
    this.logger.log(`Sending MFA success email to ${user.email}`);
    const emailSent = await this.emailProvider.sendEmail(user.email, template.subject, template.body);
    
    if (emailSent) {
      this.logger.log(`MFA success email sent successfully to ${user.email}`);
      return true;
    } else {
      this.logger.error(`Failed to send MFA success email to ${user.email}`);
      return false;
    }
  }",62,,165,,,3,,ANY
25769804701,BLOCK,1,,{ id: userId },53,,169,,,3,,ANY
25769804702,BLOCK,1,,"new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with id ${userId} not found`,
      })",12,,173,,,1,,ANY
25769804703,BLOCK,2,,"{
        cause: new Error(),
        description: `User with id ${userId} not found`,
      }",52,,173,,,4,,ANY
25769804704,BLOCK,2,,new Error(),15,,174,,,2,,ANY
25769804705,BLOCK,-1,,"{
      this.logger.error(`User with id ${userId} not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `User with id ${userId} not found`,
      });
    }",15,,171,,,2,,ANY
25769804706,BLOCK,-1,,"{
      this.logger.log(`MFA success email sent successfully to ${user.email}`);
      return true;
    }",19,,186,,,2,,ANY
25769804707,BLOCK,-1,,"{
      this.logger.error(`Failed to send MFA success email to ${user.email}`);
      return false;
    }",11,,189,,,3,,ANY
25769804708,BLOCK,1,,"import { Injectable, Logger, NotFoundException, ForbiddenException } from '@nestjs/common';",0,,1,,,1,,ANY
25769804709,BLOCK,8,,"@Injectable()
export class UserVerificationService {
  private readonly logger = new Logger(UserVerificationService.name);

  constructor(
    @InjectRepository(User, dbConfig.name)
    private readonly userRepository: Repository<User>,
    private readonly tenantService: TenantsService,
    private readonly emailProvider: EmailProvider,
  ) {}

  /**
   * Sends a verification email to the user
   * @param temporalId User's temporal ID
   * @returns Boolean indicating success
   */
  async sendVerificationEmail(temporalId: string): Promise<boolean> {
    this.logger.log(`Sending verification email to user with temporalId: ${temporalId}`);
    
    // Find user by temporalId
    const user = await this.userRepository
      .createQueryBuilder('user')
      .leftJoinAndSelect('user.tenants', 'tenants')
      .where('user.temporalId = :temporalId', { temporalId })
      .getOne();

    if (!user) {
      this.logger.error(`User with temporalId ${temporalId} not found`);
      throw new...",0,,12,,,8,,ANY
25769804710,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804711,BLOCK,2,,new Logger(UsersService.name),28,,43,,,2,,ANY
25769804712,BLOCK,-1,,TenantsService,29,,38,,,2,,ANY
25769804713,BLOCK,-1,,{},4,,41,,,6,,ANY
25769804714,BLOCK,-1,,"{
    this.logger.log('Creating new User...');

    const { email, firstName, lastName, tenantsIds, userRoleByTenantsIds, phone } = createUserDto;
    let foundTenants: Tenant[] = [];
    let foundRoles: Role[] = [];

    if (payload){
      const userCreator = await this.findOne(payload.userId);

      if (payload.issuer === IssuerEnum.Saas && userCreator.typeOfUser === TypeOfUser.Client  && createUserDto.typeOfUser === TypeOfUser.AvantoEmployee && !userCreator.BackOfficeAccess) {
        this.logger.error(`Action not allowed for typeOfUser: ${userCreator.typeOfUser}`);
        throw new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        });
      }
    }
    
    const existingTenantEmail = await this.userRepository.findOneBy({ email });
    if (existingTenantEmail) {
      this.logger.error(`The email ...",70,,46,,,4,,ANY
25769804715,BLOCK,2,,"const { email, firstName, lastName, tenantsIds, userRoleByTenantsIds, phone } = createUserDto",10,,49,,,2,,ANY
25769804716,BLOCK,-1,,"{
      const userCreator = await this.findOne(payload.userId);

      if (payload.issuer === IssuerEnum.Saas && userCreator.typeOfUser === TypeOfUser.Client  && createUserDto.typeOfUser === TypeOfUser.AvantoEmployee && !userCreator.BackOfficeAccess) {
        this.logger.error(`Action not allowed for typeOfUser: ${userCreator.typeOfUser}`);
        throw new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        });
      }
    }",16,,53,,,2,,ANY
25769804717,BLOCK,1,,"new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        })",14,,58,,,1,,ANY
25769804718,BLOCK,2,,"{
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        }",79,,58,,,4,,ANY
25769804719,BLOCK,2,,new Error(),17,,59,,,2,,ANY
25769804720,BLOCK,1,,{ email },68,,65,,,3,,ANY
25769804721,BLOCK,1,,"new ForbiddenException('email is already in use', {
        cause: new Error(),
        description: `The email ${email} is already used and needs to be unique`,
      })",12,,68,,,1,,ANY
25769804722,BLOCK,2,,"{
        cause: new Error(),
        description: `The email ${email} is already used and needs to be unique`,
      }",62,,68,,,4,,ANY
25769804723,BLOCK,2,,new Error(),15,,69,,,2,,ANY
25769804724,BLOCK,-1,,"{
      const isTakenPhone = await this.userRepository.findOneBy({ phone });
      if (isTakenPhone) {
        throw new ForbiddenException('phone is already in use');
      }
    }",15,,73,,,2,,ANY
25769804725,BLOCK,1,,{ phone },63,,74,,,3,,ANY
25769804726,BLOCK,1,,new ForbiddenException('phone is already in use'),14,,76,,,1,,ANY
25769804727,BLOCK,1,,"new BadRequestException('Invalid typeOfUser value', {
          cause: new Error(),
          description: `The typeOfUser value ${createUserDto.typeOfUser} is invalid`,
        })",14,,87,,,1,,ANY
25769804728,BLOCK,2,,"{
          cause: new Error(),
          description: `The typeOfUser value ${createUserDto.typeOfUser} is invalid`,
        }",66,,87,,,4,,ANY
25769804729,BLOCK,2,,new Error(),17,,88,,,2,,ANY
25769804730,BLOCK,1,,{ ids: tenantsIds },56,,95,,,3,,ANY
25769804731,BLOCK,2,,{ userRoleByTenantsIds },36,,132,,,4,,ANY
25769804732,BLOCK,1,,"new NotFoundException('Role  not found', {
          cause: new Error(),
          description: `The role with id ${tenantsIds} was not found`,
        })",14,,136,,,1,,ANY
25769804733,BLOCK,2,,"{
          cause: new Error(),
          description: `The role with id ${tenantsIds} was not found`,
        }",55,,136,,,4,,ANY
25769804734,BLOCK,2,,new Error(),17,,137,,,2,,ANY
25769804735,BLOCK,1,,"{
      ...createUserDto,
      tenants: foundTenants,
      firstName: firstName.trim(),
      lastName: lastName.trim(),
      email: email.trim().toLowerCase(),
    }",53,,142,,,3,,ANY
25769804736,BLOCK,-1,,"{
        this.logger.error(`Action not allowed for typeOfUser: ${userCreator.typeOfUser}`);
        throw new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        });
      }",186,,56,,,2,,ANY
25769804737,BLOCK,-1,,"{
      this.logger.error(`The email ${email} is already used and needs to be unique`);
      throw new ForbiddenException('email is already in use', {
        cause: new Error(),
        description: `The email ${email} is already used and needs to be unique`,
      });
    }",29,,66,,,2,,ANY
25769804738,BLOCK,-1,,"{
        throw new ForbiddenException('phone is already in use');
      }",24,,75,,,2,,ANY
25769804739,BLOCK,-1,,"{
      createUserDto.typeOfUser = TypeOfUser.Client;
    }",35,,80,,,2,,ANY
25769804740,BLOCK,-1,,"{
      if (!Object.values(TypeOfUser).includes(createUserDto.typeOfUser)) {
        this.logger.error(`Invalid typeOfUser: ${createUserDto.typeOfUser}`);
        throw new BadRequestException('Invalid typeOfUser value', {
          cause: new Error(),
          description: `The typeOfUser value ${createUserDto.typeOfUser} is invalid`,
        });
      }
    }",34,,84,,,2,,ANY
25769804741,BLOCK,-1,,"{
        this.logger.error(`Invalid typeOfUser: ${createUserDto.typeOfUser}`);
        throw new BadRequestException('Invalid typeOfUser value', {
          cause: new Error(),
          description: `The typeOfUser value ${createUserDto.typeOfUser} is invalid`,
        });
      }",73,,85,,,2,,ANY
25769804742,BLOCK,-1,,"{
      foundTenants = await this.tenantService.findByIds({ ids: tenantsIds });
      // if (!process.env.TENANTS_MS_URL) {
      //   this.logger.error(`Missing TENANTS_MS_URL env variable`);
      //   throw new NotFoundException('Role  not found', {
      //     cause: new Error(),
      //     description: `Missing TENANTS_MS_URL env variable`,
      //   });
      // }
      // const url = process.env.TENANTS_MS_URL + 'tenants/many';
      // try {
      //   this.logger.log(`looking for tenant with id:${tenantsIds} in the microservice: ${url}`);
      //   foundTenants = await fetchTenants({ ids: tenantsIds }, url);
      //   if (foundTenants.length < 1) {
      //     this.logger.error(`The tenant with id ${tenantsIds} was not found`);
      //     throw new NotFoundException('Tenant  not found', {
      //       cause: new Error(),
      //       description: `The tenant with id ${tenantsIds} was not found`,
      //     });
      //   }
      // } catch (e) {
      //   th...",45,,94,,,2,,ANY
25769804743,BLOCK,-1,,"{
      this.logger.log(`looking for roles with id:${userRoleByTenantsIds}`);
      foundRoles = await this.rolesRepository
        .createQueryBuilder('roles')
        .leftJoinAndSelect('roles.tenantTypes', 'tenantTypes')
        .leftJoinAndSelect('roles.tenantCreator', 'tenantCreator')
        //.leftJoinAndSelect('roles.aliases', 'aliases')
        //.leftJoinAndSelect('roles.roles', 'assignedRoles')
        //.leftJoinAndSelect('roles.gridPreferences', 'gridPreferences')
        //.leftJoinAndSelect('assignedRoles.role', 'role')
        //.leftJoinAndSelect('assignedRoles.user', 'user')
        //.leftJoinAndSelect('assignedRoles.tenant', 'tenant')
        //.leftJoinAndSelect('assignedRoles.roleAlias', 'roleAlias')
        .andWhere('roles.id = :id', { userRoleByTenantsIds })
        .getMany();
      if (foundRoles.length < 1) {
        this.logger.error(`The Role with id ${tenantsIds} was not found`);
        throw new NotFoundException('Role  not found', {
          cause:...",65,,119,,,2,,ANY
25769804744,BLOCK,-1,,"{
        this.logger.error(`The Role with id ${tenantsIds} was not found`);
        throw new NotFoundException('Role  not found', {
          cause: new Error(),
          description: `The role with id ${tenantsIds} was not found`,
        });
      }",33,,134,,,2,,ANY
25769804745,BLOCK,-1,,"{
    this.logger.log('Finding All Users ...');
    this.usersCollection = await this.userRepository
      .createQueryBuilder('users')
      .leftJoinAndSelect('users.tenants', 'tenants')
      .leftJoinAndSelect('users.roles', 'roles')
      .leftJoinAndSelect('roles.role', 'role')
      .leftJoinAndSelect('roles.tenant', 'tenant')
      .leftJoinAndSelect('roles.roleAlias', 'roleAlias')
      .getMany();
    this.logger.log(`Found ${this.usersCollection.length} users`);
    return this.usersCollection;
  }",18,,156,,,2,,ANY
25769804746,BLOCK,2,,{ id },31,,179,,,4,,ANY
25769804747,BLOCK,1,,"new NotFoundException(`Not found any user with id: ${id}`, {
        cause: new Error(),
        description: `Not found any user with id: ${id}`,
      })",12,,182,,,1,,ANY
25769804748,BLOCK,2,,"{
        cause: new Error(),
        description: `Not found any user with id: ${id}`,
      }",71,,182,,,4,,ANY
25769804749,BLOCK,2,,new Error(),15,,183,,,2,,ANY
25769804750,BLOCK,-1,,"{
    this.logger.log(`Looking for user with id: ${id}`);
    this.usersCollection = await this.userRepository
      .createQueryBuilder('users')
      .leftJoinAndSelect('users.tenants', 'tenants')
      .leftJoinAndSelect('users.roles', 'roles')
      .leftJoinAndSelect('roles.role', 'role')
      .leftJoinAndSelect('roles.tenant', 'tenant')
      .leftJoinAndSelect('roles.roleAlias', 'roleAlias')
      .where('users.id = :id', { id })
      .getMany();
    if (this.usersCollection.length <= 0) {
      throw new NotFoundException(`Not found any user with id: ${id}`, {
        cause: new Error(),
        description: `Not found any user with id: ${id}`,
      });
    }
    this.logger.log(`Found ${this.usersCollection.length} users`);
    return this.usersCollection[0];
  }",28,,170,,,3,,ANY
25769804751,BLOCK,-1,,"{
      throw new NotFoundException(`Not found any user with id: ${id}`, {
        cause: new Error(),
        description: `Not found any user with id: ${id}`,
      });
    }",42,,181,,,2,,ANY
25769804752,BLOCK,-1,,"{
    const {
      ids,
      firstNames,
      lastNames,
      enabled,
      emails,
      fireBaseId,
      validated,
      BackOfficeAccess,
      SaasAccess,
      tenantsIds,
      userRoleByTenantsIds,
      recordTypeIds,
      typeOfUser,
      temporalId,
    } = findUserDto;
    this.logger.log(`Finding Users by many args `);
    let query = this.userRepository
      .createQueryBuilder('users')
      .leftJoinAndSelect('users.tenants', 'tenants')
      .leftJoinAndSelect('users.roles', 'roles')
      .leftJoinAndSelect('roles.role', 'role')
      .leftJoinAndSelect('roles.tenant', 'tenant')
      .leftJoinAndSelect('roles.roleAlias', 'roleAlias');

    if (ids && ids.length > 0) {
      this.logger.log(`Finding by ids: ${ids}`);
      query = query.andWhere('users.id IN (:...ids) ', { ids });
    }
    if (firstNames && firstNames.length > 0) {
      this.logger.log(`Finding by firstNames: ${firstNames}`);
      query = query.andWhere('users.firstName IN (:...firstNam...",45,,191,,,3,,ANY
25769804753,BLOCK,1,,"const {
      ids,
      firstNames,
      lastNames,
      enabled,
      emails,
      fireBaseId,
      validated,
      BackOfficeAccess,
      SaasAccess,
      tenantsIds,
      userRoleByTenantsIds,
      recordTypeIds,
      typeOfUser,
      temporalId,
    } = findUserDto",10,,192,,,1,,ANY
25769804754,BLOCK,2,,{ ids },55,,219,,,4,,ANY
25769804755,BLOCK,2,,"{
        firstNames: firstNames.map((name) => name),
      }",69,,223,,,4,,ANY
25769804756,BLOCK,-1,,name,45,,224,,,3,,ANY
25769804757,BLOCK,2,,"{
        lastNames: lastNames.map((name) => name),
      }",67,,229,,,4,,ANY
25769804758,BLOCK,-1,,name,43,,230,,,3,,ANY
25769804759,BLOCK,2,,"{
        emails: emails.map((email) => email.toLowerCase()),
      }",61,,235,,,4,,ANY
25769804760,BLOCK,-1,,email.toLowerCase(),38,,236,,,3,,ANY
25769804761,BLOCK,2,,{ typeOfUser },63,,241,,,4,,ANY
25769804762,BLOCK,2,,{ userRoleByTenantsIds },72,,245,,,4,,ANY
25769804763,BLOCK,2,,{ tenantsIds },64,,249,,,4,,ANY
25769804764,BLOCK,2,,{ temporalId },63,,253,,,4,,ANY
25769804765,BLOCK,2,,{ enabled },58,,257,,,4,,ANY
25769804766,BLOCK,2,,{ validated },62,,262,,,4,,ANY
25769804767,BLOCK,2,,{ BackOfficeAccess },76,,267,,,4,,ANY
25769804768,BLOCK,2,,{ SaasAccess },64,,272,,,4,,ANY
25769804769,BLOCK,2,,{ fireBaseId },64,,277,,,4,,ANY
25769804770,BLOCK,-1,,"{
      this.logger.log(`Finding by recordTypeIds: ${recordTypeIds}`);
      const rolesAccessToRecordType = await this.findByRecordTypeAccess(recordTypeIds);
      if (rolesAccessToRecordType && rolesAccessToRecordType.length > 0) {
        this.logger.log(`Finding by roles: ${rolesAccessToRecordType}`);
        query = query.andWhere('role.id IN (:...roleIds) ', {
          roleIds: rolesAccessToRecordType,
        });
      } else {
        this.logger.log(`Do not found any role access to recordTypeIds: ${recordTypeIds}`);
        this.logger.error(`Do not found any role access to recordTypeIds: ${recordTypeIds}`);
        throw new NotFoundException('Not found any role access to the record type.', {
          cause: new Error(),
          description: `Do not found any role access to recordTypeIds: ${recordTypeIds}`,
        });
      }
    }",51,,280,,,2,,ANY
25769804771,BLOCK,2,,"{
          roleIds: rolesAccessToRecordType,
        }",60,,285,,,4,,ANY
25769804772,BLOCK,1,,"new NotFoundException('Not found any role access to the record type.', {
          cause: new Error(),
          description: `Do not found any role access to recordTypeIds: ${recordTypeIds}`,
        })",14,,291,,,1,,ANY
25769804773,BLOCK,2,,"{
          cause: new Error(),
          description: `Do not found any role access to recordTypeIds: ${recordTypeIds}`,
        }",85,,291,,,4,,ANY
25769804774,BLOCK,2,,new Error(),17,,292,,,2,,ANY
25769804775,BLOCK,-1,,"{
      this.logger.log(`Finding by ids: ${ids}`);
      query = query.andWhere('users.id IN (:...ids) ', { ids });
    }",31,,217,,,2,,ANY
25769804776,BLOCK,-1,,"{
      this.logger.log(`Finding by firstNames: ${firstNames}`);
      query = query.andWhere('users.firstName IN (:...firstNames) ', {
        firstNames: firstNames.map((name) => name),
      });
    }",45,,221,,,2,,ANY
25769804777,BLOCK,-1,,"{
      this.logger.log(`Finding by last names: ${lastNames}`);
      query = query.andWhere('users.lastName IN (:...lastNames) ', {
        lastNames: lastNames.map((name) => name),
      });
    }",43,,227,,,2,,ANY
25769804778,BLOCK,-1,,"{
      this.logger.log(`Finding by emails: ${emails}`);
      query = query.andWhere('users.email IN (:...emails) ', {
        emails: emails.map((email) => email.toLowerCase()),
      });
    }",37,,233,,,2,,ANY
25769804779,BLOCK,-1,,"{
      this.logger.log(`Finding by typeOfUser: ${typeOfUser}`);
      query = query.andWhere('users.typeOfUser = :typeOfUser', { typeOfUser });
    }",20,,239,,,2,,ANY
25769804780,BLOCK,-1,,"{
      this.logger.log(`Finding by roleAliases Ids: ${userRoleByTenantsIds}`);
      query = query.andWhere('roles.id IN (:...userRoleByTenantsIds) ', { userRoleByTenantsIds });
    }",65,,243,,,2,,ANY
25769804781,BLOCK,-1,,"{
      this.logger.log(`Finding by tenants Ids: ${tenantsIds}`);
      query = query.andWhere('tenants.id IN (:...tenantsIds) ', { tenantsIds });
    }",45,,247,,,2,,ANY
25769804782,BLOCK,-1,,"{
      this.logger.log(`Finding by temporal id: ${tenantsIds}`);
      query = query.andWhere('users.temporalId = :temporalId', { temporalId });
    }",20,,251,,,2,,ANY
25769804783,BLOCK,-1,,"{
      this.logger.log(`Finding by enabled: ${enabled}`);
      query = query.andWhere('users.enabled = :enabled ', { enabled });
    }",25,,255,,,2,,ANY
25769804784,BLOCK,-1,,"{
      this.logger.log(`Finding by validated: ${validated}`);
      query = query.andWhere('users.validated = :validated ', { validated });
    }",27,,260,,,2,,ANY
25769804785,BLOCK,-1,,"{
      this.logger.log(`Finding by BackOffice Access: ${BackOfficeAccess}`);
      query = query.andWhere('users.BackOfficeAccess = :BackOfficeAccess ', { BackOfficeAccess });
    }",34,,265,,,2,,ANY
25769804786,BLOCK,-1,,"{
      this.logger.log(`Finding by Saas Access: ${SaasAccess}`);
      query = query.andWhere('users.SaasAccess = :SaasAccess ', { SaasAccess });
    }",28,,270,,,2,,ANY
25769804787,BLOCK,-1,,"{
      this.logger.log(`Finding by fire Base Id: ${fireBaseId}`);
      query = query.andWhere('users.fireBaseId = :fireBaseId ', { fireBaseId });
    }",20,,275,,,2,,ANY
25769804788,BLOCK,-1,,"{
        this.logger.log(`Finding by roles: ${rolesAccessToRecordType}`);
        query = query.andWhere('role.id IN (:...roleIds) ', {
          roleIds: rolesAccessToRecordType,
        });
      }",73,,283,,,2,,ANY
25769804789,BLOCK,-1,,"{
        this.logger.log(`Do not found any role access to recordTypeIds: ${recordTypeIds}`);
        this.logger.error(`Do not found any role access to recordTypeIds: ${recordTypeIds}`);
        throw new NotFoundException('Not found any role access to the record type.', {
          cause: new Error(),
          description: `Do not found any role access to recordTypeIds: ${recordTypeIds}`,
        });
      }",13,,288,,,3,,ANY
25769804790,BLOCK,-1,,"{
    this.logger.log(`Updating user with id: ${id}`);
    const {
      email,
      firstName,
      lastName,
      tenantsIds,
      phone,
      temporalId,
      validated,
      BackOfficeAccess,
      typeOfUser,
      SaasAccess,
      enabled,
      fireBaseId,
    } = updateUserDto;
    const userToUpdate = await this.userRepository
      .createQueryBuilder('users')
      .leftJoinAndSelect('users.tenants', 'tenants')
      .leftJoinAndSelect('users.roles', 'roles')
      .leftJoinAndSelect('roles.role', 'role')
      .leftJoinAndSelect('roles.tenant', 'tenant')
      .leftJoinAndSelect('roles.roleAlias', 'roleAlias')
      .where('users.id = :id', { id })
      .getOne();

    if (!userToUpdate) {
      this.logger.error(`The user with id ${id} was not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${id} was not found`,
      });
    }

    if (payload){
      const userCreator = await th...",82,,303,,,5,,ANY
25769804791,BLOCK,2,,"const {
      email,
      firstName,
      lastName,
      tenantsIds,
      phone,
      temporalId,
      validated,
      BackOfficeAccess,
      typeOfUser,
      SaasAccess,
      enabled,
      fireBaseId,
    } = updateUserDto",10,,305,,,2,,ANY
25769804792,BLOCK,2,,{ id },31,,326,,,4,,ANY
25769804793,BLOCK,1,,"new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${id} was not found`,
      })",12,,331,,,1,,ANY
25769804794,BLOCK,2,,"{
        cause: new Error(),
        description: `The user with id ${id} was not found`,
      }",52,,331,,,4,,ANY
25769804795,BLOCK,2,,new Error(),15,,332,,,2,,ANY
25769804796,BLOCK,-1,,"{
      const userCreator = await this.findOne(payload.userId);

      if (payload.issuer === IssuerEnum.Saas && userCreator.typeOfUser === TypeOfUser.Client  && userToUpdate.typeOfUser === TypeOfUser.AvantoEmployee && !userCreator.BackOfficeAccess) {
        this.logger.error(`Action not allowed for typeOfUser: ${userCreator.typeOfUser}`);
        throw new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        });
      }
    }",16,,337,,,2,,ANY
25769804797,BLOCK,1,,"new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        })",14,,342,,,1,,ANY
25769804798,BLOCK,2,,"{
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        }",79,,342,,,4,,ANY
25769804799,BLOCK,2,,new Error(),17,,343,,,2,,ANY
25769804800,BLOCK,-1,,"{
      const existingTenantEmail = await this.userRepository.findOneBy({ email });
      if (existingTenantEmail && existingTenantEmail.id != id) {
        this.logger.error(`The email ${email} is already used and needs to be unique`);
        throw new ForbiddenException('email is already in use', {
          cause: new Error(),
          description: `The email ${email} is already used and needs to be unique`,
        });
      }
      userToUpdate.email = email.trim().toLowerCase();
    }",15,,349,,,2,,ANY
25769804801,BLOCK,1,,{ email },70,,350,,,3,,ANY
25769804802,BLOCK,1,,"new ForbiddenException('email is already in use', {
          cause: new Error(),
          description: `The email ${email} is already used and needs to be unique`,
        })",14,,353,,,1,,ANY
25769804803,BLOCK,2,,"{
          cause: new Error(),
          description: `The email ${email} is already used and needs to be unique`,
        }",64,,353,,,4,,ANY
25769804804,BLOCK,2,,new Error(),17,,354,,,2,,ANY
25769804805,BLOCK,1,,"new BadRequestException('Invalid typeOfUser value', {
          cause: new Error(),
          description: `The typeOfUser value ${typeOfUser} is invalid`,
        })",14,,364,,,1,,ANY
25769804806,BLOCK,2,,"{
          cause: new Error(),
          description: `The typeOfUser value ${typeOfUser} is invalid`,
        }",66,,364,,,4,,ANY
25769804807,BLOCK,2,,new Error(),17,,365,,,2,,ANY
25769804808,BLOCK,-1,,"{
      const isTakenPhone = await this.userRepository.findOneBy({ phone });
      if (isTakenPhone && isTakenPhone.id != id) {
        this.logger.error(`The phone ${phone} is already used and needs to be unique`);
        throw new ForbiddenException('phone is already in use', {
          cause: new Error(),
          description: `The phone ${phone} is already used and needs to be unique`,
        });
      }
      userToUpdate.phone = phone;
    }",15,,372,,,2,,ANY
25769804809,BLOCK,1,,{ phone },63,,373,,,3,,ANY
25769804810,BLOCK,1,,"new ForbiddenException('phone is already in use', {
          cause: new Error(),
          description: `The phone ${phone} is already used and needs to be unique`,
        })",14,,376,,,1,,ANY
25769804811,BLOCK,2,,"{
          cause: new Error(),
          description: `The phone ${phone} is already used and needs to be unique`,
        }",64,,376,,,4,,ANY
25769804812,BLOCK,2,,new Error(),17,,377,,,2,,ANY
25769804813,BLOCK,1,,{ ids: tenantsIds },56,,386,,,3,,ANY
25769804814,BLOCK,-1,,"{
      foundTenants = await this.tenantService.findByIds({ ids: tenantsIds });

      //borrar los tenant de la base de datos que no estan en la lista y que ya pertenecen a el
      const tenantsToDelete = userToUpdate.tenants.filter(
        (tenant) => !foundTenants.some((foundTenant) => foundTenant.id === tenant.id),
      );
      userToUpdate.tenants = userToUpdate.tenants.filter(
        (tenant) => !tenantsToDelete.some((tenantToDelete) => tenantToDelete.id === tenant.id),
      );

      //eliminarlos
      if (tenantsToDelete.length > 0) {
        await this.userRepository
          .createQueryBuilder('users')
          .relation('tenants')
          .of(userToUpdate)
          .remove(tenantsToDelete);
      }

      //agregar los nuevos
      userToUpdate.tenants = foundTenants;
    }",45,,385,,,2,,ANY
25769804815,BLOCK,-1,,foundTenant.id === tenant.id,56,,390,,,3,,ANY
25769804816,BLOCK,-1,,!foundTenants.some((foundTenant) => foundTenant.id === tenant.id),20,,390,,,3,,ANY
25769804817,BLOCK,-1,,tenantToDelete.id === tenant.id,62,,393,,,3,,ANY
25769804818,BLOCK,-1,,!tenantsToDelete.some((tenantToDelete) => tenantToDelete.id === tenant.id),20,,393,,,3,,ANY
25769804819,BLOCK,-1,,"{
      this.logger.error(`The user with id ${id} was not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${id} was not found`,
      });
    }",23,,329,,,2,,ANY
25769804820,BLOCK,-1,,"{
        this.logger.error(`Action not allowed for typeOfUser: ${userCreator.typeOfUser}`);
        throw new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        });
      }",185,,340,,,2,,ANY
25769804821,BLOCK,-1,,"{
        this.logger.error(`The email ${email} is already used and needs to be unique`);
        throw new ForbiddenException('email is already in use', {
          cause: new Error(),
          description: `The email ${email} is already used and needs to be unique`,
        });
      }",63,,351,,,2,,ANY
25769804822,BLOCK,-1,,"{
      this.logger.log(`Updating typeOfUser to: ${typeOfUser}`);
      if (!Object.values(TypeOfUser).includes(typeOfUser)) {
        this.logger.error(`Invalid typeOfUser: ${typeOfUser}`);
        throw new BadRequestException('Invalid typeOfUser value', {
          cause: new Error(),
          description: `The typeOfUser value ${typeOfUser} is invalid`,
        });
      }
      userToUpdate.typeOfUser = typeOfUser;
    }",20,,360,,,2,,ANY
25769804823,BLOCK,-1,,"{
        this.logger.error(`Invalid typeOfUser: ${typeOfUser}`);
        throw new BadRequestException('Invalid typeOfUser value', {
          cause: new Error(),
          description: `The typeOfUser value ${typeOfUser} is invalid`,
        });
      }",59,,362,,,2,,ANY
25769804824,BLOCK,-1,,"{
        this.logger.error(`The phone ${phone} is already used and needs to be unique`);
        throw new ForbiddenException('phone is already in use', {
          cause: new Error(),
          description: `The phone ${phone} is already used and needs to be unique`,
        });
      }",49,,374,,,2,,ANY
25769804825,BLOCK,-1,,"{
        await this.userRepository
          .createQueryBuilder('users')
          .relation('tenants')
          .of(userToUpdate)
          .remove(tenantsToDelete);
      }",38,,397,,,2,,ANY
25769804826,BLOCK,-1,,"{
      userToUpdate.firstName = firstName.trim();
    }",19,,409,,,2,,ANY
25769804827,BLOCK,-1,,"{
      userToUpdate.lastName = lastName.trim();
    }",18,,412,,,2,,ANY
25769804828,BLOCK,-1,,"{
      userToUpdate.temporalId = temporalId.trim();
    }",20,,415,,,2,,ANY
25769804829,BLOCK,-1,,"{
      userToUpdate.validated = validated;
    }",27,,418,,,2,,ANY
25769804830,BLOCK,-1,,"{
      userToUpdate.BackOfficeAccess = BackOfficeAccess;
    }",34,,421,,,2,,ANY
25769804831,BLOCK,-1,,"{
      userToUpdate.SaasAccess = SaasAccess;
    }",28,,424,,,2,,ANY
25769804832,BLOCK,-1,,"{
      userToUpdate.enabled = enabled;
      if (!enabled && userToUpdate.fireBaseId === 'default') {
        userToUpdate.validated = true;
      } else if (enabled && userToUpdate.fireBaseId === 'default') {
        userToUpdate.validated = false;
      }
    }",25,,427,,,2,,ANY
25769804833,BLOCK,-1,,"{
        userToUpdate.validated = true;
      }",61,,429,,,2,,ANY
25769804834,BLOCK,-1,,"{
        userToUpdate.validated = false;
      }",67,,431,,,2,,ANY
25769804835,BLOCK,-1,,"{
      userToUpdate.fireBaseId = fireBaseId;
    }",20,,435,,,2,,ANY
25769804836,BLOCK,-1,,"{
    this.logger.log(`Enabling / Disabling User with id: ${id}.`);
    const userToDisable = await this.userRepository.findOneBy({ id });
    
    if (!userToDisable) {
      this.logger.error(`The user with id ${id} was not found`);
      throw new NotFoundException('Tenant not found', {
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      });
    }
    if (payload){
      const userCreator = await this.findOne(payload.userId);

      if (payload.issuer === IssuerEnum.Saas && userCreator.typeOfUser === TypeOfUser.Client  && userToDisable.typeOfUser === TypeOfUser.AvantoEmployee && !userCreator.BackOfficeAccess) {
        this.logger.error(`Action not allowed for typeOfUser: ${userCreator.typeOfUser}`);
        throw new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action...",52,,443,,,4,,ANY
25769804837,BLOCK,1,,{ id },62,,445,,,3,,ANY
25769804838,BLOCK,1,,"new NotFoundException('Tenant not found', {
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      })",12,,449,,,1,,ANY
25769804839,BLOCK,2,,"{
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      }",54,,449,,,4,,ANY
25769804840,BLOCK,2,,new Error(),15,,450,,,2,,ANY
25769804841,BLOCK,-1,,"{
      const userCreator = await this.findOne(payload.userId);

      if (payload.issuer === IssuerEnum.Saas && userCreator.typeOfUser === TypeOfUser.Client  && userToDisable.typeOfUser === TypeOfUser.AvantoEmployee && !userCreator.BackOfficeAccess) {
        this.logger.error(`Action not allowed for typeOfUser: ${userCreator.typeOfUser}`);
        throw new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        });
      }
    }",16,,454,,,2,,ANY
25769804842,BLOCK,1,,"new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        })",14,,459,,,1,,ANY
25769804843,BLOCK,2,,"{
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        }",79,,459,,,4,,ANY
25769804844,BLOCK,2,,new Error(),17,,460,,,2,,ANY
25769804845,BLOCK,-1,,"{
      this.logger.error(`The user with id ${id} was not found`);
      throw new NotFoundException('Tenant not found', {
        cause: new Error(),
        description: `The tenant with id ${id} was not found`,
      });
    }",24,,447,,,2,,ANY
25769804846,BLOCK,-1,,"{
        this.logger.error(`Action not allowed for typeOfUser: ${userCreator.typeOfUser}`);
        throw new ForbiddenException('insufficient permissions for this user', {
          cause: new Error(),
          description: `The user of typeOfUser ${userCreator.typeOfUser} doesn´t  have enough permissions to perform this action`,
        });
      }",186,,457,,,2,,ANY
25769804847,BLOCK,-1,,"{
    const recordGridUrl = `${recordGridsMsUrl()}role-access-to-record-fields/many`;

    const roleAccessToRecordFieldOptions = new Options(
      'POST',
      { 'Content-Type': 'application/json' },
      JSON.stringify({ recordTypes: recordTypeIds }),
    );
    const resp = await getResponse(recordGridUrl, roleAccessToRecordFieldOptions, this.logger);

    // get unique roles from the response. This roles has access to the record type.
    const roles = resp.map((roleAccessToRecordField) => roleAccessToRecordField.role);
    const uniqueRoles = roles.filter((role, index, self) => self.findIndex((r) => r.id === role.id) === index);

    return uniqueRoles.map((role) => role.id);
  }",75,,472,,,3,,ANY
25769804848,BLOCK,2,,"new Options(
      'POST',
      { 'Content-Type': 'application/json' },
      JSON.stringify({ recordTypes: recordTypeIds }),
    )",43,,475,,,2,,ANY
25769804849,BLOCK,2,,{ 'Content-Type': 'application/json' },6,,477,,,4,,ANY
25769804850,BLOCK,1,,{ recordTypes: recordTypeIds },21,,478,,,1,,ANY
25769804851,BLOCK,-1,,roleAccessToRecordField.role,56,,483,,,3,,ANY
25769804852,BLOCK,-1,,r.id === role.id,82,,484,,,3,,ANY
25769804853,BLOCK,-1,,self.findIndex((r) => r.id === role.id) === index,60,,484,,,5,,ANY
25769804854,BLOCK,-1,,role.id,37,,486,,,3,,ANY
25769804855,BLOCK,-1,,"{
    const user = await this.userRepository
      .createQueryBuilder('user')
      .leftJoinAndSelect('user.tenants', 'tenants')
      .where('user.temporalId = :temporalId', { temporalId })
      .getOne();
    if (!user) {
      this.logger.error(`The user with id ${temporalId} was not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${temporalId} was not found`,
      });
    }
    if (user.validated) {
      this.logger.error(`The user with id ${temporalId} is already verified`);
      throw new ForbiddenException('User is already verified', {
        cause: new Error(),
        description: `The user with id ${temporalId} is already verified`,
      });
    }
    if (!(user.tenants && user.tenants.length > 0)) {
      this.logger.error(`The user with id ${temporalId} has no tenants asociated`);
      throw new ForbiddenException('User has no tenants asociated', {
        cause: new Error(),
     ...",47,,489,,,3,,ANY
25769804856,BLOCK,2,,{ temporalId },46,,493,,,4,,ANY
25769804857,BLOCK,1,,"new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${temporalId} was not found`,
      })",12,,497,,,1,,ANY
25769804858,BLOCK,2,,"{
        cause: new Error(),
        description: `The user with id ${temporalId} was not found`,
      }",52,,497,,,4,,ANY
25769804859,BLOCK,2,,new Error(),15,,498,,,2,,ANY
25769804860,BLOCK,1,,"new ForbiddenException('User is already verified', {
        cause: new Error(),
        description: `The user with id ${temporalId} is already verified`,
      })",12,,504,,,1,,ANY
25769804861,BLOCK,2,,"{
        cause: new Error(),
        description: `The user with id ${temporalId} is already verified`,
      }",63,,504,,,4,,ANY
25769804862,BLOCK,2,,new Error(),15,,505,,,2,,ANY
25769804863,BLOCK,1,,"new ForbiddenException('User has no tenants asociated', {
        cause: new Error(),
        description: `The user with id ${temporalId} has no tenants asociated`,
      })",12,,511,,,1,,ANY
25769804864,BLOCK,2,,"{
        cause: new Error(),
        description: `The user with id ${temporalId} has no tenants asociated`,
      }",68,,511,,,4,,ANY
25769804865,BLOCK,2,,new Error(),15,,512,,,2,,ANY
25769804866,BLOCK,1,,{ ids: user.tenants.map((tenant) => tenant.id) },55,,516,,,3,,ANY
25769804867,BLOCK,-1,,tenant.id,91,,516,,,3,,ANY
25769804868,BLOCK,2,,new Date(),22,,520,,,2,,ANY
25769804869,BLOCK,-1,,"{
      this.logger.error(`The user with id ${temporalId} was not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${temporalId} was not found`,
      });
    }",15,,495,,,2,,ANY
25769804870,BLOCK,-1,,"{
      this.logger.error(`The user with id ${temporalId} is already verified`);
      throw new ForbiddenException('User is already verified', {
        cause: new Error(),
        description: `The user with id ${temporalId} is already verified`,
      });
    }",24,,502,,,2,,ANY
25769804871,BLOCK,-1,,"{
      this.logger.error(`The user with id ${temporalId} has no tenants asociated`);
      throw new ForbiddenException('User has no tenants asociated', {
        cause: new Error(),
        description: `The user with id ${temporalId} has no tenants asociated`,
      });
    }",52,,509,,,2,,ANY
25769804872,BLOCK,-1,,"{
    const user = await this.userRepository.findOne({ where: { id: userId } });

    if (!user) {
      this.logger.error(`The user with id ${userId} was not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${userId} was not found`,
      });
    }

    return sendMfaAttemptEmailProcess(user, this.emailProvider);
  }",44,,525,,,3,,ANY
25769804873,BLOCK,1,,{ where: { id: userId } },51,,526,,,3,,ANY
25769804874,BLOCK,2,,{ id: userId },60,,526,,,2,,ANY
25769804875,BLOCK,1,,"new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${userId} was not found`,
      })",12,,530,,,1,,ANY
25769804876,BLOCK,2,,"{
        cause: new Error(),
        description: `The user with id ${userId} was not found`,
      }",52,,530,,,4,,ANY
25769804877,BLOCK,2,,new Error(),15,,531,,,2,,ANY
25769804878,BLOCK,-1,,"{
      this.logger.error(`The user with id ${userId} was not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${userId} was not found`,
      });
    }",15,,528,,,2,,ANY
25769804879,BLOCK,-1,,"{
    const user = await this.userRepository.findOne({ where: { id: userId } });

    if (!user) {
      this.logger.error(`The user with id ${userId} was not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${userId} was not found`,
      });
    }

    return sendMfaSuccessEmailProcess(user, this.emailProvider);
  }",44,,539,,,3,,ANY
25769804880,BLOCK,1,,{ where: { id: userId } },51,,540,,,3,,ANY
25769804881,BLOCK,2,,{ id: userId },60,,540,,,2,,ANY
25769804882,BLOCK,1,,"new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${userId} was not found`,
      })",12,,544,,,1,,ANY
25769804883,BLOCK,2,,"{
        cause: new Error(),
        description: `The user with id ${userId} was not found`,
      }",52,,544,,,4,,ANY
25769804884,BLOCK,2,,new Error(),15,,545,,,2,,ANY
25769804885,BLOCK,-1,,"{
      this.logger.error(`The user with id ${userId} was not found`);
      throw new NotFoundException('User not found', {
        cause: new Error(),
        description: `The user with id ${userId} was not found`,
      });
    }",15,,542,,,2,,ANY
25769804886,BLOCK,1,,"import { Tenant, Role, User } from '@avantodev/avanto-db';",0,,1,,,1,,ANY
25769804887,BLOCK,3,,"import {
  getResponse,
  recordGridsMsUrl,
  sendEmailProcess,
  sendMfaAttemptEmailProcess,
  sendMfaSuccessEmailProcess,
} from '../../../utils';",0,,3,,,3,,ANY
25769804888,BLOCK,5,,"import {
  Injectable,
  Logger,
  ForbiddenException,
  NotFoundException,
  forwardRef,
  Inject,
  BadRequestException,
} from '@nestjs/common';",0,,11,,,5,,ANY
25769804889,BLOCK,14,,"import { IssuerEnum, TypeOfUser } from '@avantodev/avanto-db/dist/shared/enums';",0,,28,,,14,,ANY
25769804890,BLOCK,16,,"@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User, dbConfig.name)
    private readonly userRepository: Repository<User>,
    @InjectRepository(Role, dbConfig.name)
    private readonly rolesRepository: Repository<Role>,
    //inject tenant service
    @Inject(forwardRef(() => TenantsService))
    private readonly tenantService: TenantsService,
    private readonly emailProvider: EmailProvider,
  ) {}

  private readonly logger = new Logger(UsersService.name);
  private usersCollection: User[] = [];

  async create(createUserDto: CreateUserDto, payload: ContextPayload) {
    this.logger.log('Creating new User...');

    const { email, firstName, lastName, tenantsIds, userRoleByTenantsIds, phone } = createUserDto;
    let foundTenants: Tenant[] = [];
    let foundRoles: Role[] = [];

    if (payload){
      const userCreator = await this.findOne(payload.userId);

      if (payload.issuer === IssuerEnum.Saas && userCreator.typeOfUser === TypeOfUser.Cli...",0,,30,,,16,,ANY
25769804891,BLOCK,-1,,<empty>,,,,,,1,,ANY
25769804892,BLOCK,-1,,<empty>,,,,,,1,,ANY
25769804893,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804894,BLOCK,1,,"export enum IssuerEnum {
  BackOffice = 'BackOffice',
  Saas = 'Saas',
}",0,,1,,,1,,ANY
25769804895,BLOCK,2,,"export enum FieldAccessEnum {
  NotAllowed = 'NotAllowed',
  Editable = 'Editable',
  ViewOnly = 'ViewOnly',
}",0,,6,,,2,,ANY
25769804896,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804897,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804898,BLOCK,1,,"import { Request, Response } from 'express';",0,,1,,,1,,ANY
25769804899,BLOCK,3,,"export type ContextPayload = {
  userId: number;
  fireBaseId?: string;
  issuer: IssuerEnum;
  backOfficeRole?: number;
  tenants?: TenantData[];
};",0,,4,,,3,,ANY
25769804900,BLOCK,4,,"export interface MyContext {
  req: Request;
  res?: Response;
  payload?: ContextPayload;
}",0,,12,,,4,,ANY
25769804901,BLOCK,5,,"export type TenantData = {
  tenantId: number;
  tenantTypes: TenantTypeData[] | undefined;
  role?: number;
};",0,,18,,,5,,ANY
25769804902,BLOCK,6,,"export type TenantTypeData = {
  tenantTypeId: number;
  recordType: number[] | undefined;
};",0,,24,,,6,,ANY
25769804903,BLOCK,-1,,"{
    this.body = body;
    this.headers = headers;
    this.method = method;
  }",100,,6,,,5,,ANY
25769804904,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804905,BLOCK,1,,"export class Options {
  method?: 'POST' | 'GET' | 'PATCH' | 'PUT' | 'DELETE';
  body?: string;
  headers?: any;

  constructor(method: 'POST' | 'GET' | 'PATCH' | 'PUT' | 'DELETE', headers?: object, body?: string) {
    this.body = body;
    this.headers = headers;
    this.method = method;
  }
}",0,,1,,,1,,ANY
25769804906,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804907,BLOCK,1,,"export type PostgreSQLConfig = {
  name: string;
  username: string;
  password: string;
  host: string;
  port: number;
  database: string;
  synchronize: boolean;
  logging: boolean;
  schema: string;
};",0,,1,,,1,,ANY
25769804908,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804909,BLOCK,1,,"export type RoleInTenantDataType = {
  tenantId: number;
  roleId: number;
};",0,,1,,,1,,ANY
25769804910,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804911,BLOCK,1,,"export type RoleInTenantDataType = {
  userId: number;
  roleId: number;
};",0,,1,,,1,,ANY
25769804912,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804913,BLOCK,1,,"export type UnknownKeysObject = {
  [key: string | number]: Date | number | boolean | string;
};",0,,1,,,1,,ANY
25769804914,BLOCK,2,,"export type ObjectWithObjectValues = {
  [key: string | number]: { [key: string | number]: Date | number | boolean | string };
};",0,,5,,,2,,ANY
25769804915,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804916,BLOCK,1,,"export type UserInTenantDataType = {
  tenantId: number;
  userId: number;
};",0,,1,,,1,,ANY
25769804917,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804918,BLOCK,2,,"{
  pinoHttp: {
    transport: {
      target: 'pino-pretty',
      options: {
        colorize: true,
        levelFirst: true,
        translateTime: 'UTC:mm/dd/yyyy, h:MM:ss TT Z',
      },
    },
    autoLogging: false,
    customProps: (req: Request) => {
      return {
        correlationId: req[CORRELATION_ID_HEADER],
      };
    },
    serializers: {
      req: () => {
        return undefined;
      },
      res: () => {
        return undefined;
      },
    },
  },
}",27,,4,,,2,,ANY
25769804919,BLOCK,2,,"{
    transport: {
      target: 'pino-pretty',
      options: {
        colorize: true,
        levelFirst: true,
        translateTime: 'UTC:mm/dd/yyyy, h:MM:ss TT Z',
      },
    },
    autoLogging: false,
    customProps: (req: Request) => {
      return {
        correlationId: req[CORRELATION_ID_HEADER],
      };
    },
    serializers: {
      req: () => {
        return undefined;
      },
      res: () => {
        return undefined;
      },
    },
  }",12,,5,,,2,,ANY
25769804920,BLOCK,2,,"{
      target: 'pino-pretty',
      options: {
        colorize: true,
        levelFirst: true,
        translateTime: 'UTC:mm/dd/yyyy, h:MM:ss TT Z',
      },
    }",15,,6,,,2,,ANY
25769804921,BLOCK,2,,"{
        colorize: true,
        levelFirst: true,
        translateTime: 'UTC:mm/dd/yyyy, h:MM:ss TT Z',
      }",15,,8,,,2,,ANY
25769804922,BLOCK,1,,"{
        correlationId: req[CORRELATION_ID_HEADER],
      }",13,,16,,,1,,ANY
25769804923,BLOCK,-1,,"{
      return {
        correlationId: req[CORRELATION_ID_HEADER],
      };
    }",35,,15,,,3,,ANY
25769804924,BLOCK,2,,"{
      req: () => {
        return undefined;
      },
      res: () => {
        return undefined;
      },
    }",17,,20,,,2,,ANY
25769804925,BLOCK,-1,,"{
        return undefined;
      }",17,,21,,,2,,ANY
25769804926,BLOCK,-1,,"{
        return undefined;
      }",17,,24,,,2,,ANY
25769804927,BLOCK,3,,"export const pinoOptions = {
  pinoHttp: {
    transport: {
      target: 'pino-pretty',
      options: {
        colorize: true,
        levelFirst: true,
        translateTime: 'UTC:mm/dd/yyyy, h:MM:ss TT Z',
      },
    },
    autoLogging: false,
    customProps: (req: Request) => {
      return {
        correlationId: req[CORRELATION_ID_HEADER],
      };
    },
    serializers: {
      req: () => {
        return undefined;
      },
      res: () => {
        return undefined;
      },
    },
  },
};",0,,4,,,3,,ANY
25769804928,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804929,BLOCK,2,,new Logger(EmailProvider.name),28,,10,,,2,,ANY
25769804930,BLOCK,2,,"new SES({ credentials: fromInstanceMetadata(), region: this.region })",15,,13,,,2,,ANY
25769804931,BLOCK,1,,"{ credentials: fromInstanceMetadata(), region: this.region }",23,,13,,,3,,ANY
25769804932,BLOCK,-1,,"{
    this.region = process.env.AWS_REGION;
    this.ses = new SES({ credentials: fromInstanceMetadata(), region: this.region });
  }",16,,11,,,2,,ANY
25769804933,BLOCK,-1,,"{
    try {
      this.logger.log(`Sending email with params ${params}`);
      await this.ses.sendEmail(params);
      this.logger.log(`Email sent to ${params.Destination.ToAddresses[0]}`);
    } catch (error) {
      throw error;
    }
  }",59,,16,,,3,,ANY
25769804934,BLOCK,1,,"{
      this.logger.log(`Sending email with params ${params}`);
      await this.ses.sendEmail(params);
      this.logger.log(`Email sent to ${params.Destination.ToAddresses[0]}`);
    }",8,,17,,,1,,ANY
25769804935,BLOCK,-1,,"catch (error) {
      throw error;
    }",6,,21,,,1,,ANY
25769804936,BLOCK,-1,,"{
    const params: SendTemplatedEmailRequest = {
      Source: from,
      Destination: {
        ToAddresses: [to],
      },
      Template: templateName,
      TemplateData: JSON.stringify(templateData),
    };
    this.logger.log(`Sending email with template ${params}`);
    await this.ses.sendTemplatedEmail(params);
    this.logger.log('Email sent');
  }",19,,31,,,6,,ANY
25769804937,BLOCK,2,,"{
      Source: from,
      Destination: {
        ToAddresses: [to],
      },
      Template: templateName,
      TemplateData: JSON.stringify(templateData),
    }",46,,32,,,2,,ANY
25769804938,BLOCK,2,,"{
        ToAddresses: [to],
      }",19,,34,,,2,,ANY
25769804939,BLOCK,2,,[to],21,,35,,,2,,ANY
25769804940,BLOCK,2,,"import { SES, SendEmailRequest, SendTemplatedEmailRequest } from '@aws-sdk/client-ses';",0,,2,,,2,,ANY
25769804941,BLOCK,3,,"import { Injectable, Logger } from '@nestjs/common';",0,,3,,,3,,ANY
25769804942,BLOCK,5,,"@Injectable()
export class EmailProvider {
  private ses: SES;
  private readonly region: string;
  private readonly logger = new Logger(EmailProvider.name);
  constructor() {
    this.region = process.env.AWS_REGION;
    this.ses = new SES({ credentials: fromInstanceMetadata(), region: this.region });
  }

  async sendEmail(params: SendEmailRequest): Promise<void> {
    try {
      this.logger.log(`Sending email with params ${params}`);
      await this.ses.sendEmail(params);
      this.logger.log(`Email sent to ${params.Destination.ToAddresses[0]}`);
    } catch (error) {
      throw error;
    }
  }

  async sendEmailWithTemplate(
    from: string,
    to: string,
    templateName: string,
    templateData: Record<string, string>,
  ): Promise<void> {
    const params: SendTemplatedEmailRequest = {
      Source: from,
      Destination: {
        ToAddresses: [to],
      },
      Template: templateName,
      TemplateData: JSON.stringify(templateData),
    };
    this.logger.log(...",0,,6,,,5,,ANY
25769804943,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804944,BLOCK,-1,,"`
<div style=""line-height:0.9;text-align:center;width:70%;margin:0auto;border:1px solid #ccc;padding:20px;font-family:Arial,sans-serif;border-radius:10px"">
<img src=""https://ci3.googleusercontent.com/meips/ADKq_NbmlS89t1aNZlMT2xnvZF8EIsHnDI8he-ejvE-v7TH2zPeACPxoEpNHOx1asYu8F1XlQdP0T71xqbLcAAWp9KZQOESFltFoHhRMW1iUF5WE2HNU7VsReptL50ixmBfA6HiEUGONpg=s0-d-e1-ft#https://resources-images-orderbahn-dev.s3.amazonaws.com/Property+1%3DDefault.png"" alt=""Header Image"" style=""width:260px;height:auto"">
<p style=""color:#222"">Dear ${userName},</p> <p style=""color:#222"">We noticed an attempted setup of Multi-Factor Authentication (MFA) on your account at ${dateNow}.</p>
<p style=""color:#222"">If you initiated this action, you can disregard this notification.</p>
<p style=""color:#222"">However, if you did not attempt to set up MFA, please secure your account immediately and contact our support team at <a href=""mailto:support@goavanto.com"" style=""color:#5D599E"">support@goavanto.com</a> for further assis...",63,,3,,,4,,ANY
25769804945,BLOCK,2,,"export const generateMfaAlertTemplate = (dateNow, userName) => `
<div style=""line-height:0.9;text-align:center;width:70%;margin:0auto;border:1px solid #ccc;padding:20px;font-family:Arial,sans-serif;border-radius:10px"">
<img src=""https://ci3.googleusercontent.com/meips/ADKq_NbmlS89t1aNZlMT2xnvZF8EIsHnDI8he-ejvE-v7TH2zPeACPxoEpNHOx1asYu8F1XlQdP0T71xqbLcAAWp9KZQOESFltFoHhRMW1iUF5WE2HNU7VsReptL50ixmBfA6HiEUGONpg=s0-d-e1-ft#https://resources-images-orderbahn-dev.s3.amazonaws.com/Property+1%3DDefault.png"" alt=""Header Image"" style=""width:260px;height:auto"">
<p style=""color:#222"">Dear ${userName},</p> <p style=""color:#222"">We noticed an attempted setup of Multi-Factor Authentication (MFA) on your account at ${dateNow}.</p>
<p style=""color:#222"">If you initiated this action, you can disregard this notification.</p>
<p style=""color:#222"">However, if you did not attempt to set up MFA, please secure your account immediately and contact our support team at <a href=""mailto:support@goavanto.com"" s...",0,,3,,,2,,ANY
25769804946,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804947,BLOCK,-1,,"`
<div style=""line-height:0.9; text-align:center;width:70%;margin:0 auto;border:1px solid #ccc;padding:20px;font-family:Arial,sans-serif;border-radius:10px"">
<img src=""https://ci3.googleusercontent.com/meips/ADKq_NbmlS89t1aNZlMT2xnvZF8EIsHnDI8he-ejvE-v7TH2zPeACPxoEpNHOx1asYu8F1XlQdP0T71xqbLcAAWp9KZQOESFltFoHhRMW1iUF5WE2HNU7VsReptL50ixmBfA6HiEUGONpg=s0-d-e1-ft#https://resources-images-orderbahn-dev.s3.amazonaws.com/Property+1%3DDefault.png"" alt=""Header Image"" style=""width:260px;height:auto"">
<p style=""color:#222"">Dear ${userName},</p>
<p style=""color:#222"">We're pleased to inform you that Multi-Factor Authentication (MFA) has been successfully set up on your account.</p>
<p style=""color:#222"">This additional security measure will help protect your account from unauthorized access and enhance data security.</p>
<p style=""color:#222"">If you have any questions or concerns regarding MFA or your account security, please don't hesitate to reach out to our support team at <a href=""mailto:su...",56,,3,,,3,,ANY
25769804948,BLOCK,2,,"export const generateMfaSuccessTemplate = (userName) => `
<div style=""line-height:0.9; text-align:center;width:70%;margin:0 auto;border:1px solid #ccc;padding:20px;font-family:Arial,sans-serif;border-radius:10px"">
<img src=""https://ci3.googleusercontent.com/meips/ADKq_NbmlS89t1aNZlMT2xnvZF8EIsHnDI8he-ejvE-v7TH2zPeACPxoEpNHOx1asYu8F1XlQdP0T71xqbLcAAWp9KZQOESFltFoHhRMW1iUF5WE2HNU7VsReptL50ixmBfA6HiEUGONpg=s0-d-e1-ft#https://resources-images-orderbahn-dev.s3.amazonaws.com/Property+1%3DDefault.png"" alt=""Header Image"" style=""width:260px;height:auto"">
<p style=""color:#222"">Dear ${userName},</p>
<p style=""color:#222"">We're pleased to inform you that Multi-Factor Authentication (MFA) has been successfully set up on your account.</p>
<p style=""color:#222"">This additional security measure will help protect your account from unauthorized access and enhance data security.</p>
<p style=""color:#222"">If you have any questions or concerns regarding MFA or your account security, please don't hesitat...",0,,3,,,2,,ANY
25769804949,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804950,BLOCK,-1,,"`
    <div style=""text-align: center; width: 70%; margin: 0 auto; border: 1px solid #ccc; padding: 20px; font-family: Arial, sans-serif; border-radius: 10px;"">
        <img src=""https://ci3.googleusercontent.com/meips/ADKq_NbmlS89t1aNZlMT2xnvZF8EIsHnDI8he-ejvE-v7TH2zPeACPxoEpNHOx1asYu8F1XlQdP0T71xqbLcAAWp9KZQOESFltFoHhRMW1iUF5WE2HNU7VsReptL50ixmBfA6HiEUGONpg=s0-d-e1-ft#https://resources-images-orderbahn-dev.s3.amazonaws.com/Property+1%3DDefault.png"" alt=""Header Image"" style=""width: 260px; height: auto;"">
        <p>In order to continue with your registration at OrderBahn, we need your confirmation.</p>
        <p>Please click on the button below and follow the instructions to complete your registration.</p>

        <a href=${process.env.ENVIRONMENT_URL}/user-confirmation/${userId} style=""font-weight: bold; background-color: #37326E; border-radius: 5px; box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5); color: white; text-decoration: none; padding: 10px; display: block; text-align: center...",92,,3,,,4,,ANY
25769804951,BLOCK,2,,"export const generateConfirmationTemplate = (userId: string, tenantName: string): string => `
    <div style=""text-align: center; width: 70%; margin: 0 auto; border: 1px solid #ccc; padding: 20px; font-family: Arial, sans-serif; border-radius: 10px;"">
        <img src=""https://ci3.googleusercontent.com/meips/ADKq_NbmlS89t1aNZlMT2xnvZF8EIsHnDI8he-ejvE-v7TH2zPeACPxoEpNHOx1asYu8F1XlQdP0T71xqbLcAAWp9KZQOESFltFoHhRMW1iUF5WE2HNU7VsReptL50ixmBfA6HiEUGONpg=s0-d-e1-ft#https://resources-images-orderbahn-dev.s3.amazonaws.com/Property+1%3DDefault.png"" alt=""Header Image"" style=""width: 260px; height: auto;"">
        <p>In order to continue with your registration at OrderBahn, we need your confirmation.</p>
        <p>Please click on the button below and follow the instructions to complete your registration.</p>

        <a href=${process.env.ENVIRONMENT_URL}/user-confirmation/${userId} style=""font-weight: bold; background-color: #37326E; border-radius: 5px; box-shadow: 0px 0px 10px rgba(0, 0, 0, ...",0,,3,,,2,,ANY
25769804952,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804953,BLOCK,6,,"for (const key in commonEntities) {
  if (commonEntities.hasOwnProperty(key)) {
    const model = commonEntities[key];
    models.push(model);
  }
}",0,,7,,,6,,ANY
25769804954,BLOCK,-1,,"{
    const model = commonEntities[key];
    models.push(model);
  }",42,,8,,,2,,ANY
25769804955,BLOCK,2,,"{
  type: 'postgres',
  name: dbConfig.name,
  host: dbConfig.host,
  port: dbConfig.port,
  username: dbConfig.username,
  password: dbConfig.password,
  database: dbConfig.database,
  synchronize: dbConfig.synchronize,
  schema: dbConfig.schema,
  logging: dbConfig.logging,
  autoLoadEntities: true,
  entities: models,
}",37,,14,,,2,,ANY
25769804956,BLOCK,2,,"{
    type: 'postgres',
    name: dbConfig.name,
    host: dbConfig.host,
    port: dbConfig.port,
    username: dbConfig.username,
    password: dbConfig.password,
    database: dbConfig.database,
    synchronize: dbConfig.synchronize,
    schema: dbConfig.schema,
    logging: dbConfig.logging,
    autoLoadEntities: true,
    entities: models,
  }",9,,30,,,2,,ANY
25769804957,BLOCK,-1,,"{
  return {
    type: 'postgres',
    name: dbConfig.name,
    host: dbConfig.host,
    port: dbConfig.port,
    username: dbConfig.username,
    password: dbConfig.password,
    database: dbConfig.database,
    synchronize: dbConfig.synchronize,
    schema: dbConfig.schema,
    logging: dbConfig.logging,
    autoLoadEntities: true,
    entities: models,
  } as DataSourceOptions;
}",28,,29,,,2,,ANY
25769804958,BLOCK,-1,,"for (const key in commonEntities) {
  if (commonEntities.hasOwnProperty(key)) {
    const model = commonEntities[key];
    models.push(model);
  }
}",0,,7,,,2,,ANY
25769804959,BLOCK,2,,"{
  if (commonEntities.hasOwnProperty(key)) {
    const model = commonEntities[key];
    models.push(model);
  }
}",34,,7,,,2,,ANY
25769804960,BLOCK,7,,"export const appPostgresDataSource = {
  type: 'postgres',
  name: dbConfig.name,
  host: dbConfig.host,
  port: dbConfig.port,
  username: dbConfig.username,
  password: dbConfig.password,
  database: dbConfig.database,
  synchronize: dbConfig.synchronize,
  schema: dbConfig.schema,
  logging: dbConfig.logging,
  autoLoadEntities: true,
  entities: models,
} as TypeOrmModuleOptions;",0,,14,,,7,,ANY
25769804961,BLOCK,8,,"export function getConfig() {
  return {
    type: 'postgres',
    name: dbConfig.name,
    host: dbConfig.host,
    port: dbConfig.port,
    username: dbConfig.username,
    password: dbConfig.password,
    database: dbConfig.database,
    synchronize: dbConfig.synchronize,
    schema: dbConfig.schema,
    logging: dbConfig.logging,
    autoLoadEntities: true,
    entities: models,
  } as DataSourceOptions;
}",0,,29,,,8,,ANY
25769804962,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804963,BLOCK,2,,"{
  name: process.env.NODE_ENV || 'dev',
  host: process.env.DB_HOST || 'localhost',
  port: +(process.env.BD_PORT || 5432),
  username: process.env.DB_USERNAME || 'root',
  password: process.env.DB_PASSWORD || 'root',
  database: process.env.DB_NAME || 'postgres',
  schema: process.env.DB_SCHEMA || 'public',
  synchronize: process.env.DB_SYNC ? evalENVBoolean(process.env.DB_SYNC) : true,
  logging: process.env.DB_LOGGING ? evalENVBoolean(process.env.DB_LOGGING) : true,
}",42,,5,,,2,,ANY
25769804964,BLOCK,4,,"export const dbConfig: PostgreSQLConfig = {
  name: process.env.NODE_ENV || 'dev',
  host: process.env.DB_HOST || 'localhost',
  port: +(process.env.BD_PORT || 5432),
  username: process.env.DB_USERNAME || 'root',
  password: process.env.DB_PASSWORD || 'root',
  database: process.env.DB_NAME || 'postgres',
  schema: process.env.DB_SCHEMA || 'public',
  synchronize: process.env.DB_SYNC ? evalENVBoolean(process.env.DB_SYNC) : true,
  logging: process.env.DB_LOGGING ? evalENVBoolean(process.env.DB_LOGGING) : true,
};",0,,5,,,4,,ANY
25769804965,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804966,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804967,BLOCK,-1,,"{
    const id = randomUUID();
    req[CORRELATION_ID_HEADER] = id;
    res.set(CORRELATION_ID_HEADER, id);
    next();
  }",55,,9,,,5,,ANY
25769804968,BLOCK,1,,"import { NextFunction, Request, Response } from 'express';",0,,1,,,1,,ANY
25769804969,BLOCK,2,,"import { Injectable, NestMiddleware } from '@nestjs/common';",0,,2,,,2,,ANY
25769804970,BLOCK,4,,export const CORRELATION_ID_HEADER = 'X-Correlation-Id';,0,,5,,,4,,ANY
25769804971,BLOCK,5,,"@Injectable()
export class CorrelationIdMiddleware implements NestMiddleware {
  use(req: Request, res: Response, next: NextFunction) {
    const id = randomUUID();
    req[CORRELATION_ID_HEADER] = id;
    res.set(CORRELATION_ID_HEADER, id);
    next();
  }
}",0,,7,,,5,,ANY
25769804972,BLOCK,-1,,<empty>,,,,,,2,,ANY
25769804973,BLOCK,-1,,"{
  return val?.toLocaleLowerCase() === 'true';
}",68,,5,,,3,,ANY
25769804974,BLOCK,-1,,"{
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  console.log('today: ' + today);
  const dateToValidate = new Date(date);
  console.log('date to validate: ' + dateToValidate);
  console.log('validation: ', dateToValidate >= today);
  return dateToValidate >= today;
}",56,,25,,,3,,ANY
25769804975,BLOCK,2,,new Date(),16,,26,,,2,,ANY
25769804976,BLOCK,2,,new Date(date),25,,29,,,2,,ANY
25769804977,BLOCK,-1,,"{
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const dateToValidate = new Date(date);
  return dateToValidate <= today;
}",54,,35,,,3,,ANY
25769804978,BLOCK,2,,new Date(),16,,36,,,2,,ANY
25769804979,BLOCK,2,,new Date(date),25,,38,,,2,,ANY
25769804980,BLOCK,-1,,"{
  if (typeof str !== 'string') {
    return false;
  }

  if (str.trim() === '') {
    return false;
  }

  return !Number.isNaN(Number(str));
}",50,,42,,,3,,ANY
25769804981,BLOCK,-1,,"{
    return false;
  }",31,,43,,,2,,ANY
25769804982,BLOCK,-1,,"{
    return false;
  }",25,,47,,,2,,ANY
25769804983,BLOCK,-1,,first.toUpperCase() + rest.join('').toLowerCase(),67,,54,,,3,,ANY
25769804984,BLOCK,-1,,capitalizeFirstLetter(word),19,,59,,,3,,ANY
25769804985,BLOCK,-1,,"words
    .split(' ')
    .map((word) => capitalizeFirstLetter(word))
    .join(' ')",2,,57,,,3,,ANY
25769804986,BLOCK,-1,,"{
  const regex = /^[a-zA-Z ]*$/;
  return regex.test(text);
}",45,,62,,,3,,ANY
25769804987,BLOCK,-1,,"{
  return /[0-9]/.test(text);
}",50,,67,,,3,,ANY
25769804988,BLOCK,-1,,"{
  const options: string[] = Object.values(IssuerEnum);
  return options.includes(app);
}",60,,71,,,3,,ANY
25769804989,BLOCK,-1,,"{
  const opts = {
    method: 'POST',
    body: JSON.stringify(args),
    headers: {
      'Content-Type': 'application/json',
    },
  };
  const response = await fetch(url, opts)
    .then((response) => response.json())
    .catch((err) => {
      throw err;
    });
  return response;
}",62,,76,,,4,,ANY
25769804990,BLOCK,2,,"{
    method: 'POST',
    body: JSON.stringify(args),
    headers: {
      'Content-Type': 'application/json',
    },
  }",15,,77,,,2,,ANY
25769804991,BLOCK,2,,"{
      'Content-Type': 'application/json',
    }",13,,80,,,2,,ANY
25769804992,BLOCK,-1,,response.json(),24,,85,,,3,,ANY
25769804993,BLOCK,-1,,"{
      throw err;
    }",20,,86,,,3,,ANY
25769804994,BLOCK,1,,"new NotFoundException(`${type} env variable not found`, {
      cause: new Error(),
      description: `Missing ${type} env variable`,
    })",10,,94,,,1,,ANY
25769804995,BLOCK,2,,"{
      cause: new Error(),
      description: `Missing ${type} env variable`,
    }",66,,94,,,4,,ANY
25769804996,BLOCK,2,,new Error(),13,,95,,,2,,ANY
25769804997,BLOCK,-1,,"{
  if (!configUrl)
    throw new NotFoundException(`${type} env variable not found`, {
      cause: new Error(),
      description: `Missing ${type} env variable`,
    });
  const url = configUrl.endsWith('/') ? configUrl : `${configUrl}/`;
  return url;
}",81,,92,,,4,,ANY
25769804998,BLOCK,-1,,"{
  return getValidEndpointUrl(process.env.SECURITY_MS_URL, 'SECURITY_MS_URL');
}",43,,102,,,2,,ANY
25769804999,BLOCK,-1,,"{
  return getValidEndpointUrl(process.env.CATALOG_MS_URL, 'CATALOG_MS_URL');
}",42,,106,,,2,,ANY
25769805000,BLOCK,-1,,"{
  return getValidEndpointUrl(process.env.TENANTS_MS_URL, 'TENANTS_MS_URL');
}",42,,110,,,2,,ANY
25769805001,BLOCK,-1,,"{
  return getValidEndpointUrl(process.env.USERS_MS_URL, 'USERS_MS_URL');
}",40,,114,,,2,,ANY
25769805002,BLOCK,-1,,"{
  return getValidEndpointUrl(process.env.RECORDS_GRID_MS_URL, 'RECORDS_GRID_MS_URL');
}",46,,118,,,2,,ANY
25769805003,BLOCK,-1,,"{
  return getValidEndpointUrl(process.env.APP_MODULES_MS_URL, 'APP_MODULES_MS_URL');
}",45,,122,,,2,,ANY
25769805004,BLOCK,-1,,"{
  return getValidEndpointUrl(process.env.GENERAL_MS_URL, 'GENERAL_MS_URL');
}",48,,126,,,2,,ANY
25769805005,BLOCK,-1,,"{
  return getValidEndpointUrl(process.env.RECORDS_MS_URL, 'RECORDS_MS_URL');
}",42,,130,,,2,,ANY
25769805006,BLOCK,-1,,"{
  return getValidEndpointUrl(process.env.FILE_MANAGEMENT_MS_URL, 'FILE_MANAGEMENT_MS_URL');
}",49,,134,,,2,,ANY
25769805007,BLOCK,-1,,"{
  const response = await fetch(url, options)
    .then((response) => response.json())
    .catch((err) => {
      logger.error(err.message);
      throw new InternalServerErrorException(err.message);
    });

  switch (response.statusCode) {
    case 400:
      logger.log(`Bad Request: ${response.message}`);
      return new BadRequestException(response.message);
    case 401:
      logger.log(`Unauthorized: ${response.message}`);
      return new UnauthorizedException(response.message);
    case 403:
      logger.log(`Forbidden: ${response.message}`);
      return new ForbiddenException(response.message);
    case 404:
      logger.log(`Not Found: ${response.message}`);
      return new NotFoundException(response.message);
    case 408:
      logger.log(`Request Timeout: ${response.message}`);
      return new RequestTimeoutException(response.message);
    case 409:
      logger.log(`Conflict: ${response.message}`);
      return new ConflictException(response.message);
    case 4...",83,,138,,,5,,ANY
25769805008,BLOCK,-1,,response.json(),24,,140,,,3,,ANY
25769805009,BLOCK,1,,new InternalServerErrorException(err.message),12,,143,,,1,,ANY
25769805010,BLOCK,-1,,"{
      logger.error(err.message);
      throw new InternalServerErrorException(err.message);
    }",20,,141,,,3,,ANY
25769805011,BLOCK,1,,new BadRequestException(response.message),13,,149,,,1,,ANY
25769805012,BLOCK,1,,new UnauthorizedException(response.message),13,,152,,,1,,ANY
25769805013,BLOCK,1,,new ForbiddenException(response.message),13,,155,,,1,,ANY
25769805014,BLOCK,1,,new NotFoundException(response.message),13,,158,,,1,,ANY
25769805015,BLOCK,1,,new RequestTimeoutException(response.message),13,,161,,,1,,ANY
25769805016,BLOCK,1,,new ConflictException(response.message),13,,164,,,1,,ANY
25769805017,BLOCK,1,,new PayloadTooLargeException(response.message),13,,167,,,1,,ANY
25769805018,BLOCK,1,,new InternalServerErrorException(response.message),13,,170,,,1,,ANY
25769805019,BLOCK,-1,,"switch (response.statusCode) {
    case 400:
      logger.log(`Bad Request: ${response.message}`);
      return new BadRequestException(response.message);
    case 401:
      logger.log(`Unauthorized: ${response.message}`);
      return new UnauthorizedException(response.message);
    case 403:
      logger.log(`Forbidden: ${response.message}`);
      return new ForbiddenException(response.message);
    case 404:
      logger.log(`Not Found: ${response.message}`);
      return new NotFoundException(response.message);
    case 408:
      logger.log(`Request Timeout: ${response.message}`);
      return new RequestTimeoutException(response.message);
    case 409:
      logger.log(`Conflict: ${response.message}`);
      return new ConflictException(response.message);
    case 413:
      logger.log(`Payload Too Large: ${response.message}`);
      return new PayloadTooLargeException(response.message);
    case 500:
      logger.log(`Internal Server Error: ${response.message}`);
      retu...",2,,146,,,2,,ANY
25769805020,BLOCK,-1,,"{
  const params: AWS.SES.SendEmailRequest = {
    Source: process.env.AWS_IDENTITY_EMAIL_SENDER,
    Destination: {
      ToAddresses: [user.email],
    },
    Message: {
      Subject: {
        Charset: 'UTF-8',
        Data: `Welcome ${user.firstName} ${user.lastName}`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateConfirmationTemplate(user.temporalId, tenant.url),
        },
      },
    },
  };
  return await emailProvider.sendEmail(params);
}",100,,176,,,5,,ANY
25769805021,BLOCK,2,,"{
    Source: process.env.AWS_IDENTITY_EMAIL_SENDER,
    Destination: {
      ToAddresses: [user.email],
    },
    Message: {
      Subject: {
        Charset: 'UTF-8',
        Data: `Welcome ${user.firstName} ${user.lastName}`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateConfirmationTemplate(user.temporalId, tenant.url),
        },
      },
    },
  }",43,,177,,,2,,ANY
25769805022,BLOCK,2,,"{
      ToAddresses: [user.email],
    }",17,,179,,,2,,ANY
25769805023,BLOCK,2,,[user.email],19,,180,,,2,,ANY
25769805024,BLOCK,2,,"{
      Subject: {
        Charset: 'UTF-8',
        Data: `Welcome ${user.firstName} ${user.lastName}`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateConfirmationTemplate(user.temporalId, tenant.url),
        },
      },
    }",13,,182,,,2,,ANY
25769805025,BLOCK,2,,"{
        Charset: 'UTF-8',
        Data: `Welcome ${user.firstName} ${user.lastName}`,
      }",15,,183,,,2,,ANY
25769805026,BLOCK,2,,"{
        Html: {
          Charset: 'UTF-8',
          Data: generateConfirmationTemplate(user.temporalId, tenant.url),
        },
      }",12,,187,,,2,,ANY
25769805027,BLOCK,2,,"{
          Charset: 'UTF-8',
          Data: generateConfirmationTemplate(user.temporalId, tenant.url),
        }",14,,188,,,2,,ANY
25769805028,BLOCK,-1,,"{
  const now = new Date();

  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');

  const formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}`;

  const params: AWS.SES.SendEmailRequest = {
    Source: process.env.AWS_IDENTITY_EMAIL_SENDER,
    Destination: {
      ToAddresses: [user.email],
    },
    Message: {
      Subject: {
        Charset: 'UTF-8',
        Data: `Alert: Attempted MFA Setup on Your Account`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateMfaAlertTemplate(formattedDateTime, `${user.firstName} ${user.lastName}`),
        },
      },
    },
  };
  return await emailProvider.sendEmail(params);
}",94,,198,,,4,,ANY
25769805029,BLOCK,2,,new Date(),14,,199,,,2,,ANY
25769805030,BLOCK,2,,"{
    Source: process.env.AWS_IDENTITY_EMAIL_SENDER,
    Destination: {
      ToAddresses: [user.email],
    },
    Message: {
      Subject: {
        Charset: 'UTF-8',
        Data: `Alert: Attempted MFA Setup on Your Account`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateMfaAlertTemplate(formattedDateTime, `${user.firstName} ${user.lastName}`),
        },
      },
    },
  }",43,,209,,,2,,ANY
25769805031,BLOCK,2,,"{
      ToAddresses: [user.email],
    }",17,,211,,,2,,ANY
25769805032,BLOCK,2,,[user.email],19,,212,,,2,,ANY
25769805033,BLOCK,2,,"{
      Subject: {
        Charset: 'UTF-8',
        Data: `Alert: Attempted MFA Setup on Your Account`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateMfaAlertTemplate(formattedDateTime, `${user.firstName} ${user.lastName}`),
        },
      },
    }",13,,214,,,2,,ANY
25769805034,BLOCK,2,,"{
        Charset: 'UTF-8',
        Data: `Alert: Attempted MFA Setup on Your Account`,
      }",15,,215,,,2,,ANY
25769805035,BLOCK,2,,"{
        Html: {
          Charset: 'UTF-8',
          Data: generateMfaAlertTemplate(formattedDateTime, `${user.firstName} ${user.lastName}`),
        },
      }",12,,219,,,2,,ANY
25769805036,BLOCK,2,,"{
          Charset: 'UTF-8',
          Data: generateMfaAlertTemplate(formattedDateTime, `${user.firstName} ${user.lastName}`),
        }",14,,220,,,2,,ANY
25769805037,BLOCK,-1,,"{
  const params: AWS.SES.SendEmailRequest = {
    Source: process.env.AWS_IDENTITY_EMAIL_SENDER,
    Destination: {
      ToAddresses: [user.email],
    },
    Message: {
      Subject: {
        Charset: 'UTF-8',
        Data: `Congratulations! MFA Successfully Set Up on Your Account`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateMfaSuccessTemplate(`${user.firstName} ${user.lastName}`),
        },
      },
    },
  };
  return await emailProvider.sendEmail(params);
}",94,,230,,,4,,ANY
25769805038,BLOCK,2,,"{
    Source: process.env.AWS_IDENTITY_EMAIL_SENDER,
    Destination: {
      ToAddresses: [user.email],
    },
    Message: {
      Subject: {
        Charset: 'UTF-8',
        Data: `Congratulations! MFA Successfully Set Up on Your Account`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateMfaSuccessTemplate(`${user.firstName} ${user.lastName}`),
        },
      },
    },
  }",43,,231,,,2,,ANY
25769805039,BLOCK,2,,"{
      ToAddresses: [user.email],
    }",17,,233,,,2,,ANY
25769805040,BLOCK,2,,[user.email],19,,234,,,2,,ANY
25769805041,BLOCK,2,,"{
      Subject: {
        Charset: 'UTF-8',
        Data: `Congratulations! MFA Successfully Set Up on Your Account`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateMfaSuccessTemplate(`${user.firstName} ${user.lastName}`),
        },
      },
    }",13,,236,,,2,,ANY
25769805042,BLOCK,2,,"{
        Charset: 'UTF-8',
        Data: `Congratulations! MFA Successfully Set Up on Your Account`,
      }",15,,237,,,2,,ANY
25769805043,BLOCK,2,,"{
        Html: {
          Charset: 'UTF-8',
          Data: generateMfaSuccessTemplate(`${user.firstName} ${user.lastName}`),
        },
      }",12,,241,,,2,,ANY
25769805044,BLOCK,2,,"{
          Charset: 'UTF-8',
          Data: generateMfaSuccessTemplate(`${user.firstName} ${user.lastName}`),
        }",14,,242,,,2,,ANY
25769805045,BLOCK,1,,"import { Tenant, User } from '@avantodev/avanto-db';",0,,1,,,1,,ANY
25769805046,BLOCK,5,,"import {
  BadRequestException,
  ConflictException,
  ForbiddenException,
  InternalServerErrorException,
  Logger,
  NotFoundException,
  PayloadTooLargeException,
  RequestTimeoutException,
  UnauthorizedException,
} from '@nestjs/common';",0,,9,,,5,,ANY
25769805047,BLOCK,10,,"export const evalENVBoolean = (val: string | undefined): boolean => {
  return val?.toLocaleLowerCase() === 'true';
};",0,,5,,,10,,ANY
25769805048,BLOCK,11,,"export const ValidFutureDate = (date: Date): boolean => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  console.log('today: ' + today);
  const dateToValidate = new Date(date);
  console.log('date to validate: ' + dateToValidate);
  console.log('validation: ', dateToValidate >= today);
  return dateToValidate >= today;
};",0,,25,,,11,,ANY
25769805049,BLOCK,12,,"export const ValidPastDate = (date: Date): boolean => {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const dateToValidate = new Date(date);
  return dateToValidate <= today;
};",0,,35,,,12,,ANY
25769805050,BLOCK,13,,"export const isNumber = (str: string): boolean => {
  if (typeof str !== 'string') {
    return false;
  }

  if (str.trim() === '') {
    return false;
  }

  return !Number.isNaN(Number(str));
};",0,,42,,,13,,ANY
25769805051,BLOCK,14,,"export const capitalizeFirstLetter = ([first, ...rest]: string) => first.toUpperCase() + rest.join('').toLowerCase();",0,,54,,,14,,ANY
25769805052,BLOCK,15,,"export const capitalizeSentence = (words: string) =>
  words
    .split(' ')
    .map((word) => capitalizeFirstLetter(word))
    .join(' ');",0,,56,,,15,,ANY
25769805053,BLOCK,16,,"export const onlyLetters = (text: string) => {
  const regex = /^[a-zA-Z ]*$/;
  return regex.test(text);
};",0,,62,,,16,,ANY
25769805054,BLOCK,17,,"export const stringHasNumbers = (text: string) => {
  return /[0-9]/.test(text);
};",0,,67,,,17,,ANY
25769805055,BLOCK,18,,"export const isValidApplication = (app: string): boolean => {
  const options: string[] = Object.values(IssuerEnum);
  return options.includes(app);
};",0,,71,,,18,,ANY
25769805056,BLOCK,19,,"export const fetchTenants = async (args: any, url: string) => {
  const opts = {
    method: 'POST',
    body: JSON.stringify(args),
    headers: {
      'Content-Type': 'application/json',
    },
  };
  const response = await fetch(url, opts)
    .then((response) => response.json())
    .catch((err) => {
      throw err;
    });
  return response;
};",0,,76,,,19,,ANY
25769805057,BLOCK,20,,"export const getValidEndpointUrl = (configUrl: string, type?: string): string => {
  if (!configUrl)
    throw new NotFoundException(`${type} env variable not found`, {
      cause: new Error(),
      description: `Missing ${type} env variable`,
    });
  const url = configUrl.endsWith('/') ? configUrl : `${configUrl}/`;
  return url;
};",0,,92,,,20,,ANY
25769805058,BLOCK,21,,"export const securityMsUrl = (): string => {
  return getValidEndpointUrl(process.env.SECURITY_MS_URL, 'SECURITY_MS_URL');
};",0,,102,,,21,,ANY
25769805059,BLOCK,22,,"export const catalogMsUrl = (): string => {
  return getValidEndpointUrl(process.env.CATALOG_MS_URL, 'CATALOG_MS_URL');
};",0,,106,,,22,,ANY
25769805060,BLOCK,23,,"export const tenantsMsUrl = (): string => {
  return getValidEndpointUrl(process.env.TENANTS_MS_URL, 'TENANTS_MS_URL');
};",0,,110,,,23,,ANY
25769805061,BLOCK,24,,"export const usersMsUrl = (): string => {
  return getValidEndpointUrl(process.env.USERS_MS_URL, 'USERS_MS_URL');
};",0,,114,,,24,,ANY
25769805062,BLOCK,25,,"export const recordGridsMsUrl = (): string => {
  return getValidEndpointUrl(process.env.RECORDS_GRID_MS_URL, 'RECORDS_GRID_MS_URL');
};",0,,118,,,25,,ANY
25769805063,BLOCK,26,,"export const appModulesMsUrl = (): string => {
  return getValidEndpointUrl(process.env.APP_MODULES_MS_URL, 'APP_MODULES_MS_URL');
};",0,,122,,,26,,ANY
25769805064,BLOCK,27,,"export const generalConfigMsUrl = (): string => {
  return getValidEndpointUrl(process.env.GENERAL_MS_URL, 'GENERAL_MS_URL');
};",0,,126,,,27,,ANY
25769805065,BLOCK,28,,"export const recordsMsUrl = (): string => {
  return getValidEndpointUrl(process.env.RECORDS_MS_URL, 'RECORDS_MS_URL');
};",0,,130,,,28,,ANY
25769805066,BLOCK,29,,"export const fileManagementMsUrl = (): string => {
  return getValidEndpointUrl(process.env.FILE_MANAGEMENT_MS_URL, 'FILE_MANAGEMENT_MS_URL');
};",0,,134,,,29,,ANY
25769805067,BLOCK,30,,"export const getResponse = async (url: string, options: object, logger: Logger) => {
  const response = await fetch(url, options)
    .then((response) => response.json())
    .catch((err) => {
      logger.error(err.message);
      throw new InternalServerErrorException(err.message);
    });

  switch (response.statusCode) {
    case 400:
      logger.log(`Bad Request: ${response.message}`);
      return new BadRequestException(response.message);
    case 401:
      logger.log(`Unauthorized: ${response.message}`);
      return new UnauthorizedException(response.message);
    case 403:
      logger.log(`Forbidden: ${response.message}`);
      return new ForbiddenException(response.message);
    case 404:
      logger.log(`Not Found: ${response.message}`);
      return new NotFoundException(response.message);
    case 408:
      logger.log(`Request Timeout: ${response.message}`);
      return new RequestTimeoutException(response.message);
    case 409:
      logger.log(`Conflict: ${re...",0,,138,,,30,,ANY
25769805068,BLOCK,31,,"export const sendEmailProcess = async (user: User, tenant: Tenant, emailProvider: EmailProvider) => {
  const params: AWS.SES.SendEmailRequest = {
    Source: process.env.AWS_IDENTITY_EMAIL_SENDER,
    Destination: {
      ToAddresses: [user.email],
    },
    Message: {
      Subject: {
        Charset: 'UTF-8',
        Data: `Welcome ${user.firstName} ${user.lastName}`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateConfirmationTemplate(user.temporalId, tenant.url),
        },
      },
    },
  };
  return await emailProvider.sendEmail(params);
};",0,,176,,,31,,ANY
25769805069,BLOCK,32,,"export const sendMfaAttemptEmailProcess = async (user: User, emailProvider: EmailProvider) => {
  const now = new Date();

  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');

  const formattedDateTime = `${year}-${month}-${day} ${hours}:${minutes}`;

  const params: AWS.SES.SendEmailRequest = {
    Source: process.env.AWS_IDENTITY_EMAIL_SENDER,
    Destination: {
      ToAddresses: [user.email],
    },
    Message: {
      Subject: {
        Charset: 'UTF-8',
        Data: `Alert: Attempted MFA Setup on Your Account`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateMfaAlertTemplate(formattedDateTime, `${user.firstName} ${user.lastName}`),
        },
      },
    },
  };
  return await emailProvider.sendEmail(params);
};",0,,198,,,32,,ANY
25769805070,BLOCK,33,,"export const sendMfaSuccessEmailProcess = async (user: User, emailProvider: EmailProvider) => {
  const params: AWS.SES.SendEmailRequest = {
    Source: process.env.AWS_IDENTITY_EMAIL_SENDER,
    Destination: {
      ToAddresses: [user.email],
    },
    Message: {
      Subject: {
        Charset: 'UTF-8',
        Data: `Congratulations! MFA Successfully Set Up on Your Account`,
      },
      Body: {
        Html: {
          Charset: 'UTF-8',
          Data: generateMfaSuccessTemplate(`${user.firstName} ${user.lastName}`),
        },
      },
    },
  };
  return await emailProvider.sendEmail(params);
};",0,,230,,,33,,ANY
25769805071,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805072,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805073,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805074,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805075,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805076,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805077,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805078,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805079,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805080,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805081,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805082,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805083,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805084,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805085,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805086,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805087,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805088,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805089,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805090,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805091,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805092,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805093,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805094,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805095,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805096,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805097,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805098,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805099,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805100,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805101,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805102,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805103,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805104,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805105,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805106,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805107,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805108,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805109,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805110,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805111,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805112,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805113,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805114,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805115,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805116,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805117,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805118,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805119,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805120,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805121,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805122,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805123,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805124,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805125,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805126,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805127,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805128,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805129,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805130,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805131,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805132,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805133,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805134,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805135,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805136,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805137,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805138,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805139,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805140,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805141,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805142,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805143,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805144,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805145,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805146,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805147,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805148,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805149,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805150,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805151,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805152,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805153,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805154,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805155,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805156,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805157,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805158,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805159,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805160,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805161,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805162,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805163,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805164,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805165,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805166,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805167,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805168,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805169,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805170,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805171,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805172,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805173,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805174,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805175,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805176,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805177,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805178,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805179,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805180,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805181,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805182,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805183,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805184,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805185,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805186,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805187,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805188,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805189,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805190,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805191,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805192,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805193,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805194,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805195,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805196,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805197,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805198,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805199,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805200,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805201,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805202,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805203,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805204,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805205,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805206,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805207,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805208,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805209,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805210,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805211,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805212,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805213,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805214,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805215,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805216,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805217,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805218,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805219,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805220,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805221,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805222,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805223,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805224,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805225,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805226,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805227,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805228,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805229,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805230,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805231,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805232,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805233,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805234,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805235,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805236,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805237,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805238,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805239,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805240,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805241,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805242,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805243,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805244,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805245,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805246,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805247,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805248,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805249,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805250,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805251,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805252,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805253,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805254,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805255,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805256,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805257,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805258,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805259,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805260,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805261,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805262,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805263,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805264,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805265,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805266,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805267,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805268,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805269,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805270,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805271,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805272,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805273,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805274,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805275,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805276,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805277,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805278,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805279,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805280,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805281,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805282,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805283,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805284,BLOCK,1,,<empty>,,,,,,1,,ANY
25769805285,BLOCK,1,,<empty>,,,,,,1,,ANY
